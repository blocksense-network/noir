---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZvdbhW5EoXfJde58G/Z5lVGCAUIo0hRQBk40hHi3U+vKi/vcNEtH3u4mfoywd92d7nark7y8+7z48cff394evny9Z+7d3/9vPv4+vT8/PT3h+evnx6+P319Of7vzzuH//h0987f3/lsQSwUC9VC0xCcBW8hWIgWzBLMEswSzBIOSzhC0xCdBW8hWIgWkoVsQSwUC2aJZklmSWZJhyUeIVpIFrIFsVAsVAtNQ3YWvAWzZLNks2Sz5MOSjlAsVAtNgzgL3kKwEC0kC9mCWcQsYhYxSzks+QjeQrAQLSQL2YJYKBaqhaahmqWapZqlmqUeFjlCtiAWioVqoWlozoK3ECxEC2ZpZmlmaWZph6UcoWnwzvXoeww9xh5Tj7lH6bH0WHvsPt99vvv84auIscfUY+5Reiw91h6bRSxojb7H7gvdF7ovdB+WdUMsPdYem0Usbe8AnhAIkZAImSCEQqiE1iHRnGhONCeaE82J5kRzojnRnGjONGeaM82Z5kxzpjnTnGnONGeahWahWWgWmoVmoVloFpqFZqG50FxoLjSjYLw+wBIhE4RQCJUAc8DzzhE8IRAiIREyQQiFUAk0N5obzY1mFJaPgETIBCHAnAGV0AwCqskLAP+4APCPE6ASWgeUkK8AT8A0GiASEiEThIBnsQNUQuuAYjLwhECIhETIBCHQrLuF7i+tg+4YCp4AcwREQiLAgyvVHQL3R/cI7D8oGYNIwCjcOpSMAeaDe4iSMaiE1gElYwAz7iFKxiASEiEThFAIldA6oGQMaEbJBNx5lIxBImQCdjjddQuhdkCBRFwpyiHi/qAcIu4zysGgEDAKtw7loIByiLiHKAeDQIgEmHHrUA4GQiiESmgdUA4GnhAIkUAzyiHihqMcDAqhEmBuOF44gidgD3YA7LsegFEV0DqgLgywi+v5JBCwk0dAImQC9vMEKIRKaB1QF0kAnhAI8BQARuHTseZTxnnIETwBo3A5WPMZl4OlnnE52C8McAjQc5QjeELooxKHY/EbZIIQCqESWgcsfgNPoDnTnGnONGeaM82Z5kyz0Cw0C81Cs9AsNAvNQrPQLDQXmgvNhWY9WSGVerZSgBCJ0/OVQiVAiFzoKUvBEwIhEhIhE4RQCJVAc6O50dxobjQ3mhvNjeZGc6O5dXNyjuAJgRAJiZAJQiiESqAZJZMFEAgQFkAiZAKEFVAIldA6oGRyA3hCIEQCjqEOgKOnB1QCDrHoClBEBp4Q+igUkQE9OI8ZCKEQKqF1QH0ZeALNieZEc6I50ZxoTjQnmjPNmWaUlWg/kwiZIIRCqITWAWVl4AmBQLPQLDQLzUIzykoSoHVAWRnAjJWAsjKIhETIBCEUQiW0DqgvA5orzZXmSnOludJcaa40V5obzdrUYK1qW6MAIZaotjYKQoAQKxNlZdAMsvY4DuAJgYC2xgPQxwQARjU0nI7gCRilvWgkoDtCl4naMRACGqQMqITWAbVjgPkUQCBEAjyYPCql4NNRKUUAnhAIaIZwOagUA7RDuC5UikEhoMPClaJSFFApBp6ALgtXgUoxSAR4MHlUQcWnowqqtuGBEAkYhctBORhgPrgulINBJWA+uFKUg4EnBMJhbrgKlINBJqDTw+Sx1Bs+HUu94W5gqRskAkbpywIhoGHEdWGpG7QOWOoNV4qlbhAIkQAzrgJL3UAI8GDy2k04fDwWdMPtwII2yATtqXBB2kY4XJH2ESBxbpD2VREUBsVB2rRlkHZtApJBhaS9hisg9VVQGBQHqa+B8iAZpN2aB2m7hvnpCyklfSdlpJ0f5qfvory+ismDZJD6MPtQBzWStvBookR7eHRIok28URykPsxPu3Z0LqJtu1EjaeOOnkW0czcKg7SnxJy1eQ/6wigPkkHqw/y0XUenItqvG4VB6sPstWU3yoPUhzlr144zv2jbbtRI2qajfRDt09E/iDbqRnmQNqeYvfbqRnWQ+jBnbddxkBft143CIPVhftqg4xAu2qEb1UHqw+y1STfyg+DD2V60T8fBXbRRN8qDtCPG/LQzT/r+zQ3yg9SH2Wt3bpQGqQ9z1gYdR3fR2jKqnYrWEQ7tResIJ86idWSUBsGHE3zROjIqg7TljyDt+fGyUGvLyA9Sn75DVJ+AZFAZpL4CaiStIyP1Yc76hhdHkKK1ZZSUfv26v+Or5A/fXx8f8Sb5zbvl443zt4fXx5fvd+9efjw/39/95+H5h/6jf749vGj8/vB6fPdwPr58PuIh/PL0/Aj6dX8b7c6HepzodPDxGmkMz/Pj8Wy18a0tjA+J4493BCvjKy/+aKYXxsfI649x5fqjcP5Hp7QwPgXO/zier4zHorXxuayMr7z+43i3MD6P9XPs4Svjse/q+GNHXBpfxvi8N96v3H8JzP+xq5yNx5Z5WkBxGI4HfVtSNByQexFWf1NMG4K7laHL4cRwdRuEy/DY2lZu4yijY3tbGj8+v4TN8StlIDjO6vhjizgbj7elm8vgUjG1DK4M28ugRM6gxJU0lDhuY6xL42+f3/bGJ1kZL3yal3r6NItuexlcKqaWwZVhfxmgq7LbsHQoqI63sbqVp8Ht86sLe+O9W5l/4NOkni8jnMd3l0HdXgb1Dy6DOqqhykoa6zhbVIlL42+fn/bGt9PPRyuzmcZLxVQarwzbaWyOq7ktVUMLvIIWVp4GLY7Pj7L0+XF8/sqm0gqXYSsrZ5sm4/plaf65jfErR/zWxv1rS/O/tXhu6XF8m8AhCJuCpSV4vCK7XUNb6nO958PgwLg2h3qbw5phPJAODEuGdDOkvGSIt6tYOiN5Pw55B67lAm/EaNifQ9k15NPHCn4qsbk7XCqmdocrw/bucLznvd2IspbOcktndWuG2xyq3zSE80cMfpazmc5LxVQ6rwz76Qzj7Hrg0hMi3O5DiH7NcJvDUh/5m+H87ImfgG2m81Ixlc4rw7+QzltthbL0qAylDENdS8abOSy9pH1riOev6dp+Y922G+v2Jxvr364iLO1bMdSboa0ZbnOIbtdwkYvyZxVz6Sy76byeQ7sZXFiag7sZ3p5L/w+DL8Pw9om/OAc5e//sLl5Al7H9liq7NzLIQm1OpsJtp8Jtp8Jtp8K7zVS43VRc75szqbjeN2dScW2YScX8HM5TIXupmL6Rp6m4PpHOpOL6RDqTimvDTCrm53CaiqsfjcykYvpGnqbiutebScV1rzeTimvDTCrm53CeirqXiukbeZqK65eyM6m4fik7k4prw0wq5udwmoq4uW1P38jTVFz/mGMmFdc/5phJxbVhJhXzczhNRdrctqdv5Hkqtk9QcfsEFbdPUHH/BJU2t+24fYK6/lWAmVRc/yrATCquDTOpmJ/DaSry5rY9fSPD+WrYTcX1L+fMpOLaMJOK+Tmcp2Jz256+kb+n4v3xxcOnp9ff/jD/F1SvTw8fnx/7l19+vHx6893v//3G7/AP+7+9fv30+PnH6yNMt7/uD3fv/ipR7ov49/hLanwZyn2JAV96/W48vszvf2Ey/wM=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: Field) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
