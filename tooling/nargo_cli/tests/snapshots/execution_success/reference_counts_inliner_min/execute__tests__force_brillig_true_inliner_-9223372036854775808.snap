---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2364549065372372629": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut"
      },
      "4717959987348973079": {
        "error_kind": "string",
        "string": "the original should not be mutated by copy_mut, only borrow_mut_two"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "15646392865860948187": {
        "error_kind": "string",
        "string": "the copy should have the expected content"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n        assert_eq(\n            refcount_1,\n            2,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
