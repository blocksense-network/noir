---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvBbhw3EoDhd9FZh2ZVscjyqwRG4DhKYECQDcVeYGH43ZfV7L/HPsxAy0Eu4e+1+lMPp9kasdffH/58+uPb379/evnr8z8P7377/vDH66fn509///78+eOHr58+v4z/9fvDlv+xeHgnjw91m0OZg8xB52BzqHPwObSHdzqGPofYBx+KjaHMQeagc7A51Dn4HNochlLHEPvQtjmUOcgcdA42h6H4GHwObQ59DrEPfZtDmYPMQedgc5hKn0qfSp9Kn0pMJaYSU4mhtDHYHOochtLH0OYwlLKNMeZYto0oxMBKyVDCiDxqTHIpG1EIIca3LZqRXzwmsUh+cc1I0DOMqMQ4y9IyGtGJdMapF81rIc9QCyGEEilHRl4Vec7qRCM6kddYnrNtRCGEUMKISqScr9Qa0Yk4Yr9+cxL2K3gPIZQwohJOtGPq8nqeEUc4s5pX9QwhlDAiT2yPOCIv5hmFyBPL9yIv6RlGVMKJRnQijsgLfEYhkDtyR+7IHbkjd+SOHMiBHMiBHMiBHMiBHMhxyLJtRCGEUMKISjjRiE4g50qRllEIIZQwohJOtCNyEUnPyC+OjPHFumU4kfe+kpF3P8nI+9+4DiXXjlpGIYRQwohKONGIlGtGHJFrZ0YhhEg5JyHXzoyU8+Xk2pmRcr6uXDsz4ohcO5qvNNfODCHy3p0vOdfOjEo40YhOxBH7z4M9CiEEsiM7siM7siM7ci4ry7cgl9UMIZQwohJONKITcURH7sgduSN35I7ckTtyR+7IuawsL5JcVjOESDnf91xWMyrhRCM6ETM0l9WMdGpGHuUZeZRkdCKOyCVjLaMQQihhRCWcaEQn4ghBFmRBFmRBFmRBFmRBFmRFVmRFVmRFVmRFVmRFVmRDNmRDNmRDNmRDNmRDNuSKXJErckWuyBW5IlfkilyRHdmRHdmRHdmRHdmRHdmRG3JDbsgNuSE35IbckBtyQ+7IHbkjd+SO3JE7ckfuyB05kAM5kAM5kAM5kPf1FRmdiBm2r689CiGEEkYMuW4ZTgy5loxOxBG5BmcUQggljKiEE8gFuSALsiALsiALsiALsiALsiArsiIrsiIrsiIrsiIrsiIbsiEbsiEbsiEbsiEbsiFX5IpckStyRa7IFbkiV+SK7MiO7MiO7MiO7MiO7MiO3JAbckNuyA25ITfkhpxrsEpGHJFrcEYhhFDCiErk4eOnleWyqpaRX1wzjKiEE43oRMyouaxm5Gl4hhBKGFEJJxrRiThiX1Z7IBfkglyQC3JBLsgFuSALsiALsiALsiALsiALsiArsiIrsiIrsiIrsiIrsiIbsiEbsiEbsiEbsiEbsiFX5IpckStyRa7IFbkiV+SK7MiO7MiO7MiO7MiO7MiOvC+rnlEIIVKODCMq4UQjOhFH7Mtqj9xm2DJya6Fk5FEtoxNxxL7FkDsq+ybDHkIoYUQlnMhti30LphMxw3N9zUg591lyfc1QwohKONGIlHN/JtfXHrm+ZhRCiJQ9w4hKONGITsQRub5mFEIIZEEWZEEWZEEWZEVWZEVWZEVWZEVWZEVWZEM25Fxf3jKUMKISTqTcMzoRR+T6mlEIIZQwohJOIFfkiuzIjuzIjuzIjuzIjuzIjtyQG3JDbsgNed/IiwwnGtGJIbctdwk3ohBCKGFEJZxoRCeQAzmQAzmQAzmQAzmQAzkOuW0bUQghlDCiEk40IuWSEUfkGpxRCCFSlgwjKuFEIzoRR+QanFEIIZAFOddg0wwnGtGJOCLX4IxCCKGEEciKrMiKrMiGbMiGbMiGbMiGbMiGbMgVuSJX5FyDzTKMqIQTjUh537uOI3INziiEEEoYUQknGoHsyLkGm2cUQggljKiEE43oRBzRkTtyR+7IHbkjd+SO3JE7ciAHciAHciAHciAH8r4GW0bM6Psa3KMQKfcMJYyohBON6EQcsa/BPQqBXJALckEuyAW5IBdkQRZkQRZkQRZkQRZkQRbkfQ1GRiGEUGKAfcvIpxoloxGdGGCXfJiyEYUYYLeMAfaaYUQl0vGMOCIX2oxCpJPvVy60GUZUIs8wX1cutBmdiCNyoc0ohBBKGJFOTkIuq8hJyGW1Ry6rGcOJnIRcVjOUGE5oxjjDyEnIZTWjHZGLKHIScslEvtJcMjMqkUflC8wlE3k+uWRmxBG5ZGbk+eTJ55IZz5qy8uHElmeUi+aoepaf1c7qZ8VRMR9bSVY5S87Ss+ysepaftX8PzepnBbU/5Jq1fw/LkrP0rP171Kx6lp/VzupnBbU/G5tVzlLK92M9q58VVNvO2o/1Hz8eH3iS+vvX16enfJD606PV8cD1y4fXp5evD+9evj0/Pz7858Pzt/2L/vny4WUfv354HX873qenlz/HOMC/Pj0/Zf14vBy9XT90PKjw42gZTyZOoP4qlOuC5ZTvwNiXWjk+N5rn8XXp+Pz1ZR7v7b7v33Tl+Fw5+/Fj32Dh+OrM3/hN8s7jV96/mps7x/FX5y+uH18aF9B4cLjy/YPjxy9tC8eP2xRv4LhLrJxBNGYwmq0cH3LfCZSipzCeRS9NQr1Mgq9No8VFKEuvYmvnqyi6dA5RL8L1t+JfvBrL1k9gi6Vp2NplImPtcsjtkmMa2uIFFZcLauWu6uc8+tIseOWK9qWLqRWmYPw+ed/xUldmUITb4si2JpzvwXj8viSYnsLSz8ZfzqHGvYJfXdS3PmGU4K0Y2VYEOa9mEVsTWjmFtihczqHXJaG3U4ilmZTz9ii6lRVBzw9rI2NJuLybNz7v3Z7J7SJcPYf8vxbcdZO/CcR5PYz86d1cE3pZEGSz85P3VuWKcGsi/fzkN3Lpom7CXVrGrtbVmew35kFz/3XOg17//HyTMD1/6o/Hu0tEbScxnpEsEa7nCxnb7fcTsUQ0OW/5Y09z6T318zbT2sqNSrfzlj9uF3rfOeh2/eNHPra6vr5kO9eX2BrxlkX+ZuHqIr8l3L3IVZxTUOkr93yV846tuq3cJlQvF4RaLAnnL+mq139LvSWMHxUIVu4WZGkmLzcqNdvuFpYWp9XLq3C/V2hr89Avr6K3e4Wlz0K/CkvXZL1c1VVtTbCLsPRu1qL3Cpf7Q21LM1kt3iDcvk/G5S63ydJ98rINuf28d/B/COX8ubdJvfsc/IrQ9dYvS9v5i7uUtvQT56eZlGvncPtDyLkwyngevfY55rKDceO3/9vEZQvDr9/wb3/CfstFdfsT9lsuqtvCWy6qt5/DtTc0bgmVD5XS9e6JvHpN3dpLObch2tIOezs/gPRtZTern3tJfWkXpNt2Hn/1J0X0f29TsQtXUdd7j/el488J0JU3MM4d9lja1+39vAD6yiZUb+frj5WPXbLFuYzHTvkvwvvxpw8fP73+8m8af6T1+unDH89Pxx//+vby8ae//frfL/wN/ybyy+vnj09/fnt9SunyDyPHf34LK4/h8v7xYTwq/E310fR9/vO8/Cvxx9CSfyz5x/H5MLS9/5En9j8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
