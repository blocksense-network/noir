---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
