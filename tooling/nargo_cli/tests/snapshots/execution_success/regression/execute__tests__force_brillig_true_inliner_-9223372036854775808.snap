---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
