---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
