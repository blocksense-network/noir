---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 497
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _497",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "EXPR [ (1, _0) (-1, _1) -1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(2)), Simple(Witness(3))]",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _2) (-1, _3) 4294967292 ]",
    "EXPR [ (-1, _2) 0 ]",
    "EXPR [ (-1, _4) 22 ]",
    "EXPR [ (-1, _5) 23 ]",
    "EXPR [ (-1, _6) 24 ]",
    "EXPR [ (-1, _7) 25 ]",
    "INIT (id: 0, len: 4, witnesses: [_4, _5, _6, _7])",
    "MEM (id: 0, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _8) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -7 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _8, _9) (-7, _9) (1, _10) -1 ]",
    "EXPR [ (1, _8, _10) (-7, _10) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -8 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (1, _8, _11) (-8, _11) (1, _12) -1 ]",
    "EXPR [ (1, _8, _12) (-8, _12) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -10 })], outputs: [Simple(Witness(13))]",
    "EXPR [ (1, _8, _13) (-10, _13) (1, _14) -1 ]",
    "EXPR [ (1, _8, _14) (-10, _14) 0 ]",
    "EXPR [ (1, _10, _12) (-1, _10) (-1, _12) (-1, _15) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _15, _14) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -11 })], outputs: [Simple(Witness(16))]",
    "EXPR [ (1, _8, _16) (-11, _16) (1, _17) -1 ]",
    "EXPR [ (1, _8, _17) (-11, _17) 0 ]",
    "EXPR [ (-1, _14, _15) (1, _15) (-1, _18) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _18, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -16 })], outputs: [Simple(Witness(19))]",
    "EXPR [ (1, _8, _19) (-16, _19) (1, _20) -1 ]",
    "EXPR [ (1, _8, _20) (-16, _20) 0 ]",
    "EXPR [ (-1, _17, _18) (1, _18) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _21, _20) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -17 })], outputs: [Simple(Witness(22))]",
    "EXPR [ (1, _8, _22) (-17, _22) (1, _23) -1 ]",
    "EXPR [ (1, _8, _23) (-17, _23) 0 ]",
    "EXPR [ (-1, _20, _21) (1, _21) (-1, _24) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _24, _23) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -18 })], outputs: [Simple(Witness(25))]",
    "EXPR [ (1, _8, _25) (-18, _25) (1, _26) -1 ]",
    "EXPR [ (1, _8, _26) (-18, _26) 0 ]",
    "EXPR [ (-1, _23, _24) (1, _24) (-1, _27) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _27, _26) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -19 })], outputs: [Simple(Witness(28))]",
    "EXPR [ (1, _8, _28) (-19, _28) (1, _29) -1 ]",
    "EXPR [ (1, _8, _29) (-19, _29) 0 ]",
    "EXPR [ (-1, _26, _27) (1, _27) (-1, _30) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _30, _29) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -20 })], outputs: [Simple(Witness(31))]",
    "EXPR [ (1, _8, _31) (-20, _31) (1, _32) -1 ]",
    "EXPR [ (1, _8, _32) (-20, _32) 0 ]",
    "EXPR [ (-1, _29, _30) (1, _30) (-1, _33) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _33, _32) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -21 })], outputs: [Simple(Witness(34))]",
    "EXPR [ (1, _8, _34) (-21, _34) (1, _35) -1 ]",
    "EXPR [ (1, _8, _35) (-21, _35) 0 ]",
    "EXPR [ (-1, _32, _33) (1, _33) (-1, _36) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _36, _35) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -22 })], outputs: [Simple(Witness(37))]",
    "EXPR [ (1, _8, _37) (-22, _37) (1, _38) -1 ]",
    "EXPR [ (1, _8, _38) (-22, _38) 0 ]",
    "EXPR [ (-1, _35, _36) (1, _36) (-1, _39) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _39, _38) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -23 })], outputs: [Simple(Witness(40))]",
    "EXPR [ (1, _8, _40) (-23, _40) (1, _41) -1 ]",
    "EXPR [ (1, _8, _41) (-23, _41) 0 ]",
    "EXPR [ (-1, _38, _39) (1, _39) (-1, _42) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _42, _41) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -24 })], outputs: [Simple(Witness(43))]",
    "EXPR [ (1, _8, _43) (-24, _43) (1, _44) -1 ]",
    "EXPR [ (1, _8, _44) (-24, _44) 0 ]",
    "EXPR [ (-1, _41, _42) (1, _42) (-1, _45) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _45, _44) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _44, _45) (1, _45) (-1, _46) 0 ]",
    "EXPR [ (1, _8, _46) (-25, _46) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _46) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(47)), Simple(Witness(48))]",
    "BLACKBOX::RANGE [(_48, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _47) (-1, _48) 4294967292 ]",
    "EXPR [ (-1, _47) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _49) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -7 })], outputs: [Simple(Witness(50))]",
    "EXPR [ (1, _49, _50) (-7, _50) (1, _51) -1 ]",
    "EXPR [ (1, _49, _51) (-7, _51) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -8 })], outputs: [Simple(Witness(52))]",
    "EXPR [ (1, _49, _52) (-8, _52) (1, _53) -1 ]",
    "EXPR [ (1, _49, _53) (-8, _53) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -10 })], outputs: [Simple(Witness(54))]",
    "EXPR [ (1, _49, _54) (-10, _54) (1, _55) -1 ]",
    "EXPR [ (1, _49, _55) (-10, _55) 0 ]",
    "EXPR [ (1, _51, _53) (-1, _51) (-1, _53) (-1, _56) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _56, _55) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -11 })], outputs: [Simple(Witness(57))]",
    "EXPR [ (1, _49, _57) (-11, _57) (1, _58) -1 ]",
    "EXPR [ (1, _49, _58) (-11, _58) 0 ]",
    "EXPR [ (-1, _55, _56) (1, _56) (-1, _59) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _59, _58) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -16 })], outputs: [Simple(Witness(60))]",
    "EXPR [ (1, _49, _60) (-16, _60) (1, _61) -1 ]",
    "EXPR [ (1, _49, _61) (-16, _61) 0 ]",
    "EXPR [ (-1, _58, _59) (1, _59) (-1, _62) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _62, _61) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -17 })], outputs: [Simple(Witness(63))]",
    "EXPR [ (1, _49, _63) (-17, _63) (1, _64) -1 ]",
    "EXPR [ (1, _49, _64) (-17, _64) 0 ]",
    "EXPR [ (-1, _61, _62) (1, _62) (-1, _65) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _65, _64) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -18 })], outputs: [Simple(Witness(66))]",
    "EXPR [ (1, _49, _66) (-18, _66) (1, _67) -1 ]",
    "EXPR [ (1, _49, _67) (-18, _67) 0 ]",
    "EXPR [ (-1, _64, _65) (1, _65) (-1, _68) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _68, _67) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -19 })], outputs: [Simple(Witness(69))]",
    "EXPR [ (1, _49, _69) (-19, _69) (1, _70) -1 ]",
    "EXPR [ (1, _49, _70) (-19, _70) 0 ]",
    "EXPR [ (-1, _67, _68) (1, _68) (-1, _71) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _71, _70) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -20 })], outputs: [Simple(Witness(72))]",
    "EXPR [ (1, _49, _72) (-20, _72) (1, _73) -1 ]",
    "EXPR [ (1, _49, _73) (-20, _73) 0 ]",
    "EXPR [ (-1, _70, _71) (1, _71) (-1, _74) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _74, _73) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -21 })], outputs: [Simple(Witness(75))]",
    "EXPR [ (1, _49, _75) (-21, _75) (1, _76) -1 ]",
    "EXPR [ (1, _49, _76) (-21, _76) 0 ]",
    "EXPR [ (-1, _73, _74) (1, _74) (-1, _77) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _77, _76) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -22 })], outputs: [Simple(Witness(78))]",
    "EXPR [ (1, _49, _78) (-22, _78) (1, _79) -1 ]",
    "EXPR [ (1, _49, _79) (-22, _79) 0 ]",
    "EXPR [ (-1, _76, _77) (1, _77) (-1, _80) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _80, _79) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -23 })], outputs: [Simple(Witness(81))]",
    "EXPR [ (1, _49, _81) (-23, _81) (1, _82) -1 ]",
    "EXPR [ (1, _49, _82) (-23, _82) 0 ]",
    "EXPR [ (-1, _79, _80) (1, _80) (-1, _83) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _83, _82) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: -24 })], outputs: [Simple(Witness(84))]",
    "EXPR [ (1, _49, _84) (-24, _84) (1, _85) -1 ]",
    "EXPR [ (1, _49, _85) (-24, _85) 0 ]",
    "EXPR [ (-1, _82, _83) (1, _83) (-1, _86) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _86, _85) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _85, _86) (1, _86) (-1, _87) 0 ]",
    "EXPR [ (1, _49, _87) (-25, _87) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _87) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (1, _0) (-1, _88) 2 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(88))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(89)), Simple(Witness(90))]",
    "BLACKBOX::RANGE [(_90, 32)] []",
    "EXPR [ (1, _88) (-4294967296, _89) (-1, _90) 4294967292 ]",
    "EXPR [ (-1, _89) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _88) 0 ], value: EXPR [ (1, _91) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -7 })], outputs: [Simple(Witness(92))]",
    "EXPR [ (1, _91, _92) (-7, _92) (1, _93) -1 ]",
    "EXPR [ (1, _91, _93) (-7, _93) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -8 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (1, _91, _94) (-8, _94) (1, _95) -1 ]",
    "EXPR [ (1, _91, _95) (-8, _95) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -10 })], outputs: [Simple(Witness(96))]",
    "EXPR [ (1, _91, _96) (-10, _96) (1, _97) -1 ]",
    "EXPR [ (1, _91, _97) (-10, _97) 0 ]",
    "EXPR [ (1, _93, _95) (-1, _93) (-1, _95) (-1, _98) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _98, _97) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -11 })], outputs: [Simple(Witness(99))]",
    "EXPR [ (1, _91, _99) (-11, _99) (1, _100) -1 ]",
    "EXPR [ (1, _91, _100) (-11, _100) 0 ]",
    "EXPR [ (-1, _97, _98) (1, _98) (-1, _101) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _101, _100) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -16 })], outputs: [Simple(Witness(102))]",
    "EXPR [ (1, _91, _102) (-16, _102) (1, _103) -1 ]",
    "EXPR [ (1, _91, _103) (-16, _103) 0 ]",
    "EXPR [ (-1, _100, _101) (1, _101) (-1, _104) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _104, _103) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -17 })], outputs: [Simple(Witness(105))]",
    "EXPR [ (1, _91, _105) (-17, _105) (1, _106) -1 ]",
    "EXPR [ (1, _91, _106) (-17, _106) 0 ]",
    "EXPR [ (-1, _103, _104) (1, _104) (-1, _107) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _107, _106) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -18 })], outputs: [Simple(Witness(108))]",
    "EXPR [ (1, _91, _108) (-18, _108) (1, _109) -1 ]",
    "EXPR [ (1, _91, _109) (-18, _109) 0 ]",
    "EXPR [ (-1, _106, _107) (1, _107) (-1, _110) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _110, _109) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -19 })], outputs: [Simple(Witness(111))]",
    "EXPR [ (1, _91, _111) (-19, _111) (1, _112) -1 ]",
    "EXPR [ (1, _91, _112) (-19, _112) 0 ]",
    "EXPR [ (-1, _109, _110) (1, _110) (-1, _113) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _113, _112) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -20 })], outputs: [Simple(Witness(114))]",
    "EXPR [ (1, _91, _114) (-20, _114) (1, _115) -1 ]",
    "EXPR [ (1, _91, _115) (-20, _115) 0 ]",
    "EXPR [ (-1, _112, _113) (1, _113) (-1, _116) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _116, _115) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -21 })], outputs: [Simple(Witness(117))]",
    "EXPR [ (1, _91, _117) (-21, _117) (1, _118) -1 ]",
    "EXPR [ (1, _91, _118) (-21, _118) 0 ]",
    "EXPR [ (-1, _115, _116) (1, _116) (-1, _119) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _119, _118) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -22 })], outputs: [Simple(Witness(120))]",
    "EXPR [ (1, _91, _120) (-22, _120) (1, _121) -1 ]",
    "EXPR [ (1, _91, _121) (-22, _121) 0 ]",
    "EXPR [ (-1, _118, _119) (1, _119) (-1, _122) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _122, _121) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -23 })], outputs: [Simple(Witness(123))]",
    "EXPR [ (1, _91, _123) (-23, _123) (1, _124) -1 ]",
    "EXPR [ (1, _91, _124) (-23, _124) 0 ]",
    "EXPR [ (-1, _121, _122) (1, _122) (-1, _125) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _125, _124) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: -24 })], outputs: [Simple(Witness(126))]",
    "EXPR [ (1, _91, _126) (-24, _126) (1, _127) -1 ]",
    "EXPR [ (1, _91, _127) (-24, _127) 0 ]",
    "EXPR [ (-1, _124, _125) (1, _125) (-1, _128) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _128, _127) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _127, _128) (1, _128) (-1, _129) 0 ]",
    "EXPR [ (1, _91, _129) (-25, _129) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _129) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (1, _0) (-1, _130) 1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(130))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(131)), Simple(Witness(132))]",
    "BLACKBOX::RANGE [(_132, 32)] []",
    "EXPR [ (1, _130) (-4294967296, _131) (-1, _132) 4294967292 ]",
    "EXPR [ (-1, _131) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _130) 0 ], value: EXPR [ (1, _133) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -7 })], outputs: [Simple(Witness(134))]",
    "EXPR [ (1, _133, _134) (-7, _134) (1, _135) -1 ]",
    "EXPR [ (1, _133, _135) (-7, _135) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -8 })], outputs: [Simple(Witness(136))]",
    "EXPR [ (1, _133, _136) (-8, _136) (1, _137) -1 ]",
    "EXPR [ (1, _133, _137) (-8, _137) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -10 })], outputs: [Simple(Witness(138))]",
    "EXPR [ (1, _133, _138) (-10, _138) (1, _139) -1 ]",
    "EXPR [ (1, _133, _139) (-10, _139) 0 ]",
    "EXPR [ (1, _135, _137) (-1, _135) (-1, _137) (-1, _140) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _140, _139) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -11 })], outputs: [Simple(Witness(141))]",
    "EXPR [ (1, _133, _141) (-11, _141) (1, _142) -1 ]",
    "EXPR [ (1, _133, _142) (-11, _142) 0 ]",
    "EXPR [ (-1, _139, _140) (1, _140) (-1, _143) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _143, _142) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -16 })], outputs: [Simple(Witness(144))]",
    "EXPR [ (1, _133, _144) (-16, _144) (1, _145) -1 ]",
    "EXPR [ (1, _133, _145) (-16, _145) 0 ]",
    "EXPR [ (-1, _142, _143) (1, _143) (-1, _146) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _146, _145) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -17 })], outputs: [Simple(Witness(147))]",
    "EXPR [ (1, _133, _147) (-17, _147) (1, _148) -1 ]",
    "EXPR [ (1, _133, _148) (-17, _148) 0 ]",
    "EXPR [ (-1, _145, _146) (1, _146) (-1, _149) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _149, _148) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -18 })], outputs: [Simple(Witness(150))]",
    "EXPR [ (1, _133, _150) (-18, _150) (1, _151) -1 ]",
    "EXPR [ (1, _133, _151) (-18, _151) 0 ]",
    "EXPR [ (-1, _148, _149) (1, _149) (-1, _152) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _152, _151) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -19 })], outputs: [Simple(Witness(153))]",
    "EXPR [ (1, _133, _153) (-19, _153) (1, _154) -1 ]",
    "EXPR [ (1, _133, _154) (-19, _154) 0 ]",
    "EXPR [ (-1, _151, _152) (1, _152) (-1, _155) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _155, _154) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -20 })], outputs: [Simple(Witness(156))]",
    "EXPR [ (1, _133, _156) (-20, _156) (1, _157) -1 ]",
    "EXPR [ (1, _133, _157) (-20, _157) 0 ]",
    "EXPR [ (-1, _154, _155) (1, _155) (-1, _158) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _158, _157) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -21 })], outputs: [Simple(Witness(159))]",
    "EXPR [ (1, _133, _159) (-21, _159) (1, _160) -1 ]",
    "EXPR [ (1, _133, _160) (-21, _160) 0 ]",
    "EXPR [ (-1, _157, _158) (1, _158) (-1, _161) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _161, _160) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -22 })], outputs: [Simple(Witness(162))]",
    "EXPR [ (1, _133, _162) (-22, _162) (1, _163) -1 ]",
    "EXPR [ (1, _133, _163) (-22, _163) 0 ]",
    "EXPR [ (-1, _160, _161) (1, _161) (-1, _164) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _164, _163) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -23 })], outputs: [Simple(Witness(165))]",
    "EXPR [ (1, _133, _165) (-23, _165) (1, _166) -1 ]",
    "EXPR [ (1, _133, _166) (-23, _166) 0 ]",
    "EXPR [ (-1, _163, _164) (1, _164) (-1, _167) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _167, _166) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: -24 })], outputs: [Simple(Witness(168))]",
    "EXPR [ (1, _133, _168) (-24, _168) (1, _169) -1 ]",
    "EXPR [ (1, _133, _169) (-24, _169) 0 ]",
    "EXPR [ (-1, _166, _167) (1, _167) (-1, _170) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _170, _169) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _169, _170) (1, _170) (-1, _171) 0 ]",
    "EXPR [ (1, _133, _171) (-25, _171) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _171) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (-1, _172) 18 ]",
    "EXPR [ (-1, _173) 19 ]",
    "EXPR [ (-1, _174) 20 ]",
    "EXPR [ (-1, _175) 21 ]",
    "INIT (id: 1, len: 4, witnesses: [_172, _173, _174, _175])",
    "MEM (id: 1, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _176) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -7 })], outputs: [Simple(Witness(177))]",
    "EXPR [ (1, _176, _177) (-7, _177) (1, _178) -1 ]",
    "EXPR [ (1, _176, _178) (-7, _178) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -8 })], outputs: [Simple(Witness(179))]",
    "EXPR [ (1, _176, _179) (-8, _179) (1, _180) -1 ]",
    "EXPR [ (1, _176, _180) (-8, _180) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -10 })], outputs: [Simple(Witness(181))]",
    "EXPR [ (1, _176, _181) (-10, _181) (1, _182) -1 ]",
    "EXPR [ (1, _176, _182) (-10, _182) 0 ]",
    "EXPR [ (1, _178, _180) (-1, _178) (-1, _180) (-1, _183) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _183, _182) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -11 })], outputs: [Simple(Witness(184))]",
    "EXPR [ (1, _176, _184) (-11, _184) (1, _185) -1 ]",
    "EXPR [ (1, _176, _185) (-11, _185) 0 ]",
    "EXPR [ (-1, _182, _183) (1, _183) (-1, _186) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _186, _185) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -16 })], outputs: [Simple(Witness(187))]",
    "EXPR [ (1, _176, _187) (-16, _187) (1, _188) -1 ]",
    "EXPR [ (1, _176, _188) (-16, _188) 0 ]",
    "EXPR [ (-1, _185, _186) (1, _186) (-1, _189) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _189, _188) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -17 })], outputs: [Simple(Witness(190))]",
    "EXPR [ (1, _176, _190) (-17, _190) (1, _191) -1 ]",
    "EXPR [ (1, _176, _191) (-17, _191) 0 ]",
    "EXPR [ (-1, _188, _189) (1, _189) (-1, _192) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _192, _191) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -18 })], outputs: [Simple(Witness(193))]",
    "EXPR [ (1, _176, _193) (-18, _193) (1, _194) -1 ]",
    "EXPR [ (1, _176, _194) (-18, _194) 0 ]",
    "EXPR [ (-1, _191, _192) (1, _192) (-1, _195) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _195, _194) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -19 })], outputs: [Simple(Witness(196))]",
    "EXPR [ (1, _176, _196) (-19, _196) (1, _197) -1 ]",
    "EXPR [ (1, _176, _197) (-19, _197) 0 ]",
    "EXPR [ (-1, _194, _195) (1, _195) (-1, _198) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _198, _197) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -20 })], outputs: [Simple(Witness(199))]",
    "EXPR [ (1, _176, _199) (-20, _199) (1, _200) -1 ]",
    "EXPR [ (1, _176, _200) (-20, _200) 0 ]",
    "EXPR [ (-1, _197, _198) (1, _198) (-1, _201) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _201, _200) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -21 })], outputs: [Simple(Witness(202))]",
    "EXPR [ (1, _176, _202) (-21, _202) (1, _203) -1 ]",
    "EXPR [ (1, _176, _203) (-21, _203) 0 ]",
    "EXPR [ (-1, _200, _201) (1, _201) (-1, _204) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _204, _203) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -22 })], outputs: [Simple(Witness(205))]",
    "EXPR [ (1, _176, _205) (-22, _205) (1, _206) -1 ]",
    "EXPR [ (1, _176, _206) (-22, _206) 0 ]",
    "EXPR [ (-1, _203, _204) (1, _204) (-1, _207) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _207, _206) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -23 })], outputs: [Simple(Witness(208))]",
    "EXPR [ (1, _176, _208) (-23, _208) (1, _209) -1 ]",
    "EXPR [ (1, _176, _209) (-23, _209) 0 ]",
    "EXPR [ (-1, _206, _207) (1, _207) (-1, _210) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _210, _209) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: -24 })], outputs: [Simple(Witness(211))]",
    "EXPR [ (1, _176, _211) (-24, _211) (1, _212) -1 ]",
    "EXPR [ (1, _176, _212) (-24, _212) 0 ]",
    "EXPR [ (-1, _209, _210) (1, _210) (-1, _213) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _213, _212) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _212, _213) (1, _213) (-1, _214) 0 ]",
    "EXPR [ (1, _176, _214) (-25, _214) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _214) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _215) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -7 })], outputs: [Simple(Witness(216))]",
    "EXPR [ (1, _215, _216) (-7, _216) (1, _217) -1 ]",
    "EXPR [ (1, _215, _217) (-7, _217) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -8 })], outputs: [Simple(Witness(218))]",
    "EXPR [ (1, _215, _218) (-8, _218) (1, _219) -1 ]",
    "EXPR [ (1, _215, _219) (-8, _219) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -10 })], outputs: [Simple(Witness(220))]",
    "EXPR [ (1, _215, _220) (-10, _220) (1, _221) -1 ]",
    "EXPR [ (1, _215, _221) (-10, _221) 0 ]",
    "EXPR [ (1, _217, _219) (-1, _217) (-1, _219) (-1, _222) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _222, _221) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -11 })], outputs: [Simple(Witness(223))]",
    "EXPR [ (1, _215, _223) (-11, _223) (1, _224) -1 ]",
    "EXPR [ (1, _215, _224) (-11, _224) 0 ]",
    "EXPR [ (-1, _221, _222) (1, _222) (-1, _225) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _225, _224) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -16 })], outputs: [Simple(Witness(226))]",
    "EXPR [ (1, _215, _226) (-16, _226) (1, _227) -1 ]",
    "EXPR [ (1, _215, _227) (-16, _227) 0 ]",
    "EXPR [ (-1, _224, _225) (1, _225) (-1, _228) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _228, _227) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -17 })], outputs: [Simple(Witness(229))]",
    "EXPR [ (1, _215, _229) (-17, _229) (1, _230) -1 ]",
    "EXPR [ (1, _215, _230) (-17, _230) 0 ]",
    "EXPR [ (-1, _227, _228) (1, _228) (-1, _231) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _231, _230) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -18 })], outputs: [Simple(Witness(232))]",
    "EXPR [ (1, _215, _232) (-18, _232) (1, _233) -1 ]",
    "EXPR [ (1, _215, _233) (-18, _233) 0 ]",
    "EXPR [ (-1, _230, _231) (1, _231) (-1, _234) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _234, _233) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -19 })], outputs: [Simple(Witness(235))]",
    "EXPR [ (1, _215, _235) (-19, _235) (1, _236) -1 ]",
    "EXPR [ (1, _215, _236) (-19, _236) 0 ]",
    "EXPR [ (-1, _233, _234) (1, _234) (-1, _237) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _237, _236) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -20 })], outputs: [Simple(Witness(238))]",
    "EXPR [ (1, _215, _238) (-20, _238) (1, _239) -1 ]",
    "EXPR [ (1, _215, _239) (-20, _239) 0 ]",
    "EXPR [ (-1, _236, _237) (1, _237) (-1, _240) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _240, _239) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -21 })], outputs: [Simple(Witness(241))]",
    "EXPR [ (1, _215, _241) (-21, _241) (1, _242) -1 ]",
    "EXPR [ (1, _215, _242) (-21, _242) 0 ]",
    "EXPR [ (-1, _239, _240) (1, _240) (-1, _243) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _243, _242) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -22 })], outputs: [Simple(Witness(244))]",
    "EXPR [ (1, _215, _244) (-22, _244) (1, _245) -1 ]",
    "EXPR [ (1, _215, _245) (-22, _245) 0 ]",
    "EXPR [ (-1, _242, _243) (1, _243) (-1, _246) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _246, _245) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -23 })], outputs: [Simple(Witness(247))]",
    "EXPR [ (1, _215, _247) (-23, _247) (1, _248) -1 ]",
    "EXPR [ (1, _215, _248) (-23, _248) 0 ]",
    "EXPR [ (-1, _245, _246) (1, _246) (-1, _249) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _249, _248) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: -24 })], outputs: [Simple(Witness(250))]",
    "EXPR [ (1, _215, _250) (-24, _250) (1, _251) -1 ]",
    "EXPR [ (1, _215, _251) (-24, _251) 0 ]",
    "EXPR [ (-1, _248, _249) (1, _249) (-1, _252) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _252, _251) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _251, _252) (1, _252) (-1, _253) 0 ]",
    "EXPR [ (1, _215, _253) (-25, _253) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _253) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _130) 0 ], value: EXPR [ (1, _254) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -7 })], outputs: [Simple(Witness(255))]",
    "EXPR [ (1, _254, _255) (-7, _255) (1, _256) -1 ]",
    "EXPR [ (1, _254, _256) (-7, _256) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -8 })], outputs: [Simple(Witness(257))]",
    "EXPR [ (1, _254, _257) (-8, _257) (1, _258) -1 ]",
    "EXPR [ (1, _254, _258) (-8, _258) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -10 })], outputs: [Simple(Witness(259))]",
    "EXPR [ (1, _254, _259) (-10, _259) (1, _260) -1 ]",
    "EXPR [ (1, _254, _260) (-10, _260) 0 ]",
    "EXPR [ (1, _256, _258) (-1, _256) (-1, _258) (-1, _261) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _261, _260) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -11 })], outputs: [Simple(Witness(262))]",
    "EXPR [ (1, _254, _262) (-11, _262) (1, _263) -1 ]",
    "EXPR [ (1, _254, _263) (-11, _263) 0 ]",
    "EXPR [ (-1, _260, _261) (1, _261) (-1, _264) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _264, _263) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -16 })], outputs: [Simple(Witness(265))]",
    "EXPR [ (1, _254, _265) (-16, _265) (1, _266) -1 ]",
    "EXPR [ (1, _254, _266) (-16, _266) 0 ]",
    "EXPR [ (-1, _263, _264) (1, _264) (-1, _267) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _267, _266) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -17 })], outputs: [Simple(Witness(268))]",
    "EXPR [ (1, _254, _268) (-17, _268) (1, _269) -1 ]",
    "EXPR [ (1, _254, _269) (-17, _269) 0 ]",
    "EXPR [ (-1, _266, _267) (1, _267) (-1, _270) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _270, _269) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -18 })], outputs: [Simple(Witness(271))]",
    "EXPR [ (1, _254, _271) (-18, _271) (1, _272) -1 ]",
    "EXPR [ (1, _254, _272) (-18, _272) 0 ]",
    "EXPR [ (-1, _269, _270) (1, _270) (-1, _273) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _273, _272) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -19 })], outputs: [Simple(Witness(274))]",
    "EXPR [ (1, _254, _274) (-19, _274) (1, _275) -1 ]",
    "EXPR [ (1, _254, _275) (-19, _275) 0 ]",
    "EXPR [ (-1, _272, _273) (1, _273) (-1, _276) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _276, _275) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -20 })], outputs: [Simple(Witness(277))]",
    "EXPR [ (1, _254, _277) (-20, _277) (1, _278) -1 ]",
    "EXPR [ (1, _254, _278) (-20, _278) 0 ]",
    "EXPR [ (-1, _275, _276) (1, _276) (-1, _279) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _279, _278) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -21 })], outputs: [Simple(Witness(280))]",
    "EXPR [ (1, _254, _280) (-21, _280) (1, _281) -1 ]",
    "EXPR [ (1, _254, _281) (-21, _281) 0 ]",
    "EXPR [ (-1, _278, _279) (1, _279) (-1, _282) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _282, _281) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -22 })], outputs: [Simple(Witness(283))]",
    "EXPR [ (1, _254, _283) (-22, _283) (1, _284) -1 ]",
    "EXPR [ (1, _254, _284) (-22, _284) 0 ]",
    "EXPR [ (-1, _281, _282) (1, _282) (-1, _285) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _285, _284) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -23 })], outputs: [Simple(Witness(286))]",
    "EXPR [ (1, _254, _286) (-23, _286) (1, _287) -1 ]",
    "EXPR [ (1, _254, _287) (-23, _287) 0 ]",
    "EXPR [ (-1, _284, _285) (1, _285) (-1, _288) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _288, _287) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: -24 })], outputs: [Simple(Witness(289))]",
    "EXPR [ (1, _254, _289) (-24, _289) (1, _290) -1 ]",
    "EXPR [ (1, _254, _290) (-24, _290) 0 ]",
    "EXPR [ (-1, _287, _288) (1, _288) (-1, _291) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _291, _290) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _290, _291) (1, _291) (-1, _292) 0 ]",
    "EXPR [ (1, _254, _292) (-25, _292) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _292) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _88) 0 ], value: EXPR [ (1, _293) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -7 })], outputs: [Simple(Witness(294))]",
    "EXPR [ (1, _293, _294) (-7, _294) (1, _295) -1 ]",
    "EXPR [ (1, _293, _295) (-7, _295) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -8 })], outputs: [Simple(Witness(296))]",
    "EXPR [ (1, _293, _296) (-8, _296) (1, _297) -1 ]",
    "EXPR [ (1, _293, _297) (-8, _297) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -10 })], outputs: [Simple(Witness(298))]",
    "EXPR [ (1, _293, _298) (-10, _298) (1, _299) -1 ]",
    "EXPR [ (1, _293, _299) (-10, _299) 0 ]",
    "EXPR [ (1, _295, _297) (-1, _295) (-1, _297) (-1, _300) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _300, _299) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -11 })], outputs: [Simple(Witness(301))]",
    "EXPR [ (1, _293, _301) (-11, _301) (1, _302) -1 ]",
    "EXPR [ (1, _293, _302) (-11, _302) 0 ]",
    "EXPR [ (-1, _299, _300) (1, _300) (-1, _303) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _303, _302) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -16 })], outputs: [Simple(Witness(304))]",
    "EXPR [ (1, _293, _304) (-16, _304) (1, _305) -1 ]",
    "EXPR [ (1, _293, _305) (-16, _305) 0 ]",
    "EXPR [ (-1, _302, _303) (1, _303) (-1, _306) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _306, _305) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -17 })], outputs: [Simple(Witness(307))]",
    "EXPR [ (1, _293, _307) (-17, _307) (1, _308) -1 ]",
    "EXPR [ (1, _293, _308) (-17, _308) 0 ]",
    "EXPR [ (-1, _305, _306) (1, _306) (-1, _309) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _309, _308) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -18 })], outputs: [Simple(Witness(310))]",
    "EXPR [ (1, _293, _310) (-18, _310) (1, _311) -1 ]",
    "EXPR [ (1, _293, _311) (-18, _311) 0 ]",
    "EXPR [ (-1, _308, _309) (1, _309) (-1, _312) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _312, _311) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -19 })], outputs: [Simple(Witness(313))]",
    "EXPR [ (1, _293, _313) (-19, _313) (1, _314) -1 ]",
    "EXPR [ (1, _293, _314) (-19, _314) 0 ]",
    "EXPR [ (-1, _311, _312) (1, _312) (-1, _315) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _315, _314) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -20 })], outputs: [Simple(Witness(316))]",
    "EXPR [ (1, _293, _316) (-20, _316) (1, _317) -1 ]",
    "EXPR [ (1, _293, _317) (-20, _317) 0 ]",
    "EXPR [ (-1, _314, _315) (1, _315) (-1, _318) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _318, _317) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -21 })], outputs: [Simple(Witness(319))]",
    "EXPR [ (1, _293, _319) (-21, _319) (1, _320) -1 ]",
    "EXPR [ (1, _293, _320) (-21, _320) 0 ]",
    "EXPR [ (-1, _317, _318) (1, _318) (-1, _321) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _321, _320) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -22 })], outputs: [Simple(Witness(322))]",
    "EXPR [ (1, _293, _322) (-22, _322) (1, _323) -1 ]",
    "EXPR [ (1, _293, _323) (-22, _323) 0 ]",
    "EXPR [ (-1, _320, _321) (1, _321) (-1, _324) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _324, _323) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -23 })], outputs: [Simple(Witness(325))]",
    "EXPR [ (1, _293, _325) (-23, _325) (1, _326) -1 ]",
    "EXPR [ (1, _293, _326) (-23, _326) 0 ]",
    "EXPR [ (-1, _323, _324) (1, _324) (-1, _327) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _327, _326) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: -24 })], outputs: [Simple(Witness(328))]",
    "EXPR [ (1, _293, _328) (-24, _328) (1, _329) -1 ]",
    "EXPR [ (1, _293, _329) (-24, _329) 0 ]",
    "EXPR [ (-1, _326, _327) (1, _327) (-1, _330) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _330, _329) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _329, _330) (1, _330) (-1, _331) 0 ]",
    "EXPR [ (1, _293, _331) (-25, _331) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _331) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(332)), Simple(Witness(333))]",
    "BLACKBOX::RANGE [(_333, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _332) (-1, _333) 4294967294 ]",
    "EXPR [ (-1, _332) 0 ]",
    "EXPR [ (-1, _334) 16 ]",
    "EXPR [ (-1, _335) 17 ]",
    "INIT (id: 2, len: 2, witnesses: [_334, _335])",
    "MEM (id: 2, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _336) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -7 })], outputs: [Simple(Witness(337))]",
    "EXPR [ (1, _336, _337) (-7, _337) (1, _338) -1 ]",
    "EXPR [ (1, _336, _338) (-7, _338) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -8 })], outputs: [Simple(Witness(339))]",
    "EXPR [ (1, _336, _339) (-8, _339) (1, _340) -1 ]",
    "EXPR [ (1, _336, _340) (-8, _340) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -10 })], outputs: [Simple(Witness(341))]",
    "EXPR [ (1, _336, _341) (-10, _341) (1, _342) -1 ]",
    "EXPR [ (1, _336, _342) (-10, _342) 0 ]",
    "EXPR [ (1, _338, _340) (-1, _338) (-1, _340) (-1, _343) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _343, _342) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -11 })], outputs: [Simple(Witness(344))]",
    "EXPR [ (1, _336, _344) (-11, _344) (1, _345) -1 ]",
    "EXPR [ (1, _336, _345) (-11, _345) 0 ]",
    "EXPR [ (-1, _342, _343) (1, _343) (-1, _346) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _346, _345) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -16 })], outputs: [Simple(Witness(347))]",
    "EXPR [ (1, _336, _347) (-16, _347) (1, _348) -1 ]",
    "EXPR [ (1, _336, _348) (-16, _348) 0 ]",
    "EXPR [ (-1, _345, _346) (1, _346) (-1, _349) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _349, _348) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -17 })], outputs: [Simple(Witness(350))]",
    "EXPR [ (1, _336, _350) (-17, _350) (1, _351) -1 ]",
    "EXPR [ (1, _336, _351) (-17, _351) 0 ]",
    "EXPR [ (-1, _348, _349) (1, _349) (-1, _352) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _352, _351) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -18 })], outputs: [Simple(Witness(353))]",
    "EXPR [ (1, _336, _353) (-18, _353) (1, _354) -1 ]",
    "EXPR [ (1, _336, _354) (-18, _354) 0 ]",
    "EXPR [ (-1, _351, _352) (1, _352) (-1, _355) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _355, _354) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -19 })], outputs: [Simple(Witness(356))]",
    "EXPR [ (1, _336, _356) (-19, _356) (1, _357) -1 ]",
    "EXPR [ (1, _336, _357) (-19, _357) 0 ]",
    "EXPR [ (-1, _354, _355) (1, _355) (-1, _358) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _358, _357) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -20 })], outputs: [Simple(Witness(359))]",
    "EXPR [ (1, _336, _359) (-20, _359) (1, _360) -1 ]",
    "EXPR [ (1, _336, _360) (-20, _360) 0 ]",
    "EXPR [ (-1, _357, _358) (1, _358) (-1, _361) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _361, _360) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -21 })], outputs: [Simple(Witness(362))]",
    "EXPR [ (1, _336, _362) (-21, _362) (1, _363) -1 ]",
    "EXPR [ (1, _336, _363) (-21, _363) 0 ]",
    "EXPR [ (-1, _360, _361) (1, _361) (-1, _364) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _364, _363) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -22 })], outputs: [Simple(Witness(365))]",
    "EXPR [ (1, _336, _365) (-22, _365) (1, _366) -1 ]",
    "EXPR [ (1, _336, _366) (-22, _366) 0 ]",
    "EXPR [ (-1, _363, _364) (1, _364) (-1, _367) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _367, _366) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -23 })], outputs: [Simple(Witness(368))]",
    "EXPR [ (1, _336, _368) (-23, _368) (1, _369) -1 ]",
    "EXPR [ (1, _336, _369) (-23, _369) 0 ]",
    "EXPR [ (-1, _366, _367) (1, _367) (-1, _370) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _370, _369) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(336))], q_c: -24 })], outputs: [Simple(Witness(371))]",
    "EXPR [ (1, _336, _371) (-24, _371) (1, _372) -1 ]",
    "EXPR [ (1, _336, _372) (-24, _372) 0 ]",
    "EXPR [ (-1, _369, _370) (1, _370) (-1, _373) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _373, _372) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _372, _373) (1, _373) (-1, _374) 0 ]",
    "EXPR [ (1, _336, _374) (-25, _374) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _374) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(375)), Simple(Witness(376))]",
    "BLACKBOX::RANGE [(_376, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _375) (-1, _376) 4294967294 ]",
    "EXPR [ (-1, _375) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _377) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -7 })], outputs: [Simple(Witness(378))]",
    "EXPR [ (1, _377, _378) (-7, _378) (1, _379) -1 ]",
    "EXPR [ (1, _377, _379) (-7, _379) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -8 })], outputs: [Simple(Witness(380))]",
    "EXPR [ (1, _377, _380) (-8, _380) (1, _381) -1 ]",
    "EXPR [ (1, _377, _381) (-8, _381) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -10 })], outputs: [Simple(Witness(382))]",
    "EXPR [ (1, _377, _382) (-10, _382) (1, _383) -1 ]",
    "EXPR [ (1, _377, _383) (-10, _383) 0 ]",
    "EXPR [ (1, _379, _381) (-1, _379) (-1, _381) (-1, _384) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _384, _383) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -11 })], outputs: [Simple(Witness(385))]",
    "EXPR [ (1, _377, _385) (-11, _385) (1, _386) -1 ]",
    "EXPR [ (1, _377, _386) (-11, _386) 0 ]",
    "EXPR [ (-1, _383, _384) (1, _384) (-1, _387) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _387, _386) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -16 })], outputs: [Simple(Witness(388))]",
    "EXPR [ (1, _377, _388) (-16, _388) (1, _389) -1 ]",
    "EXPR [ (1, _377, _389) (-16, _389) 0 ]",
    "EXPR [ (-1, _386, _387) (1, _387) (-1, _390) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _390, _389) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -17 })], outputs: [Simple(Witness(391))]",
    "EXPR [ (1, _377, _391) (-17, _391) (1, _392) -1 ]",
    "EXPR [ (1, _377, _392) (-17, _392) 0 ]",
    "EXPR [ (-1, _389, _390) (1, _390) (-1, _393) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _393, _392) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -18 })], outputs: [Simple(Witness(394))]",
    "EXPR [ (1, _377, _394) (-18, _394) (1, _395) -1 ]",
    "EXPR [ (1, _377, _395) (-18, _395) 0 ]",
    "EXPR [ (-1, _392, _393) (1, _393) (-1, _396) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _396, _395) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -19 })], outputs: [Simple(Witness(397))]",
    "EXPR [ (1, _377, _397) (-19, _397) (1, _398) -1 ]",
    "EXPR [ (1, _377, _398) (-19, _398) 0 ]",
    "EXPR [ (-1, _395, _396) (1, _396) (-1, _399) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _399, _398) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -20 })], outputs: [Simple(Witness(400))]",
    "EXPR [ (1, _377, _400) (-20, _400) (1, _401) -1 ]",
    "EXPR [ (1, _377, _401) (-20, _401) 0 ]",
    "EXPR [ (-1, _398, _399) (1, _399) (-1, _402) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _402, _401) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -21 })], outputs: [Simple(Witness(403))]",
    "EXPR [ (1, _377, _403) (-21, _403) (1, _404) -1 ]",
    "EXPR [ (1, _377, _404) (-21, _404) 0 ]",
    "EXPR [ (-1, _401, _402) (1, _402) (-1, _405) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _405, _404) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -22 })], outputs: [Simple(Witness(406))]",
    "EXPR [ (1, _377, _406) (-22, _406) (1, _407) -1 ]",
    "EXPR [ (1, _377, _407) (-22, _407) 0 ]",
    "EXPR [ (-1, _404, _405) (1, _405) (-1, _408) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _408, _407) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -23 })], outputs: [Simple(Witness(409))]",
    "EXPR [ (1, _377, _409) (-23, _409) (1, _410) -1 ]",
    "EXPR [ (1, _377, _410) (-23, _410) 0 ]",
    "EXPR [ (-1, _407, _408) (1, _408) (-1, _411) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _411, _410) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(377))], q_c: -24 })], outputs: [Simple(Witness(412))]",
    "EXPR [ (1, _377, _412) (-24, _412) (1, _413) -1 ]",
    "EXPR [ (1, _377, _413) (-24, _413) 0 ]",
    "EXPR [ (-1, _410, _411) (1, _411) (-1, _414) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _414, _413) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _413, _414) (1, _414) (-1, _415) 0 ]",
    "EXPR [ (1, _377, _415) (-25, _415) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _415) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (-1, _416) 10 ]",
    "EXPR [ (-1, _417) 11 ]",
    "INIT (id: 3, len: 2, witnesses: [_416, _417])",
    "MEM (id: 3, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _418) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -7 })], outputs: [Simple(Witness(419))]",
    "EXPR [ (1, _418, _419) (-7, _419) (1, _420) -1 ]",
    "EXPR [ (1, _418, _420) (-7, _420) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -8 })], outputs: [Simple(Witness(421))]",
    "EXPR [ (1, _418, _421) (-8, _421) (1, _422) -1 ]",
    "EXPR [ (1, _418, _422) (-8, _422) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -10 })], outputs: [Simple(Witness(423))]",
    "EXPR [ (1, _418, _423) (-10, _423) (1, _424) -1 ]",
    "EXPR [ (1, _418, _424) (-10, _424) 0 ]",
    "EXPR [ (1, _420, _422) (-1, _420) (-1, _422) (-1, _425) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _425, _424) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -11 })], outputs: [Simple(Witness(426))]",
    "EXPR [ (1, _418, _426) (-11, _426) (1, _427) -1 ]",
    "EXPR [ (1, _418, _427) (-11, _427) 0 ]",
    "EXPR [ (-1, _424, _425) (1, _425) (-1, _428) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _428, _427) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -16 })], outputs: [Simple(Witness(429))]",
    "EXPR [ (1, _418, _429) (-16, _429) (1, _430) -1 ]",
    "EXPR [ (1, _418, _430) (-16, _430) 0 ]",
    "EXPR [ (-1, _427, _428) (1, _428) (-1, _431) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _431, _430) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -17 })], outputs: [Simple(Witness(432))]",
    "EXPR [ (1, _418, _432) (-17, _432) (1, _433) -1 ]",
    "EXPR [ (1, _418, _433) (-17, _433) 0 ]",
    "EXPR [ (-1, _430, _431) (1, _431) (-1, _434) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _434, _433) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -18 })], outputs: [Simple(Witness(435))]",
    "EXPR [ (1, _418, _435) (-18, _435) (1, _436) -1 ]",
    "EXPR [ (1, _418, _436) (-18, _436) 0 ]",
    "EXPR [ (-1, _433, _434) (1, _434) (-1, _437) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _437, _436) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -19 })], outputs: [Simple(Witness(438))]",
    "EXPR [ (1, _418, _438) (-19, _438) (1, _439) -1 ]",
    "EXPR [ (1, _418, _439) (-19, _439) 0 ]",
    "EXPR [ (-1, _436, _437) (1, _437) (-1, _440) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _440, _439) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -20 })], outputs: [Simple(Witness(441))]",
    "EXPR [ (1, _418, _441) (-20, _441) (1, _442) -1 ]",
    "EXPR [ (1, _418, _442) (-20, _442) 0 ]",
    "EXPR [ (-1, _439, _440) (1, _440) (-1, _443) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _443, _442) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -21 })], outputs: [Simple(Witness(444))]",
    "EXPR [ (1, _418, _444) (-21, _444) (1, _445) -1 ]",
    "EXPR [ (1, _418, _445) (-21, _445) 0 ]",
    "EXPR [ (-1, _442, _443) (1, _443) (-1, _446) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _446, _445) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -22 })], outputs: [Simple(Witness(447))]",
    "EXPR [ (1, _418, _447) (-22, _447) (1, _448) -1 ]",
    "EXPR [ (1, _418, _448) (-22, _448) 0 ]",
    "EXPR [ (-1, _445, _446) (1, _446) (-1, _449) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _449, _448) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -23 })], outputs: [Simple(Witness(450))]",
    "EXPR [ (1, _418, _450) (-23, _450) (1, _451) -1 ]",
    "EXPR [ (1, _418, _451) (-23, _451) 0 ]",
    "EXPR [ (-1, _448, _449) (1, _449) (-1, _452) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _452, _451) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(418))], q_c: -24 })], outputs: [Simple(Witness(453))]",
    "EXPR [ (1, _418, _453) (-24, _453) (1, _454) -1 ]",
    "EXPR [ (1, _418, _454) (-24, _454) 0 ]",
    "EXPR [ (-1, _451, _452) (1, _452) (-1, _455) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _455, _454) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _454, _455) (1, _455) (-1, _456) 0 ]",
    "EXPR [ (1, _418, _456) (-25, _456) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _456) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 3, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _457) 0 ]) ",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -7 })], outputs: [Simple(Witness(458))]",
    "EXPR [ (1, _457, _458) (-7, _458) (1, _459) -1 ]",
    "EXPR [ (1, _457, _459) (-7, _459) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -8 })], outputs: [Simple(Witness(460))]",
    "EXPR [ (1, _457, _460) (-8, _460) (1, _461) -1 ]",
    "EXPR [ (1, _457, _461) (-8, _461) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -10 })], outputs: [Simple(Witness(462))]",
    "EXPR [ (1, _457, _462) (-10, _462) (1, _463) -1 ]",
    "EXPR [ (1, _457, _463) (-10, _463) 0 ]",
    "EXPR [ (1, _459, _461) (-1, _459) (-1, _461) (-1, _464) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _464, _463) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -11 })], outputs: [Simple(Witness(465))]",
    "EXPR [ (1, _457, _465) (-11, _465) (1, _466) -1 ]",
    "EXPR [ (1, _457, _466) (-11, _466) 0 ]",
    "EXPR [ (-1, _463, _464) (1, _464) (-1, _467) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _467, _466) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -16 })], outputs: [Simple(Witness(468))]",
    "EXPR [ (1, _457, _468) (-16, _468) (1, _469) -1 ]",
    "EXPR [ (1, _457, _469) (-16, _469) 0 ]",
    "EXPR [ (-1, _466, _467) (1, _467) (-1, _470) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _470, _469) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -17 })], outputs: [Simple(Witness(471))]",
    "EXPR [ (1, _457, _471) (-17, _471) (1, _472) -1 ]",
    "EXPR [ (1, _457, _472) (-17, _472) 0 ]",
    "EXPR [ (-1, _469, _470) (1, _470) (-1, _473) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _473, _472) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -18 })], outputs: [Simple(Witness(474))]",
    "EXPR [ (1, _457, _474) (-18, _474) (1, _475) -1 ]",
    "EXPR [ (1, _457, _475) (-18, _475) 0 ]",
    "EXPR [ (-1, _472, _473) (1, _473) (-1, _476) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _476, _475) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -19 })], outputs: [Simple(Witness(477))]",
    "EXPR [ (1, _457, _477) (-19, _477) (1, _478) -1 ]",
    "EXPR [ (1, _457, _478) (-19, _478) 0 ]",
    "EXPR [ (-1, _475, _476) (1, _476) (-1, _479) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _479, _478) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -20 })], outputs: [Simple(Witness(480))]",
    "EXPR [ (1, _457, _480) (-20, _480) (1, _481) -1 ]",
    "EXPR [ (1, _457, _481) (-20, _481) 0 ]",
    "EXPR [ (-1, _478, _479) (1, _479) (-1, _482) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _482, _481) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -21 })], outputs: [Simple(Witness(483))]",
    "EXPR [ (1, _457, _483) (-21, _483) (1, _484) -1 ]",
    "EXPR [ (1, _457, _484) (-21, _484) 0 ]",
    "EXPR [ (-1, _481, _482) (1, _482) (-1, _485) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _485, _484) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -22 })], outputs: [Simple(Witness(486))]",
    "EXPR [ (1, _457, _486) (-22, _486) (1, _487) -1 ]",
    "EXPR [ (1, _457, _487) (-22, _487) 0 ]",
    "EXPR [ (-1, _484, _485) (1, _485) (-1, _488) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _488, _487) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -23 })], outputs: [Simple(Witness(489))]",
    "EXPR [ (1, _457, _489) (-23, _489) (1, _490) -1 ]",
    "EXPR [ (1, _457, _490) (-23, _490) 0 ]",
    "EXPR [ (-1, _487, _488) (1, _488) (-1, _491) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _491, _490) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(457))], q_c: -24 })], outputs: [Simple(Witness(492))]",
    "EXPR [ (1, _457, _492) (-24, _492) (1, _493) -1 ]",
    "EXPR [ (1, _457, _493) (-24, _493) 0 ]",
    "EXPR [ (-1, _490, _491) (1, _491) (-1, _494) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _494, _493) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _493, _494) (1, _494) (-1, _495) 0 ]",
    "EXPR [ (1, _457, _495) (-25, _495) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _495) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 6 })], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 4294967288 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(496)), Simple(Witness(497))]",
    "BLACKBOX::RANGE [(_497, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _496) (-1, _497) 4294967288 ]",
    "EXPR [ (-1, _496) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 6 })], outputs: []",
    "EXPR [ (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(5) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 27 }, Mov { destination: Relative(2), source: Relative(3) }, Call { location: 38 }, Call { location: 39 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 37 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 30 }, Return, Return, Call { location: 123 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 50 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(12) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 2 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 2 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 128 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(5) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 28 }, Mov { destination: Relative(2), source: Relative(3) }, Call { location: 39 }, Call { location: 40 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 38 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 31 }, Return, Return, Call { location: 124 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(12) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 3 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 3 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 129 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 116 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 56 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(3) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(9) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(12) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(12) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(15) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(16) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(17) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(18) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(9) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(4), size: 36 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U8)), Array { value_types: [Simple(Integer(U8))], size: 36 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 121 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 4",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "7Z3Rjhy3rkX/xc9+KJGSSJ1fCYLASXwCA4YTOPEBLoL8+22SxT0BLrqGd+roLS+jnc70Xuwx2VRL1aU/3/388cdvv/zw6cu/f/393b+++/Pdj18/ff786ZcfPv/604c/Pv365fHon+8O+9EfP9v7d73FQDFwDD2GEcOMQWLQGJYPI1xGuIxwGeEywmWEywiXES4jXEa4zHCZ4TLDZYbLDJcZLjNcZrjMcJnhIuEi4SLhIuEi4SLhIuEi4SLhIuGi4aLhouGi4aLhouGi4aLhouGi4bLCZYXLCpcVLitcVriscFnhssJlhUs7jnNs50jnyOfYz3Gc4zxHOUc9x9OvnX7t9GunXzv92unXTr92+rXTrz38yMYVIx3n+PCjvx7CM+uflPonpf5fKdWepZSNFKlFllr5pPM5EQJFBBQBUPAp8BR0CjgFm8KFwoXChcOFw4XDhcOFw4XDhcOFw4XDhcPln3fVf0rAS4DOEqCzBOivRw5nF/7hj68fP1o+/60tP5r1bx++fvzyx7t/ffn2+fP7d//58Pmb/9Lvv3344uMfH74+/u/x/t3HLz8/xofhvz99/mjqr/cvzz6eP1Wkn08WWXg6Ufn5XfL5erzh+W2s8/ltdjx/lONv3PH88ez5/eL5TREAHfQmB+J0aNTf5nC8OLztVbT14qDPHPTq34HyH7IN7ncd+vHMoV38Y+pqp8MifpZMlyG8ZNOY800v4m8Owk9fBG98EX1ShtDlaTa0sTOEhaoax9N0arIxhFpdWtpvC4EOJDRRexYCtZ0h0EQIzG9J6L87PK9K6jtfRB8IYdCbXsTfHdbTF7EzH4+OqjzG06qknfl4TLSJQ56+RfPOfDwEVXmsp/nIO98ej6Vode1pNvHdt8erOYfk89t6+ubIcnvK8IpFZc5wbVGaNPTjds/vd1PyOoZSy+68M4Zaz+5jawylpt1lZwzF2fTaGUOtbY+tOVnrumNrTtaa5tiak7WuObbmZK1tjq05Weubc2tO1hrn5H2Nkyj/CsRv+bBPR8fznybTnLcb7ysWlcZ7bVFqvHPdbrxy98P2dQylxiu0M4Za45W+NYZS45W5M4Za4xXdGUOt8erWnKw1Xt2ak7XGq1tzstZ4dWtO1hqvbs3JWuNdW3Oy1ngXbWy8M6uCpL2l8faG5z9/AeN2433FotJ4ry1KjXfdX+Ved2eT67+wSH20nUEUl6kP3hpEbaH6GDuDKC5VH7IziFrzfbwXbQ2i1H0fZbg1iFL7bW1rYtb6b2tbE7PWgFvbmpi1Dtza1sSsteB2ey/nqofi78DteWkQ33/LvfSg+fI+IfRWj5cyv4pj3t8tvr2n80oUtU56e1vnOoriv+vtnZ1Xoqj10tubO9dRFJvp7f2d6yiK3ZT3ZmexnfLe7Cz20743O4sNte/NzmJH7Xuzs9hS+97sLPbU25s9Fz2VWxYI9+d/h6utnmo/fMWj1A+vtnuq/XDcXTV6JYpaPxxzaxTVK6B0bxS1fjiPrVEU++GkrVEU++Hcm53Ffjj3ZmexH8692Vnsh7I3O4v9UPZmZ7Efyt7sLPbD2/tAV/2w4zOmPq8P0fv98BWPUj/U+1cWNb0969T71xY15a1RFPuhjr1R1PqhytYoiv1Q19Yoiv1w7c3OYj9ce7Oz2A/X3uws9sO1NzuL/XDtzc5aP6Rjb3bW+iEdGy84Ys0C6U2eRzBu98PXPCr9kK42iIr9kI67s85Xoij1Q7r9JZ/rKGr9kBrtjaLUD6n1rVHU+iG1uTWK6ldl9mZn8bsutDc7i19Wob3ZWfy+Cu3Nzlo/JNqbncV+SHuzs9gP+djXDzvlW1Yfz/shX2TmY/sHf0vu9EaPgYuBePS3ehwvHuONHv3ltYzn7+B8fx+Tbu8UvRJFrS/f3im6jqLYl2/vFL0SRa0v394puo6i2Jdv7xRdR1Hsy31vdla/g7o3O4t9eezNzmJfHnuzs9iXx97sLPblsTc7i315bNzH7DMbYl/PI7j6elC1p77iUeqp1x61nnq1U1TtqfN2dl5HUeupU7ZGUeypc+2NotZTpW2NothThbdGUeypsjc7iz1V9mZn9cYMe7Oz2FN1b3YWe6ruzc5iT9W92Vnsqbf3iq56KkIY/LxK9fKLfS9fWuk03+jxcoOqzuutHi9xXHzmvvoGUbWn3t4reiWKWk+9vVd0HUWxp97eK3olilpPvb1XdB1Frafy7b2i6yhqPZWPvdlZ66l87M3OWk/lY2921noqH3uzs3rLo73ZWbzrUdubncUbH7WNdz4anGV6cXs9bnK7H77mUemH3O7fQIFv7xW9EkWpH/LtvaLrKGr9kG/vFb0SRakf8u29ousoiv3w9l7RdRTFfsh7s7PYD3lvdhb7Ie/NzmI/5L3ZWeyHvDc7i/2w783OYj/sG++rMDWfL8fF36Hvi0Cw3CrjLbdUErRSuaitvvFzuqK8dRxveAWKOYle1OW4f60x394ZeiWK2lzg9s7QdRTFucDtnaFXoqjNBW7vDF1HUZwL3N4Zuo6iOBeYe7OzOBeYe7OzOBeYe7OzOBeYe7OzOBeYe7OzOBeQvdlZnAvIxmuN18y3rKUXEYz7fej2N4heiaLWh27fS+46imIfun03uVeiqPWh2/eTu46i2Idu31HuOopiH9K92VnsQ7o3O4t9aO3NzmIfWnuzs9iH1t7sLPahtTc7i31ovSk7v3/814efPn39P0f3sR+zNv1ErMdP9p/df47HB7v376b/FP+p/nP5TzumyIbHs9UO1oqBY+gxjBhmDBKDxrB8sNO29Dxtq8VxWxrHbWkct6Vx3Jaex231OG9L47wtjfO2NM7b0vO8rRkHbmkcuKVx4JbGgVt6HrilceKWxolbGiduaZy4pXHili3f9vDp4dPDp4ePHblli6s9fHr49PAZ4WNnbtGIQ7c0Dt3SOHRL49AtjUO3bElwhM8InxE+M3zs1C1bsJvhM8Nnhs8MHzt2y5bTZvjM8JnhI+Fj527ZYpeEj4SPHbxli0928pYt/9jRWz7KOeo5Lsu/OH7LFmjs/C0f6Rz5HPs5jnOc5yjnqOe4YrSDuOztaJ1+6/Rbp986/ew0LlsQWaffOv3W6bdOPz+Sq8/zTK54hFJwip7CXPU8mCsekRSaIp0t68dxns4Vj6RzS+eWzpb/g85T6uKRdG7p3NLZKsHu0OFH1cUj6UzpTOlsJWE30miUzpTOlM6UzlYbw4sznTmdOZ05na1Ipot05nTmdOZ0tmqxuVbr6dzT2UrGZrXNisY+UzUrG/tY06xwQkgKTbFsYczeOY64MWqzCgpBKThFTzFSzBSSQlOsU1hF2SeKNtN5pvNM55nOVlo28W8znWc6z3Se6Ww1Zu/wTdJZ0lnSWdLZas0usGqSzpLOks6SzlZw4iKdNZ01nTWdrepsbbFpOms6azprOlvp2VVFbaXzSueVziudrf7s4p+20nml80rndTqT1aBdo0NHy0coBafoKczZxcxHJIWmSGerQWt01NK5pbPVoF2GQlaDNmsgq0Fr3GQ1GEJSaIqHs12wQVaD1l/JajAEpeAUPcVIMVNICk2xTuHnQR6HqbTmtOa05rT2oyEPMpXenN6c3pzefkqk3d6eenr39O7p3dPbD4w87GX39O7p3dO7p7efHXm4Su+R3iO9R3r7MZL2BU4a6T3Se6T3SG8/UdK+aEkzvWd6z/Se6e2HS3r/n+k903um90xvP2fSZgIk6S3pLekt6e1HTjZX6S3pLekt6e2nT9rsgDS9Nb39EEqbFZCfQ2m9n/woylATSqAUaqXykyntwwr54ZShCIqhOtSAmlACpVDrVOzHVpJPnRoeIyiG6lDGsFkIHxOPCZRCgeFHWdqchBsYDYwGRgPDz3W1GQo3MBoYDYwGhp/Xyq7AIDAIDALDj2+1+QwTGAQGgUFgePVaW2MGg8FgMBgMr2Cb0zCDwWAwGAyGV7HNbriD0cHoYHQwvJK7KzA6GB2MDoZXc/epMBgDDD8S1iY37KfC2syFvaJt24D9bNhQAqVQK5VXdagGRVAM1aGcMUyBMcGYYEwwvLptAZ8FDAFDwBAwvMJtcYoFDAFDwBAwvMptYZwVDAVDwVAwvM6nKzAUDAVDwfA6t8kRLzAWGAuMBYbXuU2VeIGxwFhgrGR0r3Nrjv1oeIygGKpDGcOmSP2YeEygFAoMr3NxBUYDo4HRwPA6t8lSb2A0MLzObXbUvc5t6tO9ztU/kzUogmKoDjWgJpRAKdRK5XVuC3KdwWAwGAwGw+vcFs86g8FgMBgMhte5LXT1DkYHo4PRwfA6V//8CUYHo4PRwfA6X67AGGAMMAYYXue22NMHGAOMAcYAw+vcplh9gjHBmGBMMLzObcLVJxgTjAnGBMPr3PpqFzAEDAFDwLA6p8MVGAKGgCFgWJ2TzbW6gqFgWJ370UHd6pxs3tTVGZadVuenEiiFWqnWAdWgCIqhOpQzLO8XGAuMBcZKxrA6J1tDGUfDYwTFUB3KGHbh4TgmHhMohQKjOcPWMxoYDYwGRgOjOcMVGA2MBkYDw09st4s3BoFBYBAYBIbVOdnttweBQWAQGASG1TnZBfqDwWAwGAwGg51hr5zBYDAYDAajO8MVGB2MDkYHozvDXnkHo4NhdU52G+dhdU42RxpW56dqUARlDLvZ8bA6P9WAmlDGsBnUGAq1Us0DqkERFEN1qAE1oZzhq11gTDAEDAHD6pxszjUEDAFDwBAwrM7J5lxDwBAwFAwFQ51hfysFQ8FQMBQMr/PuCgwFY4GxwPA6776iB8YCY4GxwPA6t3nYWGCsZMzjgGpQxrD52jwYj3WoATWhnNFNKR4Do4HRwPA6H67AaGA0MBoYXufDVy/BaGB4nU9f0zSGLSNNr/NQDNWhjGHzq+l1bqtL0+s8lEKtVF7noRoUQTFUhxpQzrBIGQwGg8HoYHidT1+XBaOD0cHoYHid2202Zwejg9HBGGB4ndstMecAY4AxwBhgeJ2LKzAGGAOMCYbXuW0UzwnGBGOCMcHwOhdfgwZjgjHBEDC8zq3DTgFDwBAwBAyvc/X1bTAEDAFDwfA6V1dgKBgKhoLhdW5zs6lgKBhe5+pr6sawJajpdR6KoBjKGDarml7noSaUQCnUOpV4nYdqUATFUM6wNf1j4LEJJVAK5Qxb729gNDAaGA0Mr/Pl+wdgNDAaGA0Mq3O2eZgQGAQGgUFgWJ3z4QoMAoPAIDDIGfbKGQwGg8FgMNgZ9soZDAaDwWAw2Bm+RwJGB6OD0cGwOmdbA5MORgejg9HBsDpnWweTAcYAY4AxwBjOsFc+wBhgWJ373c3F6pxtXUvGOi+JFavzUzUogmKoDjWgJpRAKZQxbB4mAoaAIWAIGL7xZPMwETAEDAFDwPAtKJuHiYKhYCgYCoY6w7YwFQwFQ8FQMNQZphYYC4wFxgLD6pxtbiYLjAXGAmOBYXXOdv2sHsnQo0ERFEM5Y5gaeGxCCZRCOcO2bRsYDYwGRgOjOcMVGA2MBkYDw+vcbsqjBAaBYXXOdrMctTpnu/BBvc5tBqVW56eaUAJlDJs3qdd5tysl/vPh66cPP37++Ptj89q2t799+Sn3sh//+cf//Jb/58evnz5//vTLD799/fWnjz9/+/rR9r1zy/tP2+X+7pESLN/HPvZ3dmbNYzHUdskbfkHfs778Qn/8wrJfIPuFePBRZI/tuu//sv31/wU=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Many parts of the code here are regressions from issue #5503 (https://github.com/noir-lang/noir/issues/5503)\nfn main(x: u32) {\n    lambdas_in_array_literal(x - 1);\n    lambdas_in_array_literal(x);\n    lambdas_in_array_literal(x + 2);\n    lambdas_in_array_literal(x + 1);\n\n    lambdas_in_slice_literal(x - 1);\n    lambdas_in_slice_literal(x);\n    lambdas_in_slice_literal(x + 1);\n    lambdas_in_slice_literal(x + 2);\n\n    functions_in_array_literal(x - 1);\n    functions_in_array_literal(x);\n    functions_in_slice_literal(x - 1);\n    functions_in_slice_literal(x);\n\n    let example_lambda: fn(u8) -> u8 = |x| x + 1;\n    let lambdas: [fn(u8) -> u8; 8] = [example_lambda; 8];\n    println(lambdas[0](5));\n    // Dynamic dispatch\n    println(lambdas[x - 1](5));\n\n    let lambdas: [fn(()) -> (); 1] = [|_: ()| {}];\n    lambdas[0](());\n    lambdas[x - 1](());\n\n    // Also check against slices\n    let lambdas: [fn(()) -> ()] = &[|_: ()| {}];\n    lambdas[0](());\n    lambdas[x - 1](());\n}\n\nfn lambdas_in_array_literal(x: u32) {\n    let xs = [|| println(\"hi\"), || println(\"bye\"), || println(\"wow\"), || println(\"big\")];\n    (xs[x])();\n}\n\nfn lambdas_in_slice_literal(x: u32) {\n    let xs = &[|| println(\"hi\"), || println(\"bye\"), || println(\"big\"), || println(\"wow\")];\n    (xs[x])();\n}\n\nfn functions_in_array_literal(x: u32) {\n    let xs = [foo, bar];\n    (xs[x])();\n}\n\nfn functions_in_slice_literal(x: u32) {\n    let xs = &[baz, qux];\n    (xs[x])();\n}\n\nfn foo() {\n    println(\"hi\");\n}\nfn bar() {\n    println(\"bye\");\n}\nfn baz() {\n    println(\"hi\");\n}\nfn qux() {\n    println(\"bye\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "print_unconstrained",
    "print_unconstrained",
    "print_unconstrained",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
