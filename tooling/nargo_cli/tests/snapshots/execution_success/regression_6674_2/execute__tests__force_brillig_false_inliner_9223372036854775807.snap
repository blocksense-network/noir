---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZzYrTUBRO2qZ/aZuOPsaANG0y7ewG8QHcCe4ynZmF4FoRhCx8AhEEFz6BS/du3CgIggtx405Q8CHsHe+ZfP16knamSWXAQLnJPed+5+d+5/7MuE72uLZtOFs8AvLbth3b1kBeX/yO7PdouyfskN0y8WejKOoo8ZXo/6RjMd1q8EeCX1H+Ry2LcyfN8DEWsdte/Hx47zkZP6qKX+avyvhvFsTs21jfU6wid0r0ow+xOeAL2m1Uk4PYJXsO+IEysd8lX8teE1yyJ/5wfmQeJHee4utQkSGXUIZ2PMXOdcSS3GAu3ZxW7HAf22Eeop16CXY6Sjxl1vzQWeWvR3E0S4hjSFiuEmOrmhgv1s02+FUSdijYvHeXjd+tJjehzDHOp8y/mat96Dc/2fc8J6tDHNsCOeq/Acxb9n2Tdb5ZTdwbr/Nif1frfJP8WbfO+4qvQ0XG66mv2PEVO9cRK1CwGyQrWocQs8y1VmKU82JDiRF9q5E+vpvHo77btjXr3EcYk8cr7OO81hR/qt4PeP/slWgHc1jEE8ESLvRJdmS/R1s+Mi8Di4dc6Cu+1kgf383jUd9d22pcwDN7Xenj3NUVf/rKuG3nSJsHbX+SvdBw5x70b7M/PQfM+/Zd40ePfNb4uwnntJzuav0RfuWtP+JbzVnlo7xjDqVvbluNc7iHFe1rm3ChjHP1JtzO49wD6N+Gc48B86F9D5TxvK83yT7KijiHmLIfVvw3hbFL9pycHBXVB9/XZJyn6LZJJrqPbGvkn+y7mQftHIXn3ydktw/4Wu2wb6KfAuZT0tfOPBr3NF76gCu8DBxH3bvQ5mBNHMxZ0X9mW5PHz4QZOKtx4HrBZ72hoh8osQXkA44V/HqayaRP7mQNkJV5hzA5+AJ+cA68dPN4tfzsKfpD0nGcrPb3QDYgGc5/QBh9xQ5ygfmHMhmLtbKupl7k2L9sTb0CzJekX1ZNyflCqymer6vW1Gvb/q+p61VTiF1VTUmtBIoe32lx76+TDHnL97cBfaNum2JuKuOK+I8+5fH/rW2R/xoHJfZ/wcGlu1a6HLdWo6h/2RrlOwbys09Y2jqHOe+SPnJL08ezLOq/s63JzS/yD/8GXrTv+Bv4fpU1et++V8mL6ezv/enc1zTLEd5FHLLvkf4H+41zIm1jCz/Ppkl4NknOkjg5OYnmyQ3CNw/+H69s+8l0MpuPo/n0OJ4kk4Pd249H48lsHMXjaBKHyeGu7c/jg+N5FCej09B8jtfZl1pvppkc1znztOy33NFZX/A80v8quovfN/t+cb5KV+0ZvZ8Fem5Oe46h9DXS5b5OuqpfT1f1xXY3XfVRZD7IcA02T89+Y74QS/zwSP+H/ZY5acMYGT9U7LfJ/pLfSh/uAYxVV/pE38zPd8GzLcZe9v8gzm0SPvaxb8KdKupqUVLTeTINw8MoPI3CeF1d/QEBlDjjASQAAA==",
  "debug_symbols": "pZfdauMwEIXfxde5kGb021cppaStWwImCW6ysJS8+874eJx2wabYN/k+19FBGo3V+Kt5a1+uH8+H4/vps3l4/Gpe+kPXHT6eu9Pr/nI4HeWvX43TD8/NA+0aH4AIJCADBagDyAEeIAAphBRCCiGFJMULClAHsAM8QAADAYhAGhDkXhDIVRRkoAB1QHSABwhgIAARQEpESkRKlJS0a5IDPEAAAwGIQAIyUACkZKRkpGSkZKRkSamCCCQgAwWoA4oDPKBVklIUHhlGaoGl0FW+XQQeIEC/LIWrYWQcmUbmkWVkBb1zJrpHSYVM2ERDsoqOYhHvTLyJjioqOqqqBJNoop3iVLJJGWVoMK+iTaVtqI1EmqytRDpDbSaIN9FRUYVNgonlaGNBskkxqaMEZ+JNyIRNdJRWQxuPtBrabKRL1nYjXaA2HCSbyCjWBWrbDaKNB7EcbT4ImwSTaJJMskkxqaNo+/HwPLNJMJEc1mJqG0Ikh7VQ2oqQOoq2I+tKtSEhZMImwSSaJBNN1vmUYlJH0daFeBMy0eRwu+0aO7yeL33b6tn17TSTM+6879vjpXk4Xrtu1/zZd9fhS5/n/XHgZd/LXSlwe3wTSuD7oWvVbrv7aDc/VEpjo6UmfgqIPxP8fELS5hwCEtPc+MUZ1GwzKMHNJfB8QtZOHQIy5TUzqIFsBjXwqoRcp4QaViSQY1sEuTy7D3lhDlSizYH97E6UhYSQbQ5yAPhVCWXay+jnu2mplMlPpZTWWhdx3880v59LteQ4PRVc5ifBm4u5HPG7asbt1Yybq7nY29WqSd7FrQmctybMnzLLhUjTjqaU10WUey1LWhlx39G6ciHV3yNo+yx43VP6u3K67eV028vptpfTbS7nwllRgh0VJc0+5rzwb7xOJ16N6wKy7UUtdc0KvLVDCbNbyWHhEY/2Q4RiWRUQbB8p8aqAMp0x/23ik1ztXw/9j5fVmyb1h/1L146X79fj67e7l79nu2Mvu+f+9Nq+XftWk+5vvPLxSPLeRExP+uoil76mHTmvl17vuiiX+emmk/kH",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
