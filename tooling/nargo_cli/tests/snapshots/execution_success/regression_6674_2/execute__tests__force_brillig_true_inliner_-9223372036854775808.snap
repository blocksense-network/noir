---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91ZzY7jRBBuJ3Z+WU2AC4/hJPYkcxsJhuUZ4II3swMPgYSPvAMPgMSZE3ckblyROCAu3JBA4oTEaqdnuyafP3/xzGzcK82WFLXbXV1/XVVdriRuD0kYU3cEGJEPwsM0zAewPrz+nYd5fhwsp8S3T/rbvNhOhX49yr+eBppJHPq50Y9k/3wc6HxS7+mjLsZ3cv2bw/O7bu8fsfS384up//sdOpvvfFjHO1sPHwF95/qPrYs48t/S/zjQjyH70ziyF96XvR9/BmeNftCjLvkT8isHfKagWwQ9y4T4OeLliP/MRY23ZUL8TB62jz2b7VIh60KsJfScCj6p4PMYaZlt0JbJgdG59rkrPojDZzDokQ/SsvzKZ90HH2U3i7kM1nr08VPTY+TaYGtj4o1rE1jjM8B6CXVjGNIc9fX0K6DLeCxrV97iuDwP8/w4uHfeMv5vKm+puO3KW5mQdSHWOD9kgk8m+DxGWidO14y4NhT7Ivtczjqmrp2bUbaB0BFtkdG7izD6+PuK9FP3Ib5juyrbvQ33wWPP04mgdVcu/hroMp4jW0TKb6uu+E6EnipOM5Ld9mWu7Zf2zZAR7qdgl+/C89zt77207l//zfZV7N/oDHLxuSH/jPA/D/MZ6G9jeoScV5tqebWurqqyurwsdtV7RN/DAOyE3zSqnrJay/v8JdDC8zPdee9T0B3xv3R7ml+ALOazI+DTo89uOEYRVIwmtIa1FOe2Gcns3P1j2/T1vL8HuozHsmKeM7nfFhuibgx32fAHoMt4jmRT+Qt9+KJuypgKGTE2+o7narPe7lbFbvOsXFfr0wfFc1dtdCL04VzN96iHyP51W1OZf2FNNRK2H7j2vYu+mdG7b8KoaqqH1qrqLps6XQec92OfLccYgoqxh+aiMdjnZ6DLeMwTfcX4q9ozozWsT8wX+/Rbw4t8Lrd+a+eCfjsW+g9cO1fimWb07tsw9uG3KodNhTw92ueMfRNB5f+H9ipM7mP81vh3fTMpvzUacxch/5f5ar1dFeWqWJfL6ux18r/qaalY4TjiHO9gPqY5fhNZra7syD0NZUeVX43fE0Fz1LP+CdHF+hbjiutbw/8xjF6WX0FuD1b/c27ykMJan70xL8dvIAefV1Y39cazHQp8ttNE4Kuct3A6xyAt1ddAm1+QrGbDkcBHehnh/xRGL8s/JJ/yLeWvRvuQ33X1KCL9f5OzXfAeUr2ZgWvHCNa/bLdfwG58D2F/p6vXqew8IPtE6lsU6hvXQN0JKCODuofw/+9/gS7jGcS4M3bl6bNdUVb586Wfru66M07C86gG3ermnnGYmz8xvtHLCP93w73+/RGezR6Z4Ofx/u7ASw6MNzTEu7RuvpvWbfxh3cY33rO6LaOtzWENc6iHd8Ic7YW0TI6M8P8KczuTCeyx/QvBf0L8G3KLd9x/nAv8ucD35/On0Qsj6t73fyg3PIk+vmPZzHdixNV1SG121Wa5PCuWz4tl+Tq9tVi99oT4YN61O9Pb5z/aY/uwxsG9XOMY/gu3p/l/eJ679r3sDtA1mbie84A9xyRpyqt6juoe4Z7jKNnTTJMmb/UNirbq6od01Yqo06FacRaQsFbsqsPUd91967CE9MH63vaqOhW/ET2ksBa7Tm30cur766vsMxX46j+ZBeGrOlB9m7CPIh/0hUO+3/BXt/f9lzm8pGi1KQAA",
  "debug_symbols": "pZfNTuMwFIXfJesu/Htt8yoIoVICqlS1VWhHGqG++9ybk5PCglmYTb8vpD517GubfA6v48v1/Xl/fDt9DA+Pn8PLtD8c9u/Ph9Nue9mfjvrXz8HZh6/DQ9gMvs0IDvBAACKQgAwIUACkBKREpESkRE3xiggkIAMCFKACbUZygKZERQAikIAMCFCACmhK2gzZAR4IQAQSkAEBClABpAhSBCmiKVkRgQRkQIACVKDNKA7wAFIKUgpSClIKUoqmiKICbUZ1gAcCEAFNKYoMCKApVVGBNsM7jWlGmxBnkilCKZRKaYt4R/GUQLGJ9iaJkilCKZRKaYtYCUI8xb5jNWrlNYsVGMRTAiVSEiVThFIolhxN2iJz0c3iKYESKYmSKUKx5GRSKW0RK0SIpwRKpCRKpgjFkrNJpbRFrDghnhIokZIoeRGrwmAFYHUIiRRbXTaVVo0QoZRFrPyC5VgBQqy5mCRKpthmUUwKpVLaIs1RPCVQLNlqtiVKpgilUCokOBsNMQmUSEmUTBFKoVSKjXOxTdFRPCVQIiUtMteGdWOujVnKInMlNBN7HGdinfe2qdojz7urPXI0SZRMsUdOJoVSKW0JtJ0G4imBEin8dZtliFAs2d1um4EHxvNlGkc7L76cIHqunLfTeLwMD8fr4bAZ/mwP1/lLH+ftceZlO+ldjRyPr0oNfNsfRrPb5t7a/dxUC46tfWl+DcjfE/zPCWIjMwdIDD+1/28PWmEPanI9CS0FJrQUuxJKWxNa6kjQ2pclQUvcdyU0zoSWe/ltQtdIlsCHKKGnBzVxKqv0jGL1/P2apGceQ4ucx9BKV0LNTIi+q55jrmuCdCasazLWnnHUc5IDqSel70qo66rMvitB/LqmdI/oSriva+lb11LvCbWrokTWkRQpfX24j0Pr2t+k+XtC+HUfekZSz1JuLbn+rn3XmgjJr+27+l/XrbHr+du6JFvuqeVWWIittm/tn/Rqu9tP394db5Y07bcvh3G5fLsed1/uXv6eeYfvnufptBtfr9NoSfcXUP14DLoUQ3JP9oahl1pOTexC/3l59FI2WhRPN+vKPw==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
