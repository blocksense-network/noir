---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VZP4vUQBRPNpv9m90N+jEE2ewm7l4nYmUnWNnl9u4aRRAsLFOJIFj4CSztbWwUBMFCbOwEBT+KO+c893e/vGQDlzm9gTDJvDfv3/zem5ld39s13/Zd7xxNhPyy/dD2HaAH2+em/Z6fryVD0tum/PU8TYeKfy3avxxamb4b+XOR7yj+876Vc7vYyUdfRO9g+4zhPfJ2+HDlv6yfS/+v1vg8tr6+I1+F7rVoxwR888AW1Nt1E4PMJ30e2IE00T8iW9uuCT7pE3s4PrIOErtQsTVWaIglpKGeUNFzGWVJbDCWfkUveniM9TAOUU/Qgp6h4k+bOR97ZfyG5EevBT9ikuUrPvbd+Pi3bg7ArpZkJyKb9+625Y/cxCaRNcb1lPU3a3UNxs0j+17o7fIQ5/aBjvyvQeZ1+96kzvfc+N24zov+i6rzPbJnX50fK7bGCo3r6VjRM1b0XEZZM0V2l2h1dQhltllrxUc5L3YVH9G2DvHju2khjd2yvalzH2BOFa5wjOPaUezRYhdQ7CLHsZsosYtqYjcBmrxj7GTsjtde7ALFHtd7KZ89UKbsHYb/LozjvKb1XPifgcx79n3mlf3n3HJUz+dcPxAfWpw6XjnvsM7w/nXf9ho+sD7X1Wwtt1ycGTUc8r5RhY8cxnFeU3wI/0OQeWTfZ8p8qcuO77YLn/R5Ff7wHhIotno0L1R4B0QT3ge2N/SP9t1gbKL4j+ewR6S3B/IDZS7bJvxPQOZj4se7vBYbwYmGoQ7IFQzV7Recr1V+VJ0nn9rexPETyYwUP7R6zXsK8keKbzOvXDNkrvRBsaOJTrkbdIHW5lnWxOAz2MExCIvm/mrxmSr8E+IxLSZ+jJVWkyKSoe2zaAvjTzujYK5MFJ2YU89Jv4ZFxqvQkf8lyHxB/Nre0DSnApAr+7aGwR7pjPb4wTkl/K9sr+WUhhntXN4UMwH5g1iQuVpOic5/kVNnzo9Fc3+1+MwU/inxmBYTP8ZKOwdyXmr3KcQC4w9pMhdzRcMf3634DoA0tI/PwlP6Rt5Bjc8cN/lG/KNNjH/hf2N7xP//hkGMEWOwDlOmMQZjhb8OZzHQmuAMYz4ifpnfq+DHWoz8b21vYvOT7MPfYqdE03BdZ3vTGo05Ir+VucTFav3nrnNqa7GLEe4zHukPif+9/cY1kb57DjtPVnlyssxP8iw/Oko3+RWSbxr+n9S2/ny1XG8W6WZ1mC3z5Y2L15/NF8v1Is0W6TJL8oOL1r/Jbhxu0iyfHyfmc7FPv+R6r9jRsc6Z1rffcp9mfrwfIv8X4d0+X+275HCo6DN8P2r4/Ir+VIYy1i3Ojg2LMn9QlPlF96go2yi0MdCwBpsW2W+MF8oSO0Li/26/ZU0GMEfmx4r+Aek/Y7cyhnsAywqUMbzXfRN5tkff2/4t/FQnyccxtk2w4yKvtim12uSrJDlIk+M0yfbl1W/fO68iiSIAAA==",
  "debug_symbols": "pZfdauMwEIXfxde+kEa/01cppaSpWwzGCW6ysIS8+85oNE67YFPsm3zHdnQYjY6U+Na8d2/Xz9d+/Dh9NU/Pt+Zt6oeh/3wdTsfDpT+NdPfWGP6wrnmCtrFeEARRkARZgAVgBFYAAnEBcQFxAXEBcrGELMACZwRWAAIn8IIgiAWennkCXQVCEmQBFgQjsAIQOIEXBIG4BHEJ4hLIJbZNNAIrAIETeEEQREESkAsSsCAZgRWAwAm8IAh4fjTBlCqzMHNrqH2Zu0Ezz6EyVqbKXIlCNJW2kntL9aGr9JU8PtGyGh6QWfAIZAEqnApeWMMiqIhVWM6DZcEZ4JyU9JQ7nB/HIqvAKkqKPAurAlSoT0lTEUFFVJFUZBVYBSdLhFXBowIL/k7ksEO9w6kCboL3KoIKHsVt4ayJyCrUhxMnwqoAFU6FVxFURBWpCs6c42Zy6kSACvJx3EzOngjycdxDzp+IpIIqdNxDTmERnEMRVgWocCq8CnbmtnAmRSQVWQVWkY0Kdob7vW30dHm9TF3Hh8u344YOofNh6sZL8zReh6Ft/hyGa/nS1/kwFl4OEz2lSXfjO5EMP/qhY3VvH6PN8lAqV0dTnXY2CD8d7LJD5AQWg0hTWhi/WgEmrSB7s+Tglh0SB6IYJEhbKkAPWgF6t8kh4eyAfoMDGKeTAJMW1yGt1AA5aA3OLq5EXnHwSWugjWs3OeR5LYNdTtNaK6OdW0nR2mbxWM+4vJ5rvXRh3hUuLxfhdjdz3eJ33Qz7uxl2d3M126jdBPo13Ovg0l6H5VNmvRFxXtEY0zaL/Ohljtss0M4WCBureIQC3bYt9rtemP29MPt7YXb3YmWXZq+bNMfFDQa4bIDzWYNhm0HSRmLGLTOwupbZL66Dg5XNNYcBktlk4HUdIbpNBnne3f8t4gtdHY799OM97s5OU394G7p6+XEdj9+eXv6e9Ym+B56n07F7v04dOz1eBunjmX7zWwDzwv/x+TL71mbkS1ueutZieLlzMf8A",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
