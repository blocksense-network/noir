---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 512
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _24",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]",
    "public parameters indices : []",
    "return value indices : [_22, _23, _24]",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ], EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ]], [EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ]]], outputs: [[_22, _23, _24]]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32863 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32858), source: Direct(32858), bit_size: Integer(U1) }, Cast { destination: Direct(32859), source: Direct(32859), bit_size: Integer(U1) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 10 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 70 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 10 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 10 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 70 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32858 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(5) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 70 }, Mov { destination: Relative(2), source: Relative(3) }, Call { location: 81 }, Call { location: 85 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32860 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 70 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32860 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 80 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 73 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 10 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Return, Call { location: 625 }, Const { destination: Relative(4), bit_size: Field, value: 0 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(4) }, Const { destination: Relative(7), bit_size: Field, value: 184467440737095516160 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(9), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(11), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(3), source: Relative(7) }, Jump { location: 133 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32835) }, JumpIf { condition: Relative(13), location: 407 }, Jump { location: 136 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Mov { destination: Relative(13), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 150 }, Store { destination_pointer: Relative(13), source: Relative(4) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Jump { location: 144 }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 20 }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 158 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(8), location: 386 }, Jump { location: 161 }, Load { destination: Relative(3), source_pointer: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(3) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 168 }, Call { location: 631 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(4) }, Const { destination: Relative(13), bit_size: Field, value: 368934881474191032320 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(14) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(7) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 209 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(8), location: 286 }, Jump { location: 212 }, Load { destination: Relative(2), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(3), location: 217 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 219 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 257 }, Jump { location: 222 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(2), source_pointer: Relative(5) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 231 }, Call { location: 631 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(9), size: Relative(15) }, output: HeapArray { pointer: Relative(16), size: 4 }, len: Relative(12) }), Store { destination_pointer: Relative(4), source: Relative(1) }, Store { destination_pointer: Relative(5), source: Relative(7) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Store { destination_pointer: Relative(14), source: Relative(11) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(10) }, Load { destination: Relative(1), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(13) }, Load { destination: Relative(8), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 264 }, Jump { location: 283 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryFieldOp { destination: Relative(16), op: Add, lhs: Relative(9), rhs: Relative(15) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 634 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, Store { destination_pointer: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Store { destination_pointer: Relative(13), source: Relative(7) }, Store { destination_pointer: Relative(14), source: Relative(8) }, Jump { location: 283 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 219 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(5) }, Load { destination: Relative(17), source_pointer: Relative(13) }, Load { destination: Relative(18), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U1, lhs: Relative(18), rhs: Relative(9) }, JumpIf { condition: Relative(19), location: 297 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, JumpIf { condition: Relative(18), location: 319 }, Jump { location: 300 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, JumpIf { condition: Relative(18), location: 303 }, Call { location: 656 }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(10) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(8) }, JumpIf { condition: Relative(15), location: 314 }, Call { location: 659 }, Store { destination_pointer: Relative(4), source: Relative(18) }, Store { destination_pointer: Relative(5), source: Relative(16) }, Store { destination_pointer: Relative(13), source: Relative(8) }, Store { destination_pointer: Relative(14), source: Relative(9) }, Jump { location: 354 }, Mov { destination: Relative(15), source: Relative(7) }, Jump { location: 321 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, JumpIf { condition: Relative(16), location: 357 }, Jump { location: 324 }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(5) }, Load { destination: Relative(17), source_pointer: Relative(14) }, Load { destination: Relative(18), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 333 }, Call { location: 631 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(18) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(20), size: Relative(21) }, output: HeapArray { pointer: Relative(22), size: 4 }, len: Relative(12) }), Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(10) }, Store { destination_pointer: Relative(20), source: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Store { destination_pointer: Relative(5), source: Relative(18) }, Store { destination_pointer: Relative(13), source: Relative(10) }, Store { destination_pointer: Relative(14), source: Relative(17) }, Jump { location: 354 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 209 }, Load { destination: Relative(16), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(5) }, Load { destination: Relative(18), source_pointer: Relative(13) }, Load { destination: Relative(19), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 364 }, Jump { location: 383 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(15) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(20), rhs: Relative(21) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 634 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Store { destination_pointer: Relative(5), source: Relative(20) }, Store { destination_pointer: Relative(13), source: Relative(18) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Jump { location: 383 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(10) }, Mov { destination: Relative(15), source: Relative(16) }, Jump { location: 321 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, JumpIf { condition: Relative(13), location: 392 }, Call { location: 656 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(8) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(8), source_pointer: Relative(5) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 634 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Store { destination_pointer: Relative(5), source: Relative(14) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 158 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Load { destination: Relative(13), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Load { destination: Relative(14), source_pointer: Relative(16) }, JumpIf { condition: Relative(13), location: 415 }, Jump { location: 493 }, Load { destination: Relative(15), source_pointer: Relative(5) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 421 }, Call { location: 631 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(8) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 429 }, Call { location: 631 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(15) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(5) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(7) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(9) }, Mov { destination: Relative(13), source: Relative(7) }, Jump { location: 445 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, JumpIf { condition: Relative(16), location: 525 }, Jump { location: 448 }, Load { destination: Relative(14), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U1, lhs: Relative(14), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 453 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Mov { destination: Relative(13), source: Relative(7) }, Jump { location: 455 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Direct(32837) }, JumpIf { condition: Relative(14), location: 496 }, Jump { location: 458 }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(19) }, Load { destination: Relative(17), source_pointer: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 467 }, Call { location: 631 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(22), size: Relative(23) }, output: HeapArray { pointer: Relative(24), size: 4 }, len: Relative(12) }), Store { destination_pointer: Relative(15), source: Relative(13) }, Store { destination_pointer: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(20), source: Relative(11) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(10) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Store { destination_pointer: Relative(6), source: Relative(15) }, Jump { location: 493 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(10) }, Mov { destination: Relative(3), source: Relative(13) }, Jump { location: 133 }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Load { destination: Relative(21), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(17) }, JumpIf { condition: Relative(22), location: 503 }, Jump { location: 522 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(13) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(13) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryFieldOp { destination: Relative(24), op: Add, lhs: Relative(22), rhs: Relative(23) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 634 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(13) }, Store { destination_pointer: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(18), source: Relative(22) }, Store { destination_pointer: Relative(19), source: Relative(17) }, Store { destination_pointer: Relative(20), source: Relative(21) }, Jump { location: 522 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Mov { destination: Relative(13), source: Relative(14) }, Jump { location: 455 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Load { destination: Relative(21), source_pointer: Relative(18) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Load { destination: Relative(23), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U1, lhs: Relative(23), rhs: Relative(9) }, JumpIf { condition: Relative(24), location: 536 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(25) } }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, JumpIf { condition: Relative(23), location: 558 }, Jump { location: 539 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, JumpIf { condition: Relative(23), location: 542 }, Call { location: 656 }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Store { destination_pointer: Relative(25), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(10) }, BinaryIntOp { destination: Relative(17), op: LessThanEquals, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, JumpIf { condition: Relative(17), location: 553 }, Call { location: 659 }, Store { destination_pointer: Relative(15), source: Relative(23) }, Store { destination_pointer: Relative(18), source: Relative(21) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(20), source: Relative(9) }, Jump { location: 593 }, Mov { destination: Relative(17), source: Relative(7) }, Jump { location: 560 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, JumpIf { condition: Relative(21), location: 596 }, Jump { location: 563 }, Load { destination: Relative(17), source_pointer: Relative(15) }, Load { destination: Relative(21), source_pointer: Relative(18) }, Load { destination: Relative(22), source_pointer: Relative(20) }, Load { destination: Relative(23), source_pointer: Relative(21) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 572 }, Call { location: 631 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(25), size: Relative(26) }, output: HeapArray { pointer: Relative(27), size: 4 }, len: Relative(12) }), Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 634 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(10) }, Store { destination_pointer: Relative(25), source: Relative(16) }, Store { destination_pointer: Relative(15), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(23) }, Store { destination_pointer: Relative(19), source: Relative(10) }, Store { destination_pointer: Relative(20), source: Relative(22) }, Jump { location: 593 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Mov { destination: Relative(13), source: Relative(16) }, Jump { location: 445 }, Load { destination: Relative(21), source_pointer: Relative(15) }, Load { destination: Relative(22), source_pointer: Relative(18) }, Load { destination: Relative(23), source_pointer: Relative(19) }, Load { destination: Relative(24), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(23) }, JumpIf { condition: Relative(25), location: 603 }, Jump { location: 622 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(17) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(17) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Add, lhs: Relative(25), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 634 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(17) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(15), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(25) }, Store { destination_pointer: Relative(19), source: Relative(23) }, Store { destination_pointer: Relative(20), source: Relative(24) }, Jump { location: 622 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(10) }, Mov { destination: Relative(17), source: Relative(21) }, Jump { location: 560 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 630 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 638 }, Jump { location: 640 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 655 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 652 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 645 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 655 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "use poseidon::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
