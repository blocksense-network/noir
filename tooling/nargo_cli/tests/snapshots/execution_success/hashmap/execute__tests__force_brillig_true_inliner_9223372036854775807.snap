---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
