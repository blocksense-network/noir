---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12442740014039576758": {
        "error_kind": "string",
        "string": "New HashMap should be empty."
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13848700712118281102": {
        "error_kind": "string",
        "string": "New hashmap should be empty."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15535192719431679058": {
        "error_kind": "string",
        "string": "HashMap after clear() should be empty."
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
