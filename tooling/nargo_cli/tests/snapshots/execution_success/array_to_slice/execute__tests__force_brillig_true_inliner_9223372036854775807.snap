---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
