---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1dvW8kSRWvnukee2Z21rN3l0FEQkJge+z16iJLd/vB7h0HASckVjp5vWtIjgQkEFEjSBABBCcQAl2CECEiOSGBkJAIECAQkPEHEJIgkZDcld1v5je/+XW5e1w1/nyS1T1d1e+rqt6revWqnbkTyKo/D3l17bhFsDr71XXzbLAVEddmSj6zRHxOGcX7zNUr/h/dk2vfzTeSL+9GFLgveIqF/97m7nZfyBeR/0kfcCbAv2348zT4N9cqPJ8t5/E7ojty84MX37EyHMifq8rWq3K7/1h13yd8KdodeYqtt5cF/x2QzcNrZRrahv91wO9c/DF5Pw3/U/wPKvwpeH+YhvepPXkUn/cp7k+n4X1i+B/H532K+0ka3ncM/xtp8O8a/jfj62aK+zPxcd813G+l0cve0J3Y7bcrIzNy8z7CaKqrc/O+xMDs5MAl9Z1bZp9z4of5N35Gor7xbf6kSMPrdhPdIf2BSzovmOqucIu6ywO66wlex1TmwWz/SNBhnffSyDhpqnOjP3BJ+8BU5z3ih/XDOl8TvI6pzIPpPBNlXfGsE8Bl/o/b3fB76Av+YvqEpu1n9AcuaX/aCum1J/RqulsXvI6pzAO337qgsy7orAoXt7eH/eq6eUYYCbrcz3AtGXNu0LSfGf2BW2zXFP2sT/zUtZnpbiB4HVOZB5sfZqKsK551ArgeRcT1IBIu7KMbbrHvmA774r2Y6ziTY1jhy4UcyFuH6uO9h4KevVVdvTxPs9k7dX2nH9DduuCH3zPcqCuWsaihZ+sGluHzIMM7FfK+W5R9v7pungUmL+5ZrKJbzuTA/uAhL+dljEL7Izvj6TyrZLQxewtkLIBu5mZxFedmOsX6GPvwf7dF/RHUYZtwG8pQ11i3cIvtjnEQpuFc/PFjfOaCP6RfUP1D4nMD3ok5zl8i+ZGW0lHsWFFC2SZN+5bRH7nFsZ/VXA0XlxmtgUvq97dCsoVsJY4b1EEdrtstcfVFWYo2HQXkRvpp+9jWdO43dotgZXeItt0zdOk38u3t7zfA/nI9polte4fKsG1s/F8kPXmw+PSI+MR2trKXoWxEZa9AGcrNcJruv99C99jGJlNBZd+pronXB9K+91dDe+ui2YKzxgeR1qrig0o2FR8cu/o5UwjXqCWuxHOCaZv2A3KrcR6aK6KMHA9I1DePjK8NtwhsC/09zg8ZlG0yvr1t+mUL24R9YkxlymdcJD15uF/OlynfuqzPWEb3bfwCtrHJVFDZL6pr4r176Re6RDtR/H77PG0IysQ25Cx+geNrqf1CyD56YFuO4x51UIer3xJX4rnEtE1D+2VqnCteWQ4PHL9bViceLK6YuJ+/4Pk8AttVf497QwzKzmFuzD+XtHN1a2u0gRdJTx4sP0P5afYx6H84H0n5n2V038bHYBubTAWV/aW6XmEfM1mVPQrtQSt7dBYfw/vrqX2Mki3kY7DvsY9RuIqWuBLnOTT2MUZ/FOCV5fDAPmZZnaTClXjMPOd1BoKKTeFeOIOymca3t5n/X9JfcaxA2dOLpCcPlpOnfD77K7XmVL6s7VwBdd/GX2Ebm0wFlf23ul5hf7WzinyiJv6qR+1z46+ur7/iXIuz+JhHEXHF8n3+3nItEo+/1r4PcxoYlP01vv17n+zM8HI9prms70uUP9Ta91luxnn6PtNFCt/38erFi+D7EtmxnYzodV14HCfug1O7Gsp1Rfo8lqxcXQ0Xl3Eeb+rcaSWbyp3m/GjWQR2uXktc59mmqOt1kk3lnqo8plBulpXlUNajsqJc1Il//7Azz89p7WZrgQ232FacB22/C1F3SGVWd4fsUaL2kvaI2+Y0XTyJoAsPNndhXbx6iXTxRiRdPKjRxf4F0EViP3U3ZBPQhhj9Dbdo7zhHPHdanzg35T3Ch9lK5JW6ZnudyE89M5+KuZ0GnH+aAY9qL7tDciCo+ZzJ5NvqKw3m0tdFF39uoIuhS5uLvHfvJLf2mN8Kv+VtM+RQjvW/WCHAPHaUd39JPo/2DraOJgdHB7sHz5/vHB7w+PHQAT3Fpn+wN7l3uL1zuPdsd3Iwubty+oe7d58d7uwebL7Y8j+3T6Nva7VeOSvH+ZOHteq3nT/g+oavoPpHFQJvT79c3fNcC+n5el8P1Mtqrsc4xLO8nH/WLxfrd8vF+tP8snKRRysbQhnOGz3cqn6jvhCX8VFQ/a9VCKY5j/COvT8W9NeJ/hzf4hnbn6GoPxT1ffu8S+MWZY+9RjqmSfjxGfNmfYfPJKdet1/UGGMH6rcZO0hr4BZ9Voq1sJIN+ef1K/t5u6/DlbfElXpvPCN6Sm6kv1Ej6wp4nZ6jsf6VOz3n7oJ+eTzg+oXXNN+rBFHn0JR+QvsJmeBnRGUeLLedbYXV6wlZQ7jxTGubsaZkUOe1OR6MMvg6P6zhH8/TcczIyrH+T8Bn/xj8EctvPA6hXJ1TZvzvQ1vzeb1E5yiDuYg41gakH3V+FPebQ2tMxoXn4VR7dElfVv/nAX0NE+tLyY/jfUgyDkX9QUBffYGL9afW5JxTb2XYlusCV2h8MS6UAcfc/fLkqvZn7F0cj2hbTO4O0XQu/RyFfSPaNaRpvHXcYnujD+V4yAcBG45+vIlvzwQ/meCB7bIHax+la94TThXfv6h5BKinrOZquLiM8wiyRLoLyRbymVc5j0C1Q5s8AhwHTWzQec8j2QY1nUf+NbEN4nUV1lNjzGwRzzGvsh/41yXyA01tzUPCpfYZUn//K/G3khrvtxv9GD6F99tT+xQlW8inrGq//TzmCaodRgFelRydiDrhOMdV9E//u2D+yezadfJPnerF6+afmtrAJrkrqe3WqvKQQt/hQ/oxfB1/YzC1r1OyhXxdKCay7HcgVZ85j/mLaodRgFclRyeiTvKIuDimdhX95icS2+y2ftNsZN0+Yyo935xPWRpuzqcE5Eb6Z82jVnIjLv6mVBGRjtpPabJvmmg8bbJ9R7vYE7x23KJ9Rz9Q0LP9gF2MuW+K9hT3HF/vaJq4x4Xv8jc8rf7jzgznw+pe7TmG1ojW9kN4r+l6n9sJ66v1rupT/L3Y0NpW+W/jYT3AA/Ksct3xHJWHHMpi2lLP45PujI/Mze+tFuV8Ge4jWu6O+uZuaMzyt68u65h9GnHM8tlnLFPnKZSd5L1UxQOO4fvlyVXNmexdtg0e1sp5vMdXeIZ9xgPmvnHuHebx5eU8Hctzw9w7xGV8FFT/XbA7xzLAO/b+WNDvEf05vsUz1Bfj6opnVt/r9Kj6seJ558256OXhZt4ZkBvpt93PzCLpxMODMh6umGes7ey3iutNbYVL2o6bPJfKhRzIW8ct2gqcv3A+z3cD/rBtHmdX8HNdY5VnOQfLscrU52CVbKF2vsqxStT1eccqPbxZxsNl/98stEZKrPupPbPxkgs5kLeOWxzfuEYr6NnPAvas7f6omvsk/u7RgVqzGagzcPzth1vEF5bhmTX+XhJ+dwPlZujSb9SF1/m3YV3K9VgO7H9DKsP2NpnUupTPvaaOsU/X9k7bDF6X9oWePHCe8QcR16XsCxWuAu7x/6DyuWer8xvg7x3iT+V14xjlPU0VV+DfRQ3/WGZ1f1/xljiPXZ4F5jxz5NF4x/+5yfq1+n8I6Fe1P+rX/rekitnxGq1bQx/9Fuv+T6TfVLEfpV+jdbPm1u2prs7drLlv1tw3a+5lweRIteb+94rW3PjefhzdHCj5uG/mxP9aTb2uq/eb+J4H3ruy+v8RflPtzUxjwR/9/Zr2TjKgk1fvrOrbyWq/CXXE+wOhuRbqTO1RXPf8sbP4To7JpPadSraQ77zKMRm1z3sdYjLs7y5rTGZUCRIjJtMV/NT9xn1TazNlM3kPlW1t4cLrWl6PvgLyLuuT0M7n1Tvnee5YnRXO6DfWx3Ux73/j+2xfEvmMqHG1jN5rGldDHTKouBp+U7VNXA3HCMfV0L5wXA393YraJRhX4+/7eWgbV/tUwPag7rriGdse9qsKV11crS7usiVsBesE+UMbx3E15Om0uBrW5e/vWd29irfLEFer0++rAf2qtRbqNxRX4/29vIY++hc+C7NP+k201gj+/8uQfu17mSH9vib02xc6iCjPvYx4ck7P/42+ylfktUBG8uHcweZoLPtjar9Ea4Lgd6nxG3Jr5Yxn/oac+sYY5n9hbqUHzJkaNsA1DODqB3ANGuIK0UZec8Jv33br1eDvU/1R9Rvz19YEPwXhf7s7o/Ol7nwdw/kFqPOU/HlRzmhw293GMlEf/RTXN1mP89egv3rYADqx55F1fGNfMPoxvjVotFb1XbwYbRLCdbshLtMntq+//+pq2nqbZeg4Pc6MvvEzTsPPtO9tAG2lU6Mfo+8ZrVX1PSVbqO9hfe57CtdGQ1ymT9XfRml0MGG77mp0gPTxN9p1lf/MNvtb3Xk8Sl/ow8wXWb8aQ9mAyu5A2S3i96VykV/EtUH8vkT8mu9VfX4s6N8m+khL0We/fEfUvyPq+77yTdJpT7yL7Ws65T1gXtMizqZjt8ka76znjxUdtT5o8s2s844BdkAerI/3HjgG+IPAOrxDuuNnobwsPI+Tufm9RDwr9V5X08TYHu8nohxW/6fgY38EY43bzfpR6Pwb9yslj1qzDAVf7wfWYeexD6POv3Afw/pNz1SvU5mKT2/U0MX7foAH58LnvDDnzEMOZTH9vTrnhfFL81kqfmk2VcVcQ/ZmALJdZnvzq4j2ZiD4Uf6iT2XY5ziepXhA23W/PLmqHBH0pe+Rv7c+cYy3nL1zXL/6jXMKNW8sqP5vweb9DvrjMS5Bz9f7O80H8RvpKdYfc7EP4gfpq1iJ3SfmdRLidU3wqnSc1VwRFz5bK+efnfYN/jWi3fQb/DnRWfYb/H+j/nwRv8H/x6qCjekcaMe0/ziOvP3+EAQC1J+lpQAA",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
