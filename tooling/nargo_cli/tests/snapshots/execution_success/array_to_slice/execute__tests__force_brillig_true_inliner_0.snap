---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
