---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 512
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27]",
    "public parameters indices : [_28]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ], EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ], EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ], EXPR [ (1, _22) 0 ], EXPR [ (1, _23) 0 ], EXPR [ (1, _24) 0 ], EXPR [ (1, _25) 0 ], EXPR [ (1, _26) 0 ], EXPR [ (1, _27) 0 ]], EXPR [ (1, _28) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32865 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32864), source: Direct(32864), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 21 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 25 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(32864) }, Call { location: 176 }, Call { location: 177 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32865 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 175 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 168 }, Return, Return, Call { location: 2150 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 186 }, Call { location: 2156 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 191 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(8), source_pointer: Relative(17) }, Load { destination: Relative(1), source_pointer: Relative(13) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 211 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(8) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(1) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 219 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(1) }, Const { destination: Relative(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(18), op: Equals, lhs: Relative(10), rhs: Relative(1) }, JumpIf { condition: Relative(18), location: 226 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Load { destination: Relative(10), source_pointer: Relative(13) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(10) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 232 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(10) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 240 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, Const { destination: Relative(8), bit_size: Field, value: 2 }, Const { destination: Relative(10), bit_size: Field, value: 3 }, Const { destination: Relative(20), bit_size: Field, value: 20 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 262 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(16), location: 2137 }, Jump { location: 265 }, Load { destination: Relative(13), source_pointer: Relative(22) }, JumpIf { condition: Relative(13), location: 269 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryIntOp { destination: Relative(13), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, JumpIf { condition: Relative(16), location: 273 }, Call { location: 2156 }, Load { destination: Relative(16), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(7) }, JumpIf { condition: Relative(17), location: 277 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(5) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Load { destination: Relative(22), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(14) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Load { destination: Relative(17), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(16) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 295 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(17) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(16) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 303 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(16) }, Const { destination: Relative(16), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(18), rhs: Relative(16) }, JumpIf { condition: Relative(27), location: 310 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(18), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(18) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 316 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(17) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(18) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 324 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(18) }, Const { destination: Relative(17), bit_size: Field, value: 5 }, Const { destination: Relative(18), bit_size: Field, value: 6 }, Const { destination: Relative(29), bit_size: Field, value: 21 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(9) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 345 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(25), location: 2124 }, Jump { location: 348 }, Load { destination: Relative(22), source_pointer: Relative(18) }, JumpIf { condition: Relative(22), location: 352 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, BinaryIntOp { destination: Relative(18), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 356 }, Call { location: 2156 }, Load { destination: Relative(22), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(7) }, JumpIf { condition: Relative(25), location: 360 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(25) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(25), source_pointer: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(28) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 378 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(25) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(22) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 386 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(22) }, Const { destination: Relative(22), bit_size: Field, value: 7 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(26), rhs: Relative(22) }, JumpIf { condition: Relative(33), location: 393 }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(34) } }, Load { destination: Relative(22), source_pointer: Relative(28) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 399 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(25) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(22) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 407 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(22) }, Const { destination: Relative(22), bit_size: Field, value: 8 }, Const { destination: Relative(25), bit_size: Field, value: 9 }, Const { destination: Relative(34), bit_size: Field, value: 22 }, Mov { destination: Relative(35), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(35), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(36) }, Store { destination_pointer: Relative(37), source: Relative(22) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(25) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(9) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 428 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(26), location: 2111 }, Jump { location: 431 }, Load { destination: Relative(26), source_pointer: Relative(34) }, JumpIf { condition: Relative(26), location: 435 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(26), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(28), location: 439 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(28) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(11) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(37) }, Load { destination: Relative(26), source_pointer: Relative(33) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(26) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 457 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(26) }, Load { destination: Relative(26), source_pointer: Relative(35) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 465 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(26) }, Const { destination: Relative(26), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(31), rhs: Relative(26) }, JumpIf { condition: Relative(38), location: 472 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(39) } }, Load { destination: Relative(31), source_pointer: Relative(33) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 478 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(35) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 486 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(31) }, Const { destination: Relative(31), bit_size: Field, value: 11 }, Const { destination: Relative(35), bit_size: Field, value: 12 }, Const { destination: Relative(40), bit_size: Field, value: 23 }, Mov { destination: Relative(41), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(31) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(35) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(9) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 507 }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(35), location: 2098 }, Jump { location: 510 }, Load { destination: Relative(33), source_pointer: Relative(31) }, JumpIf { condition: Relative(33), location: 514 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(31) } }, Load { destination: Relative(31), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(37) }, Load { destination: Relative(31), source_pointer: Relative(33) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 527 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(35) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 535 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(31) }, Const { destination: Relative(31), bit_size: Field, value: 109 }, Const { destination: Relative(37), bit_size: Field, value: 110 }, Const { destination: Relative(38), bit_size: Field, value: 111 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(40) }, Store { destination_pointer: Relative(42), source: Relative(31) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(37) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(9) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 556 }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(33), location: 2085 }, Jump { location: 559 }, Load { destination: Relative(3), source_pointer: Relative(31) }, JumpIf { condition: Relative(3), location: 563 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(31) } }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(11) }, Const { destination: Relative(33), bit_size: Field, value: 100 }, Const { destination: Relative(35), bit_size: Field, value: 50 }, JumpIf { condition: Relative(3), location: 599 }, Jump { location: 569 }, Load { destination: Relative(36), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(32) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(34) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(28) }, Store { destination_pointer: Relative(43), source: Relative(35) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(32) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Store { destination_pointer: Relative(4), source: Relative(37) }, Jump { location: 629 }, Load { destination: Relative(36), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(32) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(34) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(28) }, Store { destination_pointer: Relative(43), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(32) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Store { destination_pointer: Relative(4), source: Relative(37) }, Jump { location: 629 }, Load { destination: Relative(31), source_pointer: Relative(4) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(38) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, Load { destination: Relative(38), source_pointer: Relative(40) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, Load { destination: Relative(40), source_pointer: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(38) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 645 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(40) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(36) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 653 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(36) }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(37), rhs: Relative(35) }, JumpIf { condition: Relative(36), location: 659 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(40) } }, Const { destination: Relative(36), bit_size: Field, value: 101 }, Const { destination: Relative(37), bit_size: Field, value: 102 }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(33) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(40) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 678 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, JumpIf { condition: Relative(3), location: 710 }, Jump { location: 683 }, Load { destination: Relative(36), source_pointer: Relative(40) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 689 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(36) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(29) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(27) }, Store { destination_pointer: Relative(43), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(33) }, Store { destination_pointer: Relative(43), source: Relative(36) }, Store { destination_pointer: Relative(4), source: Relative(31) }, Jump { location: 743 }, Const { destination: Relative(33), bit_size: Field, value: 51 }, Const { destination: Relative(36), bit_size: Field, value: 52 }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(38) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(38) }, Store { destination_pointer: Relative(42), source: Relative(35) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(29) }, Load { destination: Relative(33), source_pointer: Relative(38) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(27) }, Store { destination_pointer: Relative(42), source: Relative(37) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(33) }, Store { destination_pointer: Relative(4), source: Relative(37) }, Jump { location: 743 }, Load { destination: Relative(33), source_pointer: Relative(4) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(38) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(36) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 756 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(38) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(33) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 764 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 771 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(36), location: 2072 }, Jump { location: 774 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 778 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(12) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(15) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 791 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 799 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 806 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(36), location: 2059 }, Jump { location: 809 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 813 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(19) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(24) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 826 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 834 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Const { destination: Relative(33), bit_size: Field, value: 103 }, Const { destination: Relative(42), bit_size: Field, value: 104 }, Const { destination: Relative(43), bit_size: Field, value: 105 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(33) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(42) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(43) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 855 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(36), location: 2046 }, Jump { location: 858 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 862 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(27) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(29) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 875 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 883 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Const { destination: Relative(33), bit_size: Field, value: 106 }, Const { destination: Relative(42), bit_size: Field, value: 107 }, Const { destination: Relative(43), bit_size: Field, value: 108 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(33) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(42) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(43) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 904 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(36), location: 2033 }, Jump { location: 907 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 911 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(32) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(34) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 924 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 932 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(39) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(33) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 940 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 947 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(36), location: 2020 }, Jump { location: 950 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 954 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Const { destination: Relative(33), bit_size: Field, value: 0 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(37) }, Store { destination_pointer: Relative(38), source: Relative(33) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(1) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(8) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 973 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(33) }, Store { destination_pointer: Relative(37), source: Relative(10) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(16) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(17) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(4) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(14) }, JumpIf { condition: Relative(4), location: 1005 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Load { destination: Relative(6), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(11) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(10), source_pointer: Relative(6) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(10) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1019 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(10) }, Load { destination: Relative(6), source_pointer: Relative(17) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1027 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(12) }, Load { destination: Relative(6), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(15) }, Load { destination: Relative(36), source_pointer: Relative(38) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(17) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1041 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 1049 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(21) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 1057 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(23) }, Jump { location: 1064 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 2007 }, Jump { location: 1067 }, Load { destination: Relative(8), source_pointer: Relative(17) }, JumpIf { condition: Relative(8), location: 1071 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(8), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(31) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(8) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1084 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(17) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1092 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(19) }, Load { destination: Relative(8), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(24) }, Load { destination: Relative(31), source_pointer: Relative(36) }, Load { destination: Relative(17), source_pointer: Relative(8) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1106 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(31) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1114 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(30) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1122 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(9) }, Mov { destination: Relative(6), source: Relative(23) }, Jump { location: 1129 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 1994 }, Jump { location: 1132 }, Load { destination: Relative(8), source_pointer: Relative(17) }, JumpIf { condition: Relative(8), location: 1136 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(8), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(31) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(8) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1149 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(17) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1157 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, Load { destination: Relative(8), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(27), source_pointer: Relative(33) }, Load { destination: Relative(17), source_pointer: Relative(8) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(17) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1171 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(27) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1179 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(9) }, Mov { destination: Relative(6), source: Relative(23) }, Jump { location: 1186 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 1981 }, Jump { location: 1189 }, Load { destination: Relative(8), source_pointer: Relative(17) }, JumpIf { condition: Relative(8), location: 1193 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(8), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(27) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(8) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1206 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(17) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1214 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, Load { destination: Relative(8), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Load { destination: Relative(27), source_pointer: Relative(31) }, Load { destination: Relative(17), source_pointer: Relative(8) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(17) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1228 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(27) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1236 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(41) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(17) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1244 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(9) }, Mov { destination: Relative(6), source: Relative(23) }, Jump { location: 1251 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 1968 }, Jump { location: 1254 }, Load { destination: Relative(8), source_pointer: Relative(17) }, JumpIf { condition: Relative(8), location: 1258 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(8), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Load { destination: Relative(4), source_pointer: Relative(21) }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1271 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(10) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1279 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(28) }, Load { destination: Relative(10), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, Load { destination: Relative(21), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(34) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Load { destination: Relative(4), source_pointer: Relative(21) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(4) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 1296 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(27) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 1304 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(10), rhs: Relative(35) }, JumpIf { condition: Relative(4), location: 1310 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(27) } }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Load { destination: Relative(4), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Load { destination: Relative(10), source_pointer: Relative(27) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(8) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 1320 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Load { destination: Relative(4), source_pointer: Relative(10) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 1328 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Load { destination: Relative(29), source_pointer: Relative(31) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(33) }, Load { destination: Relative(10), source_pointer: Relative(29) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(10) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 1342 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(32) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(10) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 1350 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(30) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(10) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 1358 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Mov { destination: Relative(6), source: Relative(23) }, Jump { location: 1365 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 1955 }, Jump { location: 1368 }, Load { destination: Relative(6), source_pointer: Relative(10) }, JumpIf { condition: Relative(6), location: 1372 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(6), bit_size: Field, value: 19 }, Const { destination: Relative(8), bit_size: Field, value: 18 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(20) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(6) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, JumpIf { condition: Relative(3), location: 1449 }, Jump { location: 1400 }, Load { destination: Relative(3), source_pointer: Relative(10) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(3) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1406 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(1) }, JumpIf { condition: Relative(16), location: 1411 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(25) }, Load { destination: Relative(22), source_pointer: Relative(17) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1421 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(22) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(38) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(19) }, Store { destination_pointer: Relative(39), source: Relative(10) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(21) }, Store { destination_pointer: Relative(39), source: Relative(22) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2165 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Store { destination_pointer: Relative(26), source: Relative(17) }, Store { destination_pointer: Relative(1), source: Relative(21) }, Jump { location: 1504 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(26) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(25) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Load { destination: Relative(16), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 1464 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(13) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(17) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1475 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Load { destination: Relative(21), source_pointer: Relative(26) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, Store { destination_pointer: Relative(38), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(3) }, Store { destination_pointer: Relative(38), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2165 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(13) }, Store { destination_pointer: Relative(25), source: Relative(17) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Jump { location: 1504 }, Load { destination: Relative(13), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(5) }, Load { destination: Relative(16), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(7) }, Load { destination: Relative(17), source_pointer: Relative(21) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(13) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1515 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(17) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(13) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1523 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(13), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(31) }, Load { destination: Relative(22), source_pointer: Relative(25) }, Load { destination: Relative(17), source_pointer: Relative(13) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(17) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1535 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(17) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1543 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(9) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 1550 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(16), location: 1942 }, Jump { location: 1553 }, Load { destination: Relative(3), source_pointer: Relative(17) }, JumpIf { condition: Relative(3), location: 1557 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(3), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1568 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, Load { destination: Relative(10), source_pointer: Relative(13) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(10) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1576 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(31) }, Load { destination: Relative(21), source_pointer: Relative(22) }, Load { destination: Relative(13), source_pointer: Relative(10) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(13) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1588 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(21) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(13) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1596 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Load { destination: Relative(13), source_pointer: Relative(21) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 1604 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, Const { destination: Relative(10), bit_size: Field, value: 5000 }, JumpIf { condition: Relative(8), location: 1670 }, Jump { location: 1609 }, JumpIf { condition: Relative(30), location: 1611 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(11) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, Load { destination: Relative(13), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1621 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, Load { destination: Relative(21), source_pointer: Relative(25) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1635 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, JumpIf { condition: Relative(2), location: 1639 }, Call { location: 2159 }, Const { destination: Relative(2), bit_size: Field, value: 1000 }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2165 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(18) }, Store { destination_pointer: Relative(27), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Relative(22) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(33) }, Store { destination_pointer: Relative(18), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2165 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, Store { destination_pointer: Relative(18), source: Relative(13) }, Store { destination_pointer: Relative(1), source: Relative(2) }, Jump { location: 1731 }, JumpIf { condition: Relative(27), location: 1672 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(11) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(16) }, Load { destination: Relative(13), source_pointer: Relative(8) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(13) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 1682 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(13) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(19) }, Load { destination: Relative(13), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1696 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, JumpIf { condition: Relative(21), location: 1701 }, Call { location: 2159 }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2165 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(18) }, Store { destination_pointer: Relative(26), source: Relative(10) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(25), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(8), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(29) }, Store { destination_pointer: Relative(21), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2165 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, Store { destination_pointer: Relative(1), source: Relative(13) }, Jump { location: 1731 }, Load { destination: Relative(3), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, Load { destination: Relative(8), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(8) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1742 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(16) }, Load { destination: Relative(8), source_pointer: Relative(13) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1750 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(31) }, Load { destination: Relative(4), source_pointer: Relative(18) }, Load { destination: Relative(13), source_pointer: Relative(8) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(13) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1762 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(13) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1770 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Load { destination: Relative(4), source_pointer: Relative(13) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(4), rhs: Relative(10) }, JumpIf { condition: Relative(8), location: 1778 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, JumpIf { condition: Relative(34), location: 1780 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(35) }, Load { destination: Relative(4), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(8) }, Load { destination: Relative(13), source_pointer: Relative(25) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(8) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1793 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Load { destination: Relative(4), source_pointer: Relative(13) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1801 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(19) }, Load { destination: Relative(4), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Load { destination: Relative(19), source_pointer: Relative(26) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(13) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1815 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(19) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(13) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1823 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(13) }, JumpIf { condition: Relative(36), location: 1827 }, Call { location: 2159 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(11) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(13) }, Load { destination: Relative(19), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 1837 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(26) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(15) }, Load { destination: Relative(26), source_pointer: Relative(29) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Store { destination_pointer: Relative(29), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2165 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2165 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Store { destination_pointer: Relative(19), source: Relative(12) }, Store { destination_pointer: Relative(1), source: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(12) }, Load { destination: Relative(4), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 1875 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 1883 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(14) }, Load { destination: Relative(1), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(3) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1895 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1903 }, Call { location: 2162 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(12) }, Store { destination_pointer: Relative(15), source: Relative(20) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(10) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 1921 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 1929 }, Jump { location: 1924 }, Load { destination: Relative(1), source_pointer: Relative(6) }, JumpIf { condition: Relative(1), location: 1928 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Load { destination: Relative(4), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(12) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(10) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 1921 }, Load { destination: Relative(16), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Load { destination: Relative(21), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(3) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(21), rhs: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(25) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(16) }, Jump { location: 1550 }, Load { destination: Relative(8), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(6) }, Load { destination: Relative(17), source_pointer: Relative(27) }, BinaryFieldOp { destination: Relative(21), op: Equals, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(21) }, Store { destination_pointer: Relative(10), source: Relative(16) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, Mov { destination: Relative(6), source: Relative(8) }, Jump { location: 1365 }, Load { destination: Relative(10), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(6) }, Load { destination: Relative(21), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(6) }, Load { destination: Relative(27), source_pointer: Relative(31) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(21), rhs: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(29) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, Mov { destination: Relative(6), source: Relative(10) }, Jump { location: 1251 }, Load { destination: Relative(10), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(6) }, Load { destination: Relative(21), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(6) }, Load { destination: Relative(27), source_pointer: Relative(31) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(21), rhs: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(29) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, Mov { destination: Relative(6), source: Relative(10) }, Jump { location: 1186 }, Load { destination: Relative(10), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, Load { destination: Relative(21), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(6) }, Load { destination: Relative(31), source_pointer: Relative(36) }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(21), rhs: Relative(31) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(33) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, Mov { destination: Relative(6), source: Relative(10) }, Jump { location: 1129 }, Load { destination: Relative(8), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(10), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Load { destination: Relative(33), source_pointer: Relative(37) }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(10), rhs: Relative(33) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(36) }, Store { destination_pointer: Relative(17), source: Relative(10) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(8) }, Jump { location: 1064 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(36) }, Jump { location: 947 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(36) }, Jump { location: 904 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(36) }, Jump { location: 855 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(36) }, Jump { location: 806 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Mov { destination: Relative(31), source: Relative(36) }, Jump { location: 771 }, Load { destination: Relative(33), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(36), rhs: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(33), rhs: Relative(38) }, Store { destination_pointer: Relative(31), source: Relative(36) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(33) }, Jump { location: 556 }, Load { destination: Relative(35), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(39) }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(36), rhs: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(35), rhs: Relative(38) }, Store { destination_pointer: Relative(31), source: Relative(36) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(35) }, Jump { location: 507 }, Load { destination: Relative(26), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(3) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(3) }, Load { destination: Relative(32), source_pointer: Relative(36) }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(31), rhs: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(33) }, Store { destination_pointer: Relative(34), source: Relative(31) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(26) }, Jump { location: 428 }, Load { destination: Relative(25), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(26), rhs: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(28) }, Store { destination_pointer: Relative(18), source: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(25) }, Jump { location: 345 }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Load { destination: Relative(18), source_pointer: Relative(24) }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(17), rhs: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Relative(16) }, Jump { location: 262 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 2155 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 2169 }, Jump { location: 2171 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 2186 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 2183 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 2176 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 2186 }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        if result {\n            for i in 0..self.len() {\n                result &= self[i].eq(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use super::{Eq, max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n\n    #[test]\n    fn correctly_handles_unequal_length_slices() {\n        let slice_1 = &[0, 1, 2, 3];\n        let slice_2 = &[0, 1, 2];\n        assert(!slice_1.eq(slice_2));\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub u32) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
