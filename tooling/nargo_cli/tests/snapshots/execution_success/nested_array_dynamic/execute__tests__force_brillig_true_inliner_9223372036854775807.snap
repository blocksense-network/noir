---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27]",
    "public parameters indices : [_28]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32865 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 21 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 25 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(32864) }, Call { location: 175 }, Call { location: 176 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32865 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 174 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 167 }, Return, Return, Call { location: 2121 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Const { destination: Relative(5), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(6), op: Sub, lhs: Relative(2), rhs: Relative(5) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Const { destination: Relative(9), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 188 }, Call { location: 2127 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Load { destination: Relative(10), source_pointer: Relative(18) }, Load { destination: Relative(1), source_pointer: Relative(14) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(1) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 209 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(10) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 217 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(1) }, Const { destination: Relative(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(11), rhs: Relative(1) }, JumpIf { condition: Relative(19), location: 224 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, Load { destination: Relative(11), source_pointer: Relative(14) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 230 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 238 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(11) }, Const { destination: Relative(10), bit_size: Field, value: 2 }, Const { destination: Relative(11), bit_size: Field, value: 20 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Load { destination: Relative(23), source_pointer: Relative(14) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 262 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(23) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 267 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 2108 }, Jump { location: 270 }, Load { destination: Relative(14), source_pointer: Relative(22) }, JumpIf { condition: Relative(14), location: 274 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Load { destination: Relative(14), source_pointer: Relative(4) }, BinaryFieldOp { destination: Relative(17), op: Sub, lhs: Relative(2), rhs: Relative(10) }, Cast { destination: Relative(18), source: Relative(17), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 280 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(18), rhs: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(20) }, Load { destination: Relative(22), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Load { destination: Relative(17), source_pointer: Relative(26) }, Load { destination: Relative(14), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(14) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 298 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(17) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(14) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 306 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Const { destination: Relative(14), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(19), rhs: Relative(14) }, JumpIf { condition: Relative(27), location: 313 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(19), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 319 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(17) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 327 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(19) }, Const { destination: Relative(17), bit_size: Field, value: 5 }, Const { destination: Relative(19), bit_size: Field, value: 6 }, Const { destination: Relative(29), bit_size: Field, value: 21 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(19) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(9) }, Load { destination: Relative(29), source_pointer: Relative(22) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 352 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(29) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 356 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(25), location: 2095 }, Jump { location: 359 }, Load { destination: Relative(22), source_pointer: Relative(19) }, JumpIf { condition: Relative(22), location: 363 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Load { destination: Relative(19), source_pointer: Relative(4) }, BinaryFieldOp { destination: Relative(22), op: Sub, lhs: Relative(2), rhs: Relative(1) }, Cast { destination: Relative(25), source: Relative(22), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(6) }, JumpIf { condition: Relative(22), location: 369 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Relative(8) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(12) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(15) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(22), source_pointer: Relative(32) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(19) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 387 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(19) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 395 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(19), bit_size: Field, value: 7 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(26), rhs: Relative(19) }, JumpIf { condition: Relative(33), location: 402 }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(34) } }, Load { destination: Relative(19), source_pointer: Relative(28) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 408 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(19) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 416 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(19), bit_size: Field, value: 8 }, Const { destination: Relative(22), bit_size: Field, value: 9 }, Const { destination: Relative(34), bit_size: Field, value: 22 }, Mov { destination: Relative(35), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(35), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(36) }, Store { destination_pointer: Relative(37), source: Relative(19) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(22) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(28) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 441 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(36) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 445 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(26), location: 2082 }, Jump { location: 448 }, Load { destination: Relative(26), source_pointer: Relative(34) }, JumpIf { condition: Relative(26), location: 452 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(26), source_pointer: Relative(4) }, Cast { destination: Relative(28), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(6) }, JumpIf { condition: Relative(31), location: 457 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(31) }, Load { destination: Relative(28), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(12) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(15) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(37) }, Load { destination: Relative(26), source_pointer: Relative(33) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(26) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 475 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(26) }, Load { destination: Relative(26), source_pointer: Relative(35) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 483 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(26) }, Const { destination: Relative(26), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(28), rhs: Relative(26) }, JumpIf { condition: Relative(38), location: 490 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(39) } }, Load { destination: Relative(28), source_pointer: Relative(33) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(28) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 496 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(35) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(28) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 504 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(28) }, Const { destination: Relative(28), bit_size: Field, value: 11 }, Const { destination: Relative(35), bit_size: Field, value: 12 }, Const { destination: Relative(40), bit_size: Field, value: 23 }, Mov { destination: Relative(41), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(28) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(35) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(9) }, Load { destination: Relative(35), source_pointer: Relative(33) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(35) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 529 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(35) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 533 }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(35), location: 2069 }, Jump { location: 536 }, Load { destination: Relative(33), source_pointer: Relative(28) }, JumpIf { condition: Relative(33), location: 540 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(28), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(37) }, Load { destination: Relative(28), source_pointer: Relative(33) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(28) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 553 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(35) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(28) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 561 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(28) }, Const { destination: Relative(28), bit_size: Field, value: 109 }, Const { destination: Relative(37), bit_size: Field, value: 110 }, Const { destination: Relative(38), bit_size: Field, value: 111 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(40) }, Store { destination_pointer: Relative(42), source: Relative(28) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(37) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(9) }, Load { destination: Relative(37), source_pointer: Relative(35) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(37) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 586 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(37) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 590 }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(33), location: 2056 }, Jump { location: 593 }, Load { destination: Relative(3), source_pointer: Relative(28) }, JumpIf { condition: Relative(3), location: 597 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(12) }, Const { destination: Relative(33), bit_size: Field, value: 100 }, Const { destination: Relative(35), bit_size: Field, value: 50 }, JumpIf { condition: Relative(3), location: 633 }, Jump { location: 603 }, Load { destination: Relative(36), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(32) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(34) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Store { destination_pointer: Relative(43), source: Relative(35) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(32) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Store { destination_pointer: Relative(4), source: Relative(37) }, Jump { location: 663 }, Load { destination: Relative(36), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(32) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(34) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, Store { destination_pointer: Relative(43), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(32) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Store { destination_pointer: Relative(4), source: Relative(37) }, Jump { location: 663 }, Load { destination: Relative(28), source_pointer: Relative(4) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(38) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(36) }, Load { destination: Relative(38), source_pointer: Relative(40) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(36) }, Load { destination: Relative(40), source_pointer: Relative(42) }, Load { destination: Relative(28), source_pointer: Relative(38) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(28) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 679 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(40) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(28) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 687 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(28) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(37), rhs: Relative(35) }, JumpIf { condition: Relative(28), location: 693 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(40) } }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(12) }, Const { destination: Relative(37), bit_size: Field, value: 101 }, Const { destination: Relative(40), bit_size: Field, value: 102 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(33) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(37) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(42) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 713 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, JumpIf { condition: Relative(3), location: 745 }, Jump { location: 717 }, Load { destination: Relative(33), source_pointer: Relative(42) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 723 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(29) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(27) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(33), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Store { destination_pointer: Relative(4), source: Relative(33) }, Jump { location: 778 }, Const { destination: Relative(33), bit_size: Field, value: 51 }, Const { destination: Relative(36), bit_size: Field, value: 52 }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(38) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(38) }, Store { destination_pointer: Relative(40), source: Relative(35) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(36) }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(29) }, Load { destination: Relative(36), source_pointer: Relative(40) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(27) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(33), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(28) }, Store { destination_pointer: Relative(40), source: Relative(36) }, Store { destination_pointer: Relative(4), source: Relative(33) }, Jump { location: 778 }, Load { destination: Relative(33), source_pointer: Relative(4) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(38) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(36) }, Load { destination: Relative(38), source_pointer: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 791 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(38) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(33) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 799 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(38), source_pointer: Relative(37) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(38) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 810 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(38) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 814 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(36), location: 2043 }, Jump { location: 817 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 821 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(13) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(16) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 834 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 842 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(37) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(40) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 853 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(40) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 857 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(36), location: 2030 }, Jump { location: 860 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 864 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(20) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(24) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 877 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 885 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Const { destination: Relative(33), bit_size: Field, value: 103 }, Const { destination: Relative(40), bit_size: Field, value: 104 }, Const { destination: Relative(43), bit_size: Field, value: 105 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(33) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(40) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(43) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(37) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(40) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 910 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(40) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 914 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(36), location: 2017 }, Jump { location: 917 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 921 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(27) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(29) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 934 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 942 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Const { destination: Relative(33), bit_size: Field, value: 106 }, Const { destination: Relative(40), bit_size: Field, value: 107 }, Const { destination: Relative(43), bit_size: Field, value: 108 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(33) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(40) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(43) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(37) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(40) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 967 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(40) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 971 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(36), location: 2004 }, Jump { location: 974 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 978 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(33), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(32) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(34) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 991 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 999 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(39) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(33) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 1007 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(43), source_pointer: Relative(37) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 1018 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(43) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 1022 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(36), location: 1991 }, Jump { location: 1025 }, Load { destination: Relative(36), source_pointer: Relative(33) }, JumpIf { condition: Relative(36), location: 1029 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Const { destination: Relative(33), bit_size: Field, value: 0 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(37) }, Store { destination_pointer: Relative(38), source: Relative(33) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(1) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(10) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1048 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(33) }, Store { destination_pointer: Relative(37), source: Relative(5) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(14) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(17) }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(17) }, Store { destination_pointer: Relative(33), source: Relative(36) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(1) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(4) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(15) }, JumpIf { condition: Relative(4), location: 1080 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(7), rhs: Relative(15) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Load { destination: Relative(7), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(14) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1094 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Load { destination: Relative(7), source_pointer: Relative(33) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1102 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(7) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(13) }, Load { destination: Relative(7), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(16) }, Load { destination: Relative(37), source_pointer: Relative(39) }, Load { destination: Relative(33), source_pointer: Relative(7) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(33) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 1116 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 1124 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(21) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 1132 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(7) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(40) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 1143 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(40) }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 1147 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 1978 }, Jump { location: 1150 }, Load { destination: Relative(10), source_pointer: Relative(33) }, JumpIf { condition: Relative(10), location: 1154 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Load { destination: Relative(10), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(17) }, Load { destination: Relative(21), source_pointer: Relative(33) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1167 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(21) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1175 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(20) }, Load { destination: Relative(10), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(24) }, Load { destination: Relative(33), source_pointer: Relative(37) }, Load { destination: Relative(21), source_pointer: Relative(10) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(21) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1189 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(33) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(21) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1197 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(30) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1205 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, Load { destination: Relative(38), source_pointer: Relative(10) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 1216 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(38) }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 1220 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(14), location: 1965 }, Jump { location: 1223 }, Load { destination: Relative(10), source_pointer: Relative(21) }, JumpIf { condition: Relative(10), location: 1227 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Load { destination: Relative(10), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(17) }, Load { destination: Relative(21), source_pointer: Relative(33) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1240 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(21) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1248 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(27) }, Load { destination: Relative(10), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(29) }, Load { destination: Relative(27), source_pointer: Relative(36) }, Load { destination: Relative(21), source_pointer: Relative(10) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(21) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1262 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(27) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1270 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, Load { destination: Relative(27), source_pointer: Relative(10) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(27) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1281 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(27) }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 1285 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(14), location: 1952 }, Jump { location: 1288 }, Load { destination: Relative(10), source_pointer: Relative(21) }, JumpIf { condition: Relative(10), location: 1292 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Load { destination: Relative(10), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(17) }, Load { destination: Relative(21), source_pointer: Relative(28) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(10) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 1305 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(21) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 1313 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(32) }, Load { destination: Relative(10), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Load { destination: Relative(28), source_pointer: Relative(33) }, Load { destination: Relative(21), source_pointer: Relative(10) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(21) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1327 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(28) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1335 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(41) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(21) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1343 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(10) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1354 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(36) }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 1358 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(14), location: 1939 }, Jump { location: 1361 }, Load { destination: Relative(10), source_pointer: Relative(21) }, JumpIf { condition: Relative(10), location: 1365 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Load { destination: Relative(10), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Load { destination: Relative(4), source_pointer: Relative(27) }, Load { destination: Relative(17), source_pointer: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1378 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(17) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(14) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1386 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(31) }, Load { destination: Relative(14), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(32) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Load { destination: Relative(4), source_pointer: Relative(27) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(4) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1403 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(28) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(4) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1411 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(14), rhs: Relative(35) }, JumpIf { condition: Relative(4), location: 1417 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Load { destination: Relative(4), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Load { destination: Relative(14), source_pointer: Relative(28) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(10) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1427 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(14) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1435 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(4) }, Load { destination: Relative(31), source_pointer: Relative(32) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(34) }, Load { destination: Relative(14), source_pointer: Relative(31) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(14) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 1449 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(33) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(14) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1457 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(30) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(14) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1465 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1476 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 1480 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 1926 }, Jump { location: 1483 }, Load { destination: Relative(7), source_pointer: Relative(14) }, JumpIf { condition: Relative(7), location: 1487 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(12) }, Const { destination: Relative(17), bit_size: Field, value: 19 }, Const { destination: Relative(18), bit_size: Field, value: 18 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(11) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(17) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(18) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, JumpIf { condition: Relative(3), location: 1554 }, Jump { location: 1514 }, Load { destination: Relative(3), source_pointer: Relative(21) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1520 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(1) }, JumpIf { condition: Relative(7), location: 1525 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, Load { destination: Relative(19), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(27) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, Store { destination_pointer: Relative(37), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(14) }, Store { destination_pointer: Relative(37), source: Relative(22) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2133 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(28) }, Store { destination_pointer: Relative(27), source: Relative(19) }, Store { destination_pointer: Relative(1), source: Relative(22) }, Jump { location: 1598 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(26) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(1) }, JumpIf { condition: Relative(7), location: 1568 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Load { destination: Relative(10), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(20) }, Store { destination_pointer: Relative(37), source: Relative(3) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(14) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2133 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Store { destination_pointer: Relative(27), source: Relative(3) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Jump { location: 1598 }, Load { destination: Relative(10), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Load { destination: Relative(19), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(10), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(10) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1609 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(22) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(10) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1617 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, Load { destination: Relative(27), source_pointer: Relative(28) }, Load { destination: Relative(22), source_pointer: Relative(10) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(22) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1629 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(27) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(22) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 1637 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Load { destination: Relative(27), source_pointer: Relative(10) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(27) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 1648 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(27) }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 1652 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(19), location: 1913 }, Jump { location: 1655 }, Load { destination: Relative(3), source_pointer: Relative(22) }, JumpIf { condition: Relative(3), location: 1659 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(3), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Load { destination: Relative(3), source_pointer: Relative(10) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1670 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(19) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1678 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 1690 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 1698 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, Load { destination: Relative(19), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(19), rhs: Relative(18) }, JumpIf { condition: Relative(3), location: 1706 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(8) }, Const { destination: Relative(5), bit_size: Field, value: 5000 }, JumpIf { condition: Relative(3), location: 1756 }, Jump { location: 1711 }, Load { destination: Relative(3), source_pointer: Relative(1) }, JumpIf { condition: Relative(7), location: 1714 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(31) }, Load { destination: Relative(10), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(20) }, Load { destination: Relative(18), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, Load { destination: Relative(19), source_pointer: Relative(22) }, JumpIf { condition: Relative(2), location: 1725 }, Call { location: 2127 }, Const { destination: Relative(2), bit_size: Field, value: 1000 }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2133 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(25) }, Store { destination_pointer: Relative(24), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(20) }, Store { destination_pointer: Relative(22), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(19) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2133 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(33) }, Store { destination_pointer: Relative(18), source: Relative(10) }, Store { destination_pointer: Relative(1), source: Relative(2) }, Jump { location: 1800 }, Load { destination: Relative(3), source_pointer: Relative(1) }, JumpIf { condition: Relative(7), location: 1759 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(29) }, Load { destination: Relative(10), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(20) }, Load { destination: Relative(18), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, Load { destination: Relative(19), source_pointer: Relative(22) }, JumpIf { condition: Relative(2), location: 1770 }, Call { location: 2127 }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2133 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(5) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Store { destination_pointer: Relative(22), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(19) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2133 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(30) }, Store { destination_pointer: Relative(18), source: Relative(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Jump { location: 1800 }, Load { destination: Relative(3), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(6) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(10) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1809 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(8) }, Load { destination: Relative(4), source_pointer: Relative(10) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 1819 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, JumpIf { condition: Relative(7), location: 1821 }, Call { location: 2127 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(34) }, Load { destination: Relative(4), source_pointer: Relative(10) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1830 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(20) }, Load { destination: Relative(7), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(35) }, Load { destination: Relative(4), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(14), source_pointer: Relative(20) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(13) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2133 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Store { destination_pointer: Relative(19), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2133 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(36) }, Store { destination_pointer: Relative(14), source: Relative(7) }, Store { destination_pointer: Relative(1), source: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(6), source: Relative(6), bit_size: U1 }, JumpIf { condition: Relative(6), location: 1872 }, Call { location: 2130 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, Load { destination: Relative(3), source_pointer: Relative(6) }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(17) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 1892 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(4), location: 1900 }, Jump { location: 1895 }, Load { destination: Relative(1), source_pointer: Relative(5) }, JumpIf { condition: Relative(1), location: 1899 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Load { destination: Relative(4), source_pointer: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(2) }, Load { destination: Relative(6), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(11) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(10) }, Store { destination_pointer: Relative(5), source: Relative(6) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 1892 }, Load { destination: Relative(19), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(27), source_pointer: Relative(37) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(26), rhs: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(28) }, Store { destination_pointer: Relative(22), source: Relative(26) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(19) }, Jump { location: 1652 }, Load { destination: Relative(10), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(7) }, Load { destination: Relative(17), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(7) }, Load { destination: Relative(21), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(17), rhs: Relative(21) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(27) }, Store { destination_pointer: Relative(14), source: Relative(17) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, Mov { destination: Relative(7), source: Relative(10) }, Jump { location: 1480 }, Load { destination: Relative(14), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(7) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(7) }, Load { destination: Relative(28), source_pointer: Relative(33) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(27), rhs: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(29) }, Store { destination_pointer: Relative(21), source: Relative(27) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, Mov { destination: Relative(7), source: Relative(14) }, Jump { location: 1358 }, Load { destination: Relative(14), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(7) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(7) }, Load { destination: Relative(28), source_pointer: Relative(33) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(27), rhs: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(29) }, Store { destination_pointer: Relative(21), source: Relative(27) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, Mov { destination: Relative(7), source: Relative(14) }, Jump { location: 1285 }, Load { destination: Relative(14), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(7) }, Load { destination: Relative(28), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(7) }, Load { destination: Relative(33), source_pointer: Relative(37) }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(28), rhs: Relative(33) }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(36) }, Store { destination_pointer: Relative(21), source: Relative(28) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, Mov { destination: Relative(7), source: Relative(14) }, Jump { location: 1220 }, Load { destination: Relative(10), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(28) }, Load { destination: Relative(14), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(28) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryFieldOp { destination: Relative(37), op: Equals, lhs: Relative(14), rhs: Relative(36) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(37) }, Store { destination_pointer: Relative(33), source: Relative(14) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(10) }, Jump { location: 1147 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(28) }, Load { destination: Relative(40), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(36) }, Jump { location: 1022 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(28) }, Load { destination: Relative(40), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(36) }, Jump { location: 971 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(28) }, Load { destination: Relative(40), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(36) }, Jump { location: 914 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(28) }, Load { destination: Relative(40), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(36) }, Jump { location: 857 }, Load { destination: Relative(36), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(28) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(28) }, Load { destination: Relative(40), source_pointer: Relative(44) }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(38), rhs: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(43) }, Store { destination_pointer: Relative(33), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(12) }, Mov { destination: Relative(28), source: Relative(36) }, Jump { location: 814 }, Load { destination: Relative(33), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(36), rhs: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(33), rhs: Relative(38) }, Store { destination_pointer: Relative(28), source: Relative(36) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(33) }, Jump { location: 590 }, Load { destination: Relative(35), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(39) }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(36), rhs: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(35), rhs: Relative(38) }, Store { destination_pointer: Relative(28), source: Relative(36) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(35) }, Jump { location: 533 }, Load { destination: Relative(26), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(3) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(3) }, Load { destination: Relative(32), source_pointer: Relative(36) }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(31), rhs: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(33) }, Store { destination_pointer: Relative(34), source: Relative(31) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(26) }, Jump { location: 445 }, Load { destination: Relative(25), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(26), rhs: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(28) }, Store { destination_pointer: Relative(19), source: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(25) }, Jump { location: 356 }, Load { destination: Relative(17), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, Load { destination: Relative(19), source_pointer: Relative(24) }, BinaryFieldOp { destination: Relative(20), op: Equals, lhs: Relative(18), rhs: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U1, lhs: Relative(17), rhs: Relative(20) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, Mov { destination: Relative(3), source: Relative(17) }, Jump { location: 267 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 2126 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 2137 }, Jump { location: 2139 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 2154 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 2151 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 2144 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 2154 }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
