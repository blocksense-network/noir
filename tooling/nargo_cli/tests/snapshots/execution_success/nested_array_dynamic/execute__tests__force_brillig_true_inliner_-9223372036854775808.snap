---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
