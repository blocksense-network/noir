---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 512
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "array",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "i",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _19",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "INIT (id: 0, len: 2, witnesses: [_0, _1])",
    "EXPR [ (1, _2) (-1, _3) -1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _3) 0 ], value: EXPR [ (1, _4) 0 ]) ",
    "EXPR [ (1, _4) -5 ]",
    "MEM (id: 0, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _5) 0 ]) ",
    "EXPR [ (1, _5) -10 ]",
    "EXPR [ (-1, _6) 2 ]",
    "MEM (id: 0, write EXPR [ (1, _6) 0 ] at: EXPR [ (1, _2) 0 ]) ",
    "EXPR [ (-1, _7) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _7) 0 ], value: EXPR [ (1, _8) 0 ]) ",
    "EXPR [ (1, _8) -5 ]",
    "MEM (id: 0, read at: EXPR [ (1, _7) 0 ], value: EXPR [ (1, _9) 0 ]) ",
    "EXPR [ (-1, _10) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _10) 0 ], value: EXPR [ (1, _11) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _7) 0 ], value: EXPR [ (1, _12) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _10) 0 ], value: EXPR [ (1, _13) 0 ]) ",
    "INIT (id: 1, len: 4, witnesses: [_9, _11, _12, _13])",
    "EXPR [ (2, _2) (-1, _14) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _15) 0 ]) ",
    "EXPR [ (1, _14) (-1, _16) 1 ]",
    "MEM (id: 1, read at: EXPR [ (1, _16) 0 ], value: EXPR [ (1, _17) 0 ]) ",
    "EXPR [ (1, _15) -5 ]",
    "EXPR [ (-1, _18) 5 ]",
    "INIT (id: 2, len: 2, witnesses: [_18, _17])",
    "MEM (id: 2, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "EXPR [ (1, _19) -2 ]"
  ],
  "debug_symbols": "pZTbioMwEED/ZZ7zYGIu6q8sS0ltWgIhSqqFRfrvO3FHt31YWOKLx1zOMInjLHBx5/l28vE63KH7WOCcfAj+dgpDbyc/RJxdngy24WlKzuEUvKyjNdrk4gRdnENg8LBhXjfdRxtXTjbhasXAxQsSA159cPntyX7t6m9Vc3K13mX1b1upzTZHbFMV2I0hu1WH7LbA5rwmnXNZ4ldm90uy53L3lSjxzVYyvDnql+Qvakm+kPVBXx/0S76/0HrzTXPMb/ib/4kj2/v01ieA40UzELidQQ0dFp+EDo+gUGKg8Q9iYNZngxXNoF2fvMqVhsw6+lwQa6IkKqImGmJDbH8oKmKOhzmIHA+zEDVREnO8XBYPm7w9B0e97jrH/qX1TV/jtrI1xzENvbvMyeXjr2t4Id8=",
  "file_map": {
    "50": {
      "source": "fn main(mut array: [Field; 2], i: u32) {\n    assert_eq(array[i - 1], 5);\n    assert_eq(array[i], 10);\n\n    array[i] = 2;\n\n    let array2 = [array, array];\n\n    assert_eq(array2[0][0], 5);\n    assert_eq(array2[0][i], 2);\n    assert_eq(array2[i][0], 5);\n    assert_eq(array2[i][i], 2);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
