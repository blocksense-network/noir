---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
