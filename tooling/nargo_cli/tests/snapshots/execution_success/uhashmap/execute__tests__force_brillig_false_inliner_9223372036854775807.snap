---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 512
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _11",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ]]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32883 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32871), size_address: Relative(2), offset_address: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32871 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 23 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 34 }, Call { location: 71 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32883 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 33 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 26 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 6 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 3 }, Const { destination: Direct(32837), bit_size: Integer(U1), value: 0 }, Const { destination: Direct(32838), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32839), bit_size: Integer(U64), value: 0 }, Const { destination: Direct(32840), bit_size: Field, value: 0 }, Const { destination: Direct(32841), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32842), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32843), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(32844), bit_size: Field, value: 2 }, Const { destination: Direct(32845), bit_size: Integer(U32), value: 4 }, Const { destination: Direct(32846), bit_size: Integer(U8), value: 32 }, Const { destination: Direct(32847), bit_size: Integer(U8), value: 44 }, Const { destination: Direct(32848), bit_size: Integer(U8), value: 46 }, Const { destination: Direct(32849), bit_size: Integer(U8), value: 65 }, Const { destination: Direct(32850), bit_size: Integer(U8), value: 95 }, Const { destination: Direct(32851), bit_size: Integer(U8), value: 97 }, Const { destination: Direct(32852), bit_size: Integer(U8), value: 98 }, Const { destination: Direct(32853), bit_size: Integer(U8), value: 100 }, Const { destination: Direct(32854), bit_size: Integer(U8), value: 101 }, Const { destination: Direct(32855), bit_size: Integer(U8), value: 102 }, Const { destination: Direct(32856), bit_size: Integer(U8), value: 103 }, Const { destination: Direct(32857), bit_size: Integer(U8), value: 104 }, Const { destination: Direct(32858), bit_size: Integer(U8), value: 105 }, Const { destination: Direct(32859), bit_size: Integer(U8), value: 108 }, Const { destination: Direct(32860), bit_size: Integer(U8), value: 109 }, Const { destination: Direct(32861), bit_size: Integer(U8), value: 110 }, Const { destination: Direct(32862), bit_size: Integer(U8), value: 111 }, Const { destination: Direct(32863), bit_size: Integer(U8), value: 114 }, Const { destination: Direct(32864), bit_size: Integer(U8), value: 115 }, Const { destination: Direct(32865), bit_size: Integer(U8), value: 116 }, Const { destination: Direct(32866), bit_size: Integer(U8), value: 117 }, Const { destination: Direct(32867), bit_size: Integer(U8), value: 118 }, Const { destination: Direct(32868), bit_size: Integer(U8), value: 123 }, Const { destination: Direct(32869), bit_size: Integer(U8), value: 125 }, Const { destination: Direct(32870), bit_size: Field, value: 18446744073709551616 }, Return, Call { location: 11407 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Load { destination: Relative(3), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, Load { destination: Relative(9), source_pointer: Relative(5) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 111 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 11 }, Mov { destination: Relative(11), source: Direct(0) }, Mov { destination: Relative(12), source: Relative(6) }, Mov { destination: Relative(13), source: Relative(7) }, Mov { destination: Relative(14), source: Relative(8) }, Mov { destination: Relative(15), source: Relative(3) }, Mov { destination: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(5), source_pointer: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(5) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 131 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, JumpIf { condition: Relative(11), location: 136 }, Call { location: 11667 }, Load { destination: Relative(9), source_pointer: Relative(6) }, Load { destination: Relative(11), source_pointer: Relative(5) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(11) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 143 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Direct(32837) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Load { destination: Relative(15), source_pointer: Relative(5) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 157 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(15) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32870) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(3) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32840) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32840) }, Store { destination_pointer: Relative(17), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(15) }, Store { destination_pointer: Relative(19), source: Direct(32842) }, Store { destination_pointer: Relative(20), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 197 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(10), location: 11377 }, Jump { location: 200 }, Load { destination: Relative(10), source_pointer: Relative(17) }, Load { destination: Relative(12), source_pointer: Relative(18) }, Load { destination: Relative(13), source_pointer: Relative(19) }, Load { destination: Relative(15), source_pointer: Relative(12) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 209 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(21), size: Relative(22) }, output: HeapArray { pointer: Relative(23), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(17), source: Relative(10) }, Store { destination_pointer: Relative(18), source: Relative(15) }, Store { destination_pointer: Relative(19), source: Relative(13) }, Store { destination_pointer: Relative(20), source: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Cast { destination: Relative(13), source: Relative(10), bit_size: Integer(U32) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Field }, Cast { destination: Relative(10), source: Relative(12), bit_size: Integer(U32) }, Load { destination: Relative(12), source_pointer: Relative(5) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 234 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(12) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 238 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(12), location: 241 }, Jump { location: 306 }, Load { destination: Relative(12), source_pointer: Relative(5) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 247 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, JumpIf { condition: Relative(15), location: 257 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 257 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 261 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(12), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 266 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(9) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 272 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(12), rhs: Direct(32845) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(12), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(20) }, Not { destination: Relative(16), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 296 }, Jump { location: 300 }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(17), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 303 }, Jump { location: 299 }, Jump { location: 300 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 238 }, Store { destination_pointer: Relative(11), source: Direct(32841) }, Store { destination_pointer: Relative(14), source: Relative(18) }, Jump { location: 306 }, Load { destination: Relative(5), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(14) }, JumpIf { condition: Relative(5), location: 310 }, Call { location: 11679 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 73 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 121 }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 49 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32863) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32853) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32852) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32856) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32856) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32863) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32857) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(10) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(11) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32848) }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(4), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 438 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, Mov { destination: Relative(16), source: Relative(15) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U64), value: 15366650908120444287 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(17) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(18) }, Call { location: 23 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, Store { destination_pointer: Relative(16), source: Direct(32844) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(15), size: Relative(14) } }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 445 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(9) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32870) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(18) }, Store { destination_pointer: Relative(19), source: Relative(3) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, Store { destination_pointer: Relative(9), source: Relative(17) }, Store { destination_pointer: Relative(14), source: Relative(4) }, Store { destination_pointer: Relative(15), source: Direct(32842) }, Store { destination_pointer: Relative(16), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 485 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(4), location: 11347 }, Jump { location: 488 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Load { destination: Relative(18), source_pointer: Relative(13) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 497 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(18) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(20), size: Relative(21) }, output: HeapArray { pointer: Relative(22), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(14), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(17) }, Store { destination_pointer: Relative(16), source: Direct(32841) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32842) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Cast { destination: Relative(13), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(9), source: Relative(13), bit_size: Field }, Cast { destination: Relative(4), source: Relative(9), bit_size: Integer(U32) }, Load { destination: Relative(9), source_pointer: Relative(6) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Load { destination: Relative(14), source_pointer: Relative(13) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 524 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(14) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 528 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 531 }, Jump { location: 639 }, Load { destination: Relative(13), source_pointer: Relative(6) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 539 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 549 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 549 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 553 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 558 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(13) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(18), rhs: Relative(13) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(17), rhs: Relative(19) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, JumpIf { condition: Relative(17), location: 564 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32845) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(13) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32842) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32843) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(20) }, Load { destination: Relative(22), source_pointer: Relative(24) }, Not { destination: Relative(14), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(20), location: 588 }, Jump { location: 592 }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(19), rhs: Relative(3) }, JumpIf { condition: Relative(14), location: 595 }, Jump { location: 591 }, Jump { location: 592 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(13) }, Jump { location: 528 }, Load { destination: Relative(2), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 601 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(14), source: Direct(32772) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Store { destination_pointer: Relative(16), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(14) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(19) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(14), source: Direct(32772) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Store { destination_pointer: Relative(16), source: Relative(21) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(14) }, Call { location: 11682 }, Mov { destination: Relative(13), source: Direct(32772) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, Store { destination_pointer: Relative(16), source: Direct(32841) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(9) }, JumpIf { condition: Relative(14), location: 635 }, Call { location: 11708 }, Store { destination_pointer: Relative(6), source: Relative(2) }, Store { destination_pointer: Relative(7), source: Relative(13) }, Store { destination_pointer: Relative(8), source: Relative(4) }, Jump { location: 639 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 647 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Direct(32838) }, JumpIf { condition: Relative(8), location: 652 }, Call { location: 11711 }, Load { destination: Relative(7), source_pointer: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32837) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 665 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32870) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, Store { destination_pointer: Relative(15), source: Relative(19) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Store { destination_pointer: Relative(17), source: Direct(32842) }, Store { destination_pointer: Relative(18), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 705 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(9), location: 11317 }, Jump { location: 708 }, Load { destination: Relative(9), source_pointer: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Load { destination: Relative(14), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 717 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(21), size: Relative(22) }, output: HeapArray { pointer: Relative(23), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(15), source: Relative(9) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Store { destination_pointer: Relative(18), source: Direct(32841) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Load { destination: Relative(9), source_pointer: Relative(13) }, Cast { destination: Relative(14), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(13), source: Relative(14), bit_size: Field }, Cast { destination: Relative(9), source: Relative(13), bit_size: Integer(U32) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 742 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 746 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(13), location: 749 }, Jump { location: 814 }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 755 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, JumpIf { condition: Relative(15), location: 765 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 765 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 769 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 774 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Relative(7) }, BinaryIntOp { destination: Relative(13), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(7) }, JumpIf { condition: Relative(15), location: 780 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Direct(32845) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(20) }, Not { destination: Relative(16), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 804 }, Jump { location: 808 }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(17), rhs: Relative(3) }, JumpIf { condition: Relative(13), location: 811 }, Jump { location: 807 }, Jump { location: 808 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(13) }, Jump { location: 746 }, Store { destination_pointer: Relative(6), source: Direct(32841) }, Store { destination_pointer: Relative(8), source: Relative(18) }, Jump { location: 814 }, Load { destination: Relative(4), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 818 }, Call { location: 11714 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, Load { destination: Relative(4), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(13) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(9) }, Mov { destination: Relative(9), source: Relative(8) }, Store { destination_pointer: Relative(9), source: Direct(32837) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32837) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32842) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32838) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 857 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 861 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(7), location: 11304 }, Jump { location: 864 }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 872 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(13) }, Const { destination: Relative(13), bit_size: Integer(U8), value: 85 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 72 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 77 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 112 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 49 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32851) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32864) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32857) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32851) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32859) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32854) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32861) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32856) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32865) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32857) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32860) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32866) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32864) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32865) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32852) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32854) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32847) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32856) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32862) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32865) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32868) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32859) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32854) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32861) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32869) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32848) }, Const { destination: Relative(13), bit_size: Field, value: 1 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, JumpIf { condition: Relative(15), location: 981 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 40 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, Mov { destination: Relative(21), source: Relative(20) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U64), value: 7511829951750337011 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 37 }, Mov { destination: Direct(32771), source: Relative(22) }, Mov { destination: Direct(32772), source: Relative(21) }, Mov { destination: Direct(32773), source: Relative(23) }, Call { location: 23 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(22) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(20), size: Relative(16) } }, Load { destination: Relative(9), source_pointer: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32837) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 994 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32870) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Relative(4) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, Store { destination_pointer: Relative(20), source: Relative(24) }, Store { destination_pointer: Relative(21), source: Relative(16) }, Store { destination_pointer: Relative(22), source: Direct(32842) }, Store { destination_pointer: Relative(23), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1034 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(14), location: 11274 }, Jump { location: 1037 }, Load { destination: Relative(14), source_pointer: Relative(20) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1046 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(24) }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(26), size: Relative(27) }, output: HeapArray { pointer: Relative(28), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(20), source: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(24) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Store { destination_pointer: Relative(23), source: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Cast { destination: Relative(19), source: Relative(14), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(19), bit_size: Field }, Cast { destination: Relative(14), source: Relative(16), bit_size: Integer(U32) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1071 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1075 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 1078 }, Jump { location: 1143 }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1084 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, JumpIf { condition: Relative(20), location: 1094 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 1094 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 1098 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(20), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 1103 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(20), rhs: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(9) }, JumpIf { condition: Relative(20), location: 1109 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32845) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32842) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32843) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(20), source_pointer: Relative(25) }, Not { destination: Relative(21), source: Relative(20), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U1, lhs: Relative(21), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 1133 }, Jump { location: 1137 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(22), rhs: Relative(4) }, JumpIf { condition: Relative(16), location: 1140 }, Jump { location: 1136 }, Jump { location: 1137 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(16) }, Jump { location: 1075 }, Store { destination_pointer: Relative(8), source: Direct(32841) }, Store { destination_pointer: Relative(15), source: Relative(23) }, Jump { location: 1143 }, Load { destination: Relative(4), source_pointer: Relative(8) }, Load { destination: Relative(7), source_pointer: Relative(15) }, JumpIf { condition: Relative(4), location: 1147 }, Call { location: 11679 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(4), location: 1171 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, Mov { destination: Relative(14), source: Relative(9) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U64), value: 15366650908120444287 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(15) }, Mov { destination: Direct(32772), source: Relative(14) }, Mov { destination: Direct(32773), source: Relative(16) }, Call { location: 23 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(15) }, Store { destination_pointer: Relative(14), source: Direct(32844) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(6) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(7) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(9), size: Relative(8) } }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, Load { destination: Relative(6), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(12) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(15) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(12) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, Mov { destination: Relative(14), source: Relative(12) }, Store { destination_pointer: Relative(14), source: Direct(32837) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32837) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32842) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(8) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32838) }, Load { destination: Relative(16), source_pointer: Relative(8) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1214 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(16) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 20 }, Mov { destination: Relative(20), source: Direct(0) }, Mov { destination: Relative(21), source: Relative(12) }, Mov { destination: Relative(22), source: Relative(14) }, Mov { destination: Relative(23), source: Relative(15) }, Mov { destination: Relative(24), source: Relative(6) }, Mov { destination: Relative(25), source: Relative(7) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 20 }, Mov { destination: Relative(20), source: Direct(0) }, Mov { destination: Relative(21), source: Relative(12) }, Mov { destination: Relative(22), source: Relative(14) }, Mov { destination: Relative(23), source: Relative(15) }, Mov { destination: Relative(24), source: Relative(6) }, Mov { destination: Relative(25), source: Relative(9) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(7), source_pointer: Relative(14) }, Load { destination: Relative(8), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1244 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Direct(32842) }, JumpIf { condition: Relative(14), location: 1249 }, Call { location: 11717 }, Load { destination: Relative(8), source_pointer: Relative(12) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(16) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1262 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32870) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(6) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, Store { destination_pointer: Relative(21), source: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(16) }, Store { destination_pointer: Relative(23), source: Direct(32842) }, Store { destination_pointer: Relative(24), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1302 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(15), location: 11244 }, Jump { location: 1305 }, Load { destination: Relative(15), source_pointer: Relative(21) }, Load { destination: Relative(16), source_pointer: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(23) }, Load { destination: Relative(20), source_pointer: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(20) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1314 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(20) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(26), size: Relative(27) }, output: HeapArray { pointer: Relative(28), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(21), source: Relative(15) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Store { destination_pointer: Relative(23), source: Relative(19) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32842) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Cast { destination: Relative(19), source: Relative(15), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(19), bit_size: Field }, Cast { destination: Relative(15), source: Relative(16), bit_size: Integer(U32) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1339 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1343 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(16), location: 1346 }, Jump { location: 1411 }, Load { destination: Relative(16), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1352 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, JumpIf { condition: Relative(20), location: 1362 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 1362 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 1366 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(20), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 1371 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(20), rhs: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, JumpIf { condition: Relative(20), location: 1377 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32845) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32842) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32843) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(20), source_pointer: Relative(25) }, Not { destination: Relative(21), source: Relative(20), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U1, lhs: Relative(21), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 1401 }, Jump { location: 1405 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(22), rhs: Relative(6) }, JumpIf { condition: Relative(16), location: 1408 }, Jump { location: 1404 }, Jump { location: 1405 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(16) }, Jump { location: 1343 }, Store { destination_pointer: Relative(12), source: Direct(32841) }, Store { destination_pointer: Relative(14), source: Relative(23) }, Jump { location: 1411 }, Load { destination: Relative(6), source_pointer: Relative(12) }, Load { destination: Relative(7), source_pointer: Relative(14) }, JumpIf { condition: Relative(6), location: 1415 }, Call { location: 11679 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 69 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 120 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 99 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 119 }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(6) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(8) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(17) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32854) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(12) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32865) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32854) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32853) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32846) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32868) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32861) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32854) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32850) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32867) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32851) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32859) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32866) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32854) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32869) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32847) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32846) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32852) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32866) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32865) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32846) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32856) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32862) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32865) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32846) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32868) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32856) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32862) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32865) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32869) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32848) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 1520 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 40 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, Mov { destination: Relative(19), source: Relative(17) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U64), value: 3316745884754988903 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 36 }, Mov { destination: Direct(32771), source: Relative(20) }, Mov { destination: Direct(32772), source: Relative(19) }, Mov { destination: Direct(32773), source: Relative(21) }, Call { location: 23 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(20) }, Store { destination_pointer: Relative(19), source: Direct(32844) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(7) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(17), size: Relative(16) } }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1526 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(16) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(9) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(15) }, Mov { destination: Relative(15), source: Relative(9) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32842) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32838) }, Load { destination: Relative(17), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1563 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(17) }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1571 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 18 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32861) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32864) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32854) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32863) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32865) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32858) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32861) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32856) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32846) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32868) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32854) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32861) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32865) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32863) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32869) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 91 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 93 }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 96 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(25), source: Direct(32868) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(10) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32861) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(20) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32864) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32865) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32863) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32866) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(12) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32865) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32847) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32861) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32851) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32860) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(20) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(6) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32861) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32865) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32863) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32847) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32855) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32859) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32864) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(20) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(21) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(21) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(10) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32847) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32868) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(10) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32861) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(20) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32855) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32859) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32869) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32847) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(21) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32867) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32851) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32859) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32866) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32847) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32868) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(10) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32861) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(20) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32855) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32858) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32854) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32859) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32853) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32869) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32869) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1813 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(6), location: 11204 }, Jump { location: 1816 }, Load { destination: Relative(6), source_pointer: Relative(15) }, Load { destination: Relative(7), source_pointer: Relative(16) }, Load { destination: Relative(8), source_pointer: Relative(6) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(8) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1824 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(8) }, Const { destination: Relative(8), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 50 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Direct(32868) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32858) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32853) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32866) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32864) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32858) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32856) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32853) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32858) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32865) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32856) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32863) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32847) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32858) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32853) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32865) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32857) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32869) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), MemoryAddress(Relative(7)), HeapArray(HeapArray { pointer: Relative(8), size: 37 }), MemoryAddress(Direct(32837))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Load { destination: Relative(8), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(8) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1915 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(8) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Direct(32835) }, JumpIf { condition: Relative(6), location: 1920 }, Call { location: 11720 }, Load { destination: Relative(6), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 1926 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(8) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32870) }, Const { destination: Relative(8), bit_size: Integer(U8), value: 78 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32862) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32865) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32846) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32855) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32862) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32866) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32853) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32846) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32858) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32864) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32863) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32865) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32853) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32846) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32846) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32868) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32861) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32865) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32863) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32850) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32854) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32869) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32848) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 2019 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(7), location: 11011 }, Jump { location: 2022 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(17) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(7) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(14) }, Mov { destination: Relative(14), source: Relative(7) }, Store { destination_pointer: Relative(14), source: Direct(32837) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32837) }, Store { destination_pointer: Relative(9), source: Direct(32842) }, Store { destination_pointer: Relative(15), source: Relative(6) }, Store { destination_pointer: Relative(16), source: Direct(32838) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(14) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(9) }, Mov { destination: Relative(9), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Direct(32837) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32837) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32842) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32838) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Direct(32837) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32837) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32842) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32838) }, Load { destination: Relative(17), source_pointer: Relative(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 2109 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 2113 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(17), location: 10980 }, Jump { location: 2116 }, Load { destination: Relative(1), source_pointer: Relative(7) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 2125 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(15) }, Load { destination: Relative(23), source_pointer: Relative(16) }, Load { destination: Relative(24), source_pointer: Relative(14) }, Load { destination: Relative(25), source_pointer: Relative(23) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 2136 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32837) }, Load { destination: Relative(27), source_pointer: Relative(2) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 2147 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(27) }, Load { destination: Relative(27), source_pointer: Relative(23) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 2155 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(24) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(24) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32870) }, JumpIf { condition: Relative(27), location: 2173 }, Jump { location: 2196 }, Store { destination_pointer: Relative(25), source: Direct(32841) }, Load { destination: Relative(24), source_pointer: Relative(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 2180 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(17) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2188 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(24) }, Mov { destination: Relative(22), source: Direct(32838) }, Jump { location: 2192 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, JumpIf { condition: Relative(24), location: 10776 }, Jump { location: 2195 }, Jump { location: 2196 }, Load { destination: Relative(2), source_pointer: Relative(25) }, JumpIf { condition: Relative(2), location: 2199 }, Call { location: 11723 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 2206 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(19) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(3) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Store { destination_pointer: Relative(19), source: Relative(17) }, Store { destination_pointer: Relative(23), source: Direct(32842) }, Store { destination_pointer: Relative(24), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2233 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 10746 }, Jump { location: 2236 }, Load { destination: Relative(17), source_pointer: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Load { destination: Relative(25), source_pointer: Relative(23) }, Load { destination: Relative(26), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2245 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(26) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(28), size: Relative(29) }, output: HeapArray { pointer: Relative(30), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(2), source: Relative(17) }, Store { destination_pointer: Relative(19), source: Relative(26) }, Store { destination_pointer: Relative(23), source: Relative(25) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(19), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(19), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 2272 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2276 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 2279 }, Jump { location: 2387 }, Load { destination: Relative(19), source_pointer: Relative(15) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Load { destination: Relative(23), source_pointer: Relative(22) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 2287 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, JumpIf { condition: Relative(25), location: 2297 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(1) }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, JumpIf { condition: Relative(27), location: 2297 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(23) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, JumpIf { condition: Relative(26), location: 2301 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(25), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(23) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, JumpIf { condition: Relative(26), location: 2306 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(19) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Sub, bit_size: U32, lhs: Relative(25), rhs: Relative(27) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(19) }, JumpIf { condition: Relative(25), location: 2312 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Direct(32845) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(32) }, Not { destination: Relative(22), source: Relative(30), bit_size: U1 }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(25) }, JumpIf { condition: Relative(28), location: 2336 }, Jump { location: 2340 }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(27), rhs: Relative(3) }, JumpIf { condition: Relative(22), location: 2343 }, Jump { location: 2339 }, Jump { location: 2340 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 2276 }, Load { destination: Relative(1), source_pointer: Relative(15) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(3), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(1) }, JumpIf { condition: Relative(17), location: 2349 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(2) }, Call { location: 11682 }, Mov { destination: Relative(17), source: Direct(32772) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Store { destination_pointer: Relative(23), source: Relative(25) }, Mov { destination: Direct(32771), source: Relative(17) }, Call { location: 11682 }, Mov { destination: Relative(2), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, Store { destination_pointer: Relative(22), source: Relative(27) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(2) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, Store { destination_pointer: Relative(23), source: Relative(29) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(19) }, Call { location: 11682 }, Mov { destination: Relative(17), source: Direct(32772) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Store { destination_pointer: Relative(23), source: Direct(32841) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(3) }, JumpIf { condition: Relative(19), location: 2383 }, Call { location: 11708 }, Store { destination_pointer: Relative(15), source: Relative(1) }, Store { destination_pointer: Relative(16), source: Relative(17) }, Store { destination_pointer: Relative(14), source: Relative(2) }, Jump { location: 2387 }, Load { destination: Relative(1), source_pointer: Relative(7) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(3), source_pointer: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(15) }, Load { destination: Relative(7), source_pointer: Relative(16) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32837) }, Load { destination: Relative(15), source_pointer: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 2402 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(7) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 2410 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(9) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(9) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32870) }, JumpIf { condition: Relative(15), location: 2428 }, Jump { location: 2451 }, Store { destination_pointer: Relative(14), source: Direct(32841) }, Load { destination: Relative(15), source_pointer: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 2435 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(3) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 2443 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(15) }, Mov { destination: Relative(9), source: Direct(32838) }, Jump { location: 2447 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 10542 }, Jump { location: 2450 }, Jump { location: 2451 }, Load { destination: Relative(2), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 2455 }, Call { location: 11726 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(9) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32838) }, Load { destination: Relative(14), source_pointer: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 2490 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(14) }, Const { destination: Relative(2), bit_size: Field, value: 5 }, Const { destination: Relative(14), bit_size: Field, value: 11 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(9) }, Mov { destination: Relative(26), source: Relative(2) }, Mov { destination: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(16) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(16), bit_size: Field, value: 13 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(9) }, Mov { destination: Relative(26), source: Direct(32844) }, Mov { destination: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(17) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(9) }, Mov { destination: Relative(26), source: Relative(14) }, Mov { destination: Relative(27), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(17) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 2533 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Const { destination: Relative(19), bit_size: Field, value: 55 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2538 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(15), location: 10462 }, Jump { location: 2541 }, Load { destination: Relative(15), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(15) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(9) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 2549 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Direct(32843) }, JumpIf { condition: Relative(9), location: 2554 }, Call { location: 11729 }, Load { destination: Relative(7), source_pointer: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32837) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Load { destination: Relative(19), source_pointer: Relative(15) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 2567 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Direct(32844) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, Store { destination_pointer: Relative(19), source: Relative(26) }, Store { destination_pointer: Relative(23), source: Relative(3) }, Store { destination_pointer: Relative(24), source: Direct(32842) }, Store { destination_pointer: Relative(25), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2594 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(3), location: 10432 }, Jump { location: 2597 }, Load { destination: Relative(3), source_pointer: Relative(19) }, Load { destination: Relative(17), source_pointer: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(17) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2606 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(26) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(28), size: Relative(29) }, output: HeapArray { pointer: Relative(30), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(19), source: Relative(3) }, Store { destination_pointer: Relative(23), source: Relative(26) }, Store { destination_pointer: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(25), source: Direct(32841) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, Load { destination: Relative(3), source_pointer: Relative(17) }, Cast { destination: Relative(19), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(19), bit_size: Field }, Cast { destination: Relative(3), source: Relative(17), bit_size: Integer(U32) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 2631 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(17) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2635 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(17), location: 2638 }, Jump { location: 2703 }, Load { destination: Relative(17), source_pointer: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 2644 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(1) }, JumpIf { condition: Relative(22), location: 2654 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(1) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, JumpIf { condition: Relative(24), location: 2654 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 2658 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(17), op: Div, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 2663 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Relative(7) }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, JumpIf { condition: Relative(22), location: 2669 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Direct(32845) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(17), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(27) }, Not { destination: Relative(23), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(17) }, JumpIf { condition: Relative(22), location: 2693 }, Jump { location: 2697 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(24), rhs: Direct(32844) }, JumpIf { condition: Relative(17), location: 2700 }, Jump { location: 2696 }, Jump { location: 2697 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 2635 }, Store { destination_pointer: Relative(6), source: Direct(32841) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Jump { location: 2703 }, Load { destination: Relative(3), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 2707 }, Call { location: 11732 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(9) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Const { destination: Relative(9), bit_size: Field, value: 3 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(3) }, Mov { destination: Relative(26), source: Direct(32844) }, Mov { destination: Relative(27), source: Relative(9) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(15) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(15), bit_size: Field, value: 7 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(3) }, Mov { destination: Relative(26), source: Relative(2) }, Mov { destination: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(17) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Relative(6) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(3) }, Mov { destination: Relative(26), source: Relative(14) }, Mov { destination: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(17) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(3) }, Load { destination: Relative(23), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 2777 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(23) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(27) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(25) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(26) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32838) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(23) }, Load { destination: Relative(23), source_pointer: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2803 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(23) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2807 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(23), location: 10388 }, Jump { location: 2810 }, Load { destination: Relative(17), source_pointer: Relative(25) }, Load { destination: Relative(19), source_pointer: Relative(26) }, Load { destination: Relative(23), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 2818 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 80 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Direct(32849) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32860) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32862) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32866) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32861) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32865) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32862) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32855) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32867) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32851) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32858) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32853) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32860) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32861) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32865) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32864) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32864) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32857) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32862) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32866) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32853) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32857) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32851) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32867) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32852) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32861) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32868) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32864) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32855) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32850) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32861) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32869) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32865) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32858) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32860) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32864) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32847) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32852) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32866) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32865) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32856) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32862) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32865) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32846) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32868) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(10) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(11) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32864) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32850) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32859) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32854) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32861) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32869) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32848) }, Load { destination: Relative(25), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 2989 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(22) }, JumpIf { condition: Relative(25), location: 3015 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, Mov { destination: Relative(29), source: Relative(28) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(30) }, Mov { destination: Direct(32772), source: Relative(29) }, Mov { destination: Direct(32773), source: Relative(31) }, Call { location: 23 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(30) }, Store { destination_pointer: Relative(29), source: Direct(32844) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(22) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(17) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(28), size: Relative(27) } }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 3021 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, JumpIf { condition: Relative(22), location: 3027 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(27) } }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Load { destination: Relative(17), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32845) }, Load { destination: Relative(22), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Load { destination: Relative(27), source_pointer: Relative(28) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(29), source: Relative(17) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(22) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(27) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 3050 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(19) }, Load { destination: Relative(27), source_pointer: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 3061 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(27) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(30) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(27) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(27) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(29) }, Mov { destination: Relative(29), source: Relative(27) }, Store { destination_pointer: Relative(29), source: Direct(32838) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32843) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32842) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3087 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(19), location: 3090 }, Jump { location: 3287 }, Load { destination: Relative(19), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 3098 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Direct(32838) }, JumpIf { condition: Relative(22), location: 3286 }, Jump { location: 3103 }, Load { destination: Relative(19), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 3111 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(19) }, JumpIf { condition: Relative(24), location: 3116 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(26), source: Direct(32773) }, Mov { destination: Relative(31), source: Direct(32774) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Load { destination: Relative(30), source_pointer: Relative(31) }, Load { destination: Relative(19), source_pointer: Relative(26) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 3131 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(19) }, Store { destination_pointer: Relative(27), source: Relative(24) }, Store { destination_pointer: Relative(29), source: Relative(26) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, JumpIf { condition: Relative(24), location: 3139 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(24), location: 3284 }, Jump { location: 3143 }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(28) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, Mov { destination: Relative(22), source: Relative(28) }, Jump { location: 3149 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(30) }, JumpIf { condition: Relative(26), location: 3234 }, Jump { location: 3152 }, Load { destination: Relative(22), source_pointer: Relative(17) }, Load { destination: Relative(26), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(26), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 3157 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(26) }, Load { destination: Relative(24), source_pointer: Relative(32) }, JumpIf { condition: Relative(25), location: 3162 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(32) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(26) }, Store { destination_pointer: Relative(33), source: Relative(25) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(30) }, Store { destination_pointer: Relative(32), source: Relative(24) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(27) }, Load { destination: Relative(24), source_pointer: Relative(29) }, Load { destination: Relative(25), source_pointer: Relative(24) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(25) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 3188 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, JumpIf { condition: Relative(32), location: 3194 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(33), source: Direct(32773) }, Mov { destination: Relative(34), source: Direct(32774) }, Store { destination_pointer: Relative(34), source: Relative(25) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(30) }, Store { destination_pointer: Relative(27), source: Relative(32) }, Store { destination_pointer: Relative(29), source: Relative(33) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(26) }, JumpIf { condition: Relative(22), location: 3208 }, Jump { location: 3232 }, Load { destination: Relative(22), source_pointer: Relative(33) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 3214 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(25), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(26) }, JumpIf { condition: Relative(25), location: 3220 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(26), source: Direct(32773) }, Mov { destination: Relative(30), source: Direct(32774) }, Store { destination_pointer: Relative(30), source: Relative(28) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(22) }, Store { destination_pointer: Relative(27), source: Relative(25) }, Store { destination_pointer: Relative(29), source: Relative(26) }, Jump { location: 3232 }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 3087 }, Load { destination: Relative(26), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, JumpIf { condition: Relative(31), location: 3238 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(22) }, Load { destination: Relative(31), source_pointer: Relative(33) }, JumpIf { condition: Relative(25), location: 3243 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryFieldOp { destination: Relative(26), op: LessThan, lhs: Relative(31), rhs: Relative(32) }, JumpIf { condition: Relative(26), location: 3249 }, Jump { location: 3281 }, Load { destination: Relative(26), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, JumpIf { condition: Relative(32), location: 3254 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(22) }, Load { destination: Relative(33), source_pointer: Relative(35) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(22) }, Store { destination_pointer: Relative(35), source: Relative(32) }, Store { destination_pointer: Relative(17), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(26) }, JumpIf { condition: Relative(32), location: 3279 }, Call { location: 11673 }, Store { destination_pointer: Relative(24), source: Relative(26) }, Jump { location: 3281 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Mov { destination: Relative(22), source: Relative(26) }, Jump { location: 3149 }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 3087 }, Jump { location: 3287 }, Load { destination: Relative(19), source_pointer: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(7) }, Load { destination: Relative(24), source_pointer: Relative(3) }, Load { destination: Relative(25), source_pointer: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 3297 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(28) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32838) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(25) }, Load { destination: Relative(25), source_pointer: Relative(22) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(25) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 3323 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3327 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(25), location: 10344 }, Jump { location: 3330 }, Load { destination: Relative(17), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(28) }, Load { destination: Relative(25), source_pointer: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 3338 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Direct(32849) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32860) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32866) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32855) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32867) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32851) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32858) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32853) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32860) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32857) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32866) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32853) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32857) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32851) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32867) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32852) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32868) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32855) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32850) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32869) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32858) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32860) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32847) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32852) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32866) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32856) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32868) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32867) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32851) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32866) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32850) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32859) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32869) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32848) }, Load { destination: Relative(27), source_pointer: Relative(22) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 3513 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(24) }, JumpIf { condition: Relative(27), location: 3539 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, Mov { destination: Relative(31), source: Relative(30) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(32) }, Mov { destination: Direct(32772), source: Relative(31) }, Mov { destination: Direct(32773), source: Relative(33) }, Call { location: 23 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(32) }, Store { destination_pointer: Relative(31), source: Direct(32844) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(24) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(17) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(30), size: Relative(29) } }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 3545 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 3551 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(29) } }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, Load { destination: Relative(17), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32845) }, Load { destination: Relative(24), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Load { destination: Relative(29), source_pointer: Relative(30) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(31), source: Relative(17) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(24) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(29) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(17) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 3574 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Load { destination: Relative(29), source_pointer: Relative(22) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(29) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 3585 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(29) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(32) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(29) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(29) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, Mov { destination: Relative(31), source: Relative(29) }, Store { destination_pointer: Relative(31), source: Direct(32838) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32843) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32842) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3611 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(22), location: 3614 }, Jump { location: 3811 }, Load { destination: Relative(22), source_pointer: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(31) }, Load { destination: Relative(26), source_pointer: Relative(24) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 3622 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(26) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Direct(32838) }, JumpIf { condition: Relative(24), location: 3810 }, Jump { location: 3627 }, Load { destination: Relative(22), source_pointer: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(31) }, Load { destination: Relative(26), source_pointer: Relative(24) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 3635 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 3640 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(28), source: Direct(32773) }, Mov { destination: Relative(33), source: Direct(32774) }, Load { destination: Relative(30), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Load { destination: Relative(32), source_pointer: Relative(33) }, Load { destination: Relative(22), source_pointer: Relative(28) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 3655 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, Store { destination_pointer: Relative(29), source: Relative(26) }, Store { destination_pointer: Relative(31), source: Relative(28) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 3663 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(32), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(26), location: 3808 }, Jump { location: 3667 }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(30) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(32), rhs: Direct(32836) }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 3673 }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(32) }, JumpIf { condition: Relative(28), location: 3758 }, Jump { location: 3676 }, Load { destination: Relative(24), source_pointer: Relative(17) }, Load { destination: Relative(28), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Direct(32836) }, JumpIf { condition: Relative(26), location: 3681 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(28) }, Load { destination: Relative(26), source_pointer: Relative(34) }, JumpIf { condition: Relative(27), location: 3686 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Load { destination: Relative(27), source_pointer: Relative(34) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(33), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(28) }, Store { destination_pointer: Relative(35), source: Relative(27) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(24), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, Store { destination_pointer: Relative(34), source: Relative(26) }, Store { destination_pointer: Relative(17), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(29) }, Load { destination: Relative(26), source_pointer: Relative(31) }, Load { destination: Relative(27), source_pointer: Relative(26) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(27) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 3712 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, JumpIf { condition: Relative(34), location: 3718 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(35), source: Direct(32773) }, Mov { destination: Relative(36), source: Direct(32774) }, Store { destination_pointer: Relative(36), source: Relative(27) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, Store { destination_pointer: Relative(29), source: Relative(34) }, Store { destination_pointer: Relative(31), source: Relative(35) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(28) }, JumpIf { condition: Relative(24), location: 3732 }, Jump { location: 3756 }, Load { destination: Relative(24), source_pointer: Relative(35) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 3738 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(27), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(28) }, JumpIf { condition: Relative(27), location: 3744 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(28), source: Direct(32773) }, Mov { destination: Relative(32), source: Direct(32774) }, Store { destination_pointer: Relative(32), source: Relative(30) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, Store { destination_pointer: Relative(29), source: Relative(27) }, Store { destination_pointer: Relative(31), source: Relative(28) }, Jump { location: 3756 }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 3611 }, Load { destination: Relative(28), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Direct(32836) }, JumpIf { condition: Relative(33), location: 3762 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(24) }, Load { destination: Relative(33), source_pointer: Relative(35) }, JumpIf { condition: Relative(27), location: 3767 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryFieldOp { destination: Relative(28), op: LessThan, lhs: Relative(33), rhs: Relative(34) }, JumpIf { condition: Relative(28), location: 3773 }, Jump { location: 3805 }, Load { destination: Relative(28), source_pointer: Relative(17) }, Load { destination: Relative(33), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Direct(32836) }, JumpIf { condition: Relative(34), location: 3778 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(33) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(24) }, Load { destination: Relative(35), source_pointer: Relative(37) }, Mov { destination: Direct(32771), source: Relative(28) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Store { destination_pointer: Relative(38), source: Relative(35) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(28), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(24) }, Store { destination_pointer: Relative(37), source: Relative(34) }, Store { destination_pointer: Relative(17), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Relative(33), rhs: Relative(28) }, JumpIf { condition: Relative(34), location: 3803 }, Call { location: 11673 }, Store { destination_pointer: Relative(26), source: Relative(28) }, Jump { location: 3805 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Relative(24), source: Relative(28) }, Jump { location: 3673 }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 3611 }, Jump { location: 3811 }, Load { destination: Relative(22), source_pointer: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(27) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(26) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32838) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(6) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 3839 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3843 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(3), location: 10293 }, Jump { location: 3846 }, Load { destination: Relative(3), source_pointer: Relative(24) }, Load { destination: Relative(6), source_pointer: Relative(26) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(17) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 3854 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Direct(32849) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32860) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32862) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32866) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32862) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32855) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32867) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32851) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32858) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32853) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32860) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32864) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32864) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32857) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32862) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32866) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32853) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32857) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32851) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32867) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32852) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32868) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32864) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32855) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32850) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32869) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32858) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32860) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32864) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32847) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32852) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32866) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32856) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32862) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32846) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32868) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32865) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32863) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32858) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32864) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32850) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32859) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32854) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32861) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32869) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32848) }, Load { destination: Relative(26), source_pointer: Relative(6) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 4031 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, JumpIf { condition: Relative(26), location: 4057 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(29), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, Mov { destination: Relative(30), source: Relative(29) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(31) }, Mov { destination: Direct(32772), source: Relative(30) }, Mov { destination: Direct(32773), source: Relative(32) }, Call { location: 23 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(31) }, Store { destination_pointer: Relative(30), source: Direct(32844) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(7) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(3) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(29), size: Relative(28) } }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(7) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 4063 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 4069 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(7) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4091 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(3), location: 10264 }, Jump { location: 4094 }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(3) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 4101 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Load { destination: Relative(24), source_pointer: Relative(3) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 4112 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(24) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(28) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(27) }, Mov { destination: Relative(27), source: Relative(24) }, Store { destination_pointer: Relative(27), source: Direct(32838) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32843) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32842) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4138 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(3), location: 4141 }, Jump { location: 4386 }, Load { destination: Relative(3), source_pointer: Relative(24) }, Load { destination: Relative(7), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(7) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 4149 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(26) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, JumpIf { condition: Relative(7), location: 4385 }, Jump { location: 4154 }, Load { destination: Relative(3), source_pointer: Relative(24) }, Load { destination: Relative(7), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(7) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 4162 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(3) }, JumpIf { condition: Relative(26), location: 4167 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(29), source: Direct(32773) }, Mov { destination: Relative(32), source: Direct(32774) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Load { destination: Relative(31), source_pointer: Relative(32) }, Load { destination: Relative(3), source_pointer: Relative(29) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 4182 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(3) }, Store { destination_pointer: Relative(24), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(29) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(3) }, JumpIf { condition: Relative(26), location: 4190 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(26), location: 4383 }, Jump { location: 4194 }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(30) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Direct(32843) }, Mov { destination: Relative(7), source: Relative(30) }, Jump { location: 4201 }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(31) }, JumpIf { condition: Relative(32), location: 4309 }, Jump { location: 4204 }, Load { destination: Relative(7), source_pointer: Relative(6) }, Load { destination: Relative(32), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(32), rhs: Direct(32836) }, JumpIf { condition: Relative(26), location: 4209 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(32), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(37) }, JumpIf { condition: Relative(28), location: 4219 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(29) }, Load { destination: Relative(28), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(39) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(26) }, Store { destination_pointer: Relative(40), source: Relative(28) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(34) }, Store { destination_pointer: Relative(28), source: Relative(37) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(29) }, Store { destination_pointer: Relative(34), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(36) }, Store { destination_pointer: Relative(29), source: Relative(35) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(26) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4263 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(33), op: LessThanEquals, bit_size: U32, lhs: Relative(32), rhs: Relative(28) }, JumpIf { condition: Relative(33), location: 4269 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(34), source: Direct(32773) }, Mov { destination: Relative(35), source: Direct(32774) }, Store { destination_pointer: Relative(35), source: Relative(28) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(31) }, Store { destination_pointer: Relative(24), source: Relative(33) }, Store { destination_pointer: Relative(27), source: Relative(34) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(32) }, JumpIf { condition: Relative(7), location: 4283 }, Jump { location: 4307 }, Load { destination: Relative(7), source_pointer: Relative(34) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(7) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 4289 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U32, lhs: Relative(32), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(32) }, JumpIf { condition: Relative(28), location: 4295 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(29), source: Direct(32773) }, Mov { destination: Relative(31), source: Direct(32774) }, Store { destination_pointer: Relative(31), source: Relative(30) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Store { destination_pointer: Relative(24), source: Relative(28) }, Store { destination_pointer: Relative(27), source: Relative(29) }, Jump { location: 4307 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 4138 }, Load { destination: Relative(32), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Direct(32836) }, JumpIf { condition: Relative(33), location: 4313 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U32, lhs: Relative(7), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(33) }, Load { destination: Relative(34), source_pointer: Relative(36) }, JumpIf { condition: Relative(28), location: 4319 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(29) }, Load { destination: Relative(35), source_pointer: Relative(37) }, BinaryFieldOp { destination: Relative(32), op: LessThan, lhs: Relative(34), rhs: Relative(35) }, JumpIf { condition: Relative(32), location: 4325 }, Jump { location: 4380 }, Load { destination: Relative(32), source_pointer: Relative(6) }, Load { destination: Relative(34), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Direct(32836) }, JumpIf { condition: Relative(35), location: 4330 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(34), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, Load { destination: Relative(36), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(37) }, Load { destination: Relative(38), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(33) }, Load { destination: Relative(39), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(40) }, Load { destination: Relative(41), source_pointer: Relative(43) }, Mov { destination: Direct(32771), source: Relative(32) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(35) }, Store { destination_pointer: Relative(44), source: Relative(39) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(37) }, Store { destination_pointer: Relative(39), source: Relative(41) }, Mov { destination: Direct(32771), source: Relative(32) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Store { destination_pointer: Relative(39), source: Relative(36) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(40) }, Store { destination_pointer: Relative(36), source: Relative(38) }, Store { destination_pointer: Relative(6), source: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(33), op: LessThanEquals, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, JumpIf { condition: Relative(33), location: 4378 }, Call { location: 11673 }, Store { destination_pointer: Relative(26), source: Relative(32) }, Jump { location: 4380 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32842) }, Mov { destination: Relative(7), source: Relative(32) }, Jump { location: 4201 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 4138 }, Jump { location: 4386 }, Load { destination: Relative(3), source_pointer: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(7) }, Store { destination_pointer: Relative(24), source: Direct(32844) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(14) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32841) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 4407 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4411 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 10251 }, Jump { location: 4414 }, Load { destination: Relative(6), source_pointer: Relative(7) }, JumpIf { condition: Relative(6), location: 4417 }, Call { location: 11850 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(7) }, Store { destination_pointer: Relative(19), source: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(15) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32841) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4437 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4441 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 10238 }, Jump { location: 4444 }, Load { destination: Relative(6), source_pointer: Relative(7) }, JumpIf { condition: Relative(6), location: 4447 }, Call { location: 11853 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(7) }, Store { destination_pointer: Relative(19), source: Direct(32844) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(15) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32841) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 4473 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4477 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 10215 }, Jump { location: 4480 }, Load { destination: Relative(3), source_pointer: Relative(7) }, JumpIf { condition: Relative(3), location: 4483 }, Call { location: 11856 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(19) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Direct(32844) }, Mov { destination: Relative(31), source: Relative(9) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(19) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(2) }, Mov { destination: Relative(31), source: Relative(15) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(19) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(14) }, Mov { destination: Relative(31), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(19) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(14), source_pointer: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4551 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(28) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(26) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32838) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(22) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 4577 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4581 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(22), location: 10164 }, Jump { location: 4584 }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4592 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, JumpIf { condition: Relative(22), location: 4618 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(27), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, Mov { destination: Relative(28), source: Relative(27) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(29) }, Mov { destination: Direct(32772), source: Relative(28) }, Mov { destination: Direct(32773), source: Relative(30) }, Call { location: 23 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(29) }, Store { destination_pointer: Relative(28), source: Direct(32844) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(27), size: Relative(26) } }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(22) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, Mov { destination: Relative(26), source: Relative(22) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32842) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32838) }, Load { destination: Relative(27), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 4653 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(27) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4657 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(24), location: 10138 }, Jump { location: 4660 }, Load { destination: Relative(14), source_pointer: Relative(22) }, Load { destination: Relative(16), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Store { destination_pointer: Relative(6), source: Relative(14) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Store { destination_pointer: Relative(3), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 4672 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4676 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 10065 }, Jump { location: 4679 }, Load { destination: Relative(14), source_pointer: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4688 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(28) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(26) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32838) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(22) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 4714 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4718 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(22), location: 10021 }, Jump { location: 4721 }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4729 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, JumpIf { condition: Relative(22), location: 4755 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(27), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, Mov { destination: Relative(28), source: Relative(27) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(29) }, Mov { destination: Direct(32772), source: Relative(28) }, Mov { destination: Direct(32773), source: Relative(30) }, Call { location: 23 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(29) }, Store { destination_pointer: Relative(28), source: Direct(32844) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(27), size: Relative(26) } }, Load { destination: Relative(19), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4761 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 4767 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(26) } }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32845) }, Load { destination: Relative(19), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Load { destination: Relative(26), source_pointer: Relative(27) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(14) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 4790 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Load { destination: Relative(26), source_pointer: Relative(16) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 4801 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(26) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(29) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(26) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(28) }, Mov { destination: Relative(28), source: Relative(26) }, Store { destination_pointer: Relative(28), source: Direct(32838) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32843) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32842) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4827 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(16), location: 4830 }, Jump { location: 5027 }, Load { destination: Relative(16), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 4838 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Direct(32838) }, JumpIf { condition: Relative(19), location: 5026 }, Jump { location: 4843 }, Load { destination: Relative(16), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 4851 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(16) }, JumpIf { condition: Relative(22), location: 4856 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(27), source: Direct(32773) }, Mov { destination: Relative(31), source: Direct(32774) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Load { destination: Relative(30), source_pointer: Relative(31) }, Load { destination: Relative(16), source_pointer: Relative(27) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 4871 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, Store { destination_pointer: Relative(26), source: Relative(22) }, Store { destination_pointer: Relative(28), source: Relative(27) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(29), rhs: Relative(16) }, JumpIf { condition: Relative(22), location: 4879 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(22), location: 5024 }, Jump { location: 4883 }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(29) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, Mov { destination: Relative(19), source: Relative(29) }, Jump { location: 4889 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, JumpIf { condition: Relative(27), location: 4974 }, Jump { location: 4892 }, Load { destination: Relative(19), source_pointer: Relative(14) }, Load { destination: Relative(27), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, JumpIf { condition: Relative(22), location: 4897 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(32) }, JumpIf { condition: Relative(24), location: 4902 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Load { destination: Relative(24), source_pointer: Relative(32) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(27) }, Store { destination_pointer: Relative(33), source: Relative(24) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(30) }, Store { destination_pointer: Relative(32), source: Relative(22) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(26) }, Load { destination: Relative(22), source_pointer: Relative(28) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(24) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 4928 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, JumpIf { condition: Relative(32), location: 4934 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(33), source: Direct(32773) }, Mov { destination: Relative(34), source: Direct(32774) }, Store { destination_pointer: Relative(34), source: Relative(24) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(30) }, Store { destination_pointer: Relative(26), source: Relative(32) }, Store { destination_pointer: Relative(28), source: Relative(33) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(27) }, JumpIf { condition: Relative(19), location: 4948 }, Jump { location: 4972 }, Load { destination: Relative(19), source_pointer: Relative(33) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 4954 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(27) }, JumpIf { condition: Relative(24), location: 4960 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(27), source: Direct(32773) }, Mov { destination: Relative(30), source: Direct(32774) }, Store { destination_pointer: Relative(30), source: Relative(29) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(19) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Jump { location: 4972 }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 4827 }, Load { destination: Relative(27), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, JumpIf { condition: Relative(31), location: 4978 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(19) }, Load { destination: Relative(31), source_pointer: Relative(33) }, JumpIf { condition: Relative(24), location: 4983 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryFieldOp { destination: Relative(27), op: LessThan, lhs: Relative(31), rhs: Relative(32) }, JumpIf { condition: Relative(27), location: 4989 }, Jump { location: 5021 }, Load { destination: Relative(27), source_pointer: Relative(14) }, Load { destination: Relative(31), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, JumpIf { condition: Relative(32), location: 4994 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(19) }, Load { destination: Relative(33), source_pointer: Relative(35) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(19) }, Store { destination_pointer: Relative(35), source: Relative(32) }, Store { destination_pointer: Relative(14), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, JumpIf { condition: Relative(32), location: 5019 }, Call { location: 11673 }, Store { destination_pointer: Relative(22), source: Relative(27) }, Jump { location: 5021 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Mov { destination: Relative(19), source: Relative(27) }, Jump { location: 4889 }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 4827 }, Jump { location: 5027 }, Load { destination: Relative(16), source_pointer: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(3) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5037 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(28) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32838) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(24) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 5063 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5067 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(24), location: 9977 }, Jump { location: 5070 }, Load { destination: Relative(14), source_pointer: Relative(27) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5078 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 5104 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, Mov { destination: Relative(29), source: Relative(28) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(30) }, Mov { destination: Direct(32772), source: Relative(29) }, Mov { destination: Direct(32773), source: Relative(31) }, Call { location: 23 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(30) }, Store { destination_pointer: Relative(29), source: Direct(32844) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(22) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(14) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(28), size: Relative(27) } }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5110 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Direct(32836) }, JumpIf { condition: Relative(22), location: 5116 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(27) } }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Load { destination: Relative(14), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32845) }, Load { destination: Relative(22), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Load { destination: Relative(27), source_pointer: Relative(28) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(19) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(14) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 5139 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(4) }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 5150 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(28) }, Mov { destination: Relative(28), source: Relative(22) }, Store { destination_pointer: Relative(28), source: Direct(32838) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32843) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32842) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(4) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5176 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(4), location: 5179 }, Jump { location: 5376 }, Load { destination: Relative(4), source_pointer: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5187 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Direct(32838) }, JumpIf { condition: Relative(19), location: 5375 }, Jump { location: 5192 }, Load { destination: Relative(4), source_pointer: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(28) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5200 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(4) }, JumpIf { condition: Relative(24), location: 5205 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(27), source: Direct(32773) }, Mov { destination: Relative(31), source: Direct(32774) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Load { destination: Relative(30), source_pointer: Relative(31) }, Load { destination: Relative(4), source_pointer: Relative(27) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 5220 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(4) }, Store { destination_pointer: Relative(22), source: Relative(24) }, Store { destination_pointer: Relative(28), source: Relative(27) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(29), rhs: Relative(4) }, JumpIf { condition: Relative(24), location: 5228 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(24), location: 5373 }, Jump { location: 5232 }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(29) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, Mov { destination: Relative(19), source: Relative(29) }, Jump { location: 5238 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, JumpIf { condition: Relative(27), location: 5323 }, Jump { location: 5241 }, Load { destination: Relative(19), source_pointer: Relative(14) }, Load { destination: Relative(27), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 5246 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, Load { destination: Relative(24), source_pointer: Relative(32) }, JumpIf { condition: Relative(26), location: 5251 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Load { destination: Relative(26), source_pointer: Relative(32) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(27) }, Store { destination_pointer: Relative(33), source: Relative(26) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(30) }, Store { destination_pointer: Relative(32), source: Relative(24) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(28) }, Load { destination: Relative(26), source_pointer: Relative(24) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(26) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 5277 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, JumpIf { condition: Relative(32), location: 5283 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(33), source: Direct(32773) }, Mov { destination: Relative(34), source: Direct(32774) }, Store { destination_pointer: Relative(34), source: Relative(26) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(30) }, Store { destination_pointer: Relative(22), source: Relative(32) }, Store { destination_pointer: Relative(28), source: Relative(33) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(27) }, JumpIf { condition: Relative(19), location: 5297 }, Jump { location: 5321 }, Load { destination: Relative(19), source_pointer: Relative(33) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 5303 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(27) }, JumpIf { condition: Relative(26), location: 5309 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(27), source: Direct(32773) }, Mov { destination: Relative(30), source: Direct(32774) }, Store { destination_pointer: Relative(30), source: Relative(29) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(26) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Jump { location: 5321 }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 5176 }, Load { destination: Relative(27), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, JumpIf { condition: Relative(31), location: 5327 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(19) }, Load { destination: Relative(31), source_pointer: Relative(33) }, JumpIf { condition: Relative(26), location: 5332 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryFieldOp { destination: Relative(27), op: LessThan, lhs: Relative(31), rhs: Relative(32) }, JumpIf { condition: Relative(27), location: 5338 }, Jump { location: 5370 }, Load { destination: Relative(27), source_pointer: Relative(14) }, Load { destination: Relative(31), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, JumpIf { condition: Relative(32), location: 5343 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(19) }, Load { destination: Relative(33), source_pointer: Relative(35) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(19) }, Store { destination_pointer: Relative(35), source: Relative(32) }, Store { destination_pointer: Relative(14), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(32), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, JumpIf { condition: Relative(32), location: 5368 }, Call { location: 11673 }, Store { destination_pointer: Relative(24), source: Relative(27) }, Jump { location: 5370 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Mov { destination: Relative(19), source: Relative(27) }, Jump { location: 5238 }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 5176 }, Jump { location: 5376 }, Load { destination: Relative(4), source_pointer: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(14) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 5383 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Const { destination: Relative(14), bit_size: Field, value: 6 }, Const { destination: Relative(22), bit_size: Field, value: 15 }, Const { destination: Relative(24), bit_size: Field, value: 33 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(24) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, Load { destination: Relative(27), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 5408 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(27) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5412 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 9964 }, Jump { location: 5415 }, Load { destination: Relative(19), source_pointer: Relative(24) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 71 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32858) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(12) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32863) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32863) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(12) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32858) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32863) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32851) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32865) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32858) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32861) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32862) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32855) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(10) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(11) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(20) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32846) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32868) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(10) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32854) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(11) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32864) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32869) }, JumpIf { condition: Relative(19), location: 5527 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 44 }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 44 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, Mov { destination: Relative(27), source: Relative(24) }, IndirectConst { destination_pointer: Relative(27), bit_size: Integer(U64), value: 2386996775688025706 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 39 }, Mov { destination: Direct(32771), source: Relative(28) }, Mov { destination: Direct(32772), source: Relative(27) }, Mov { destination: Direct(32773), source: Relative(29) }, Call { location: 23 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 39 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(28) }, Store { destination_pointer: Relative(27), source: Relative(13) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, Mov { destination: Direct(32771), source: Relative(28) }, Mov { destination: Direct(32772), source: Relative(27) }, Mov { destination: Direct(32773), source: Relative(29) }, Call { location: 23 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(28) }, Trap { revert_data: HeapVector { pointer: Relative(24), size: Relative(12) } }, Const { destination: Relative(12), bit_size: Field, value: 35 }, Const { destination: Relative(16), bit_size: Field, value: 65 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(24) }, Store { destination_pointer: Relative(26), source: Relative(22) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(12) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(16) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 5549 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5553 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(16), location: 9951 }, Jump { location: 5556 }, Load { destination: Relative(4), source_pointer: Relative(12) }, JumpIf { condition: Relative(4), location: 5559 }, Call { location: 11853 }, Load { destination: Relative(4), source_pointer: Relative(6) }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(3) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 5568 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(27) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32838) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 5594 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5598 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(19), location: 9900 }, Jump { location: 5601 }, Load { destination: Relative(4), source_pointer: Relative(24) }, Load { destination: Relative(12), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 5609 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(16) }, JumpIf { condition: Relative(19), location: 5635 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, Mov { destination: Relative(27), source: Relative(26) }, IndirectConst { destination_pointer: Relative(27), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(28) }, Mov { destination: Direct(32772), source: Relative(27) }, Mov { destination: Direct(32773), source: Relative(29) }, Call { location: 23 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(28) }, Store { destination_pointer: Relative(27), source: Direct(32844) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(4) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(26), size: Relative(24) } }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(24) }, Mov { destination: Relative(24), source: Relative(19) }, Store { destination_pointer: Relative(24), source: Direct(32837) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32837) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32842) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32838) }, Load { destination: Relative(26), source_pointer: Relative(12) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 5670 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(26) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5674 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 9873 }, Jump { location: 5677 }, Load { destination: Relative(4), source_pointer: Relative(19) }, Load { destination: Relative(12), source_pointer: Relative(24) }, Load { destination: Relative(16), source_pointer: Relative(3) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Store { destination_pointer: Relative(7), source: Relative(12) }, Store { destination_pointer: Relative(3), source: Relative(16) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(19) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32838) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 5707 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5711 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 9822 }, Jump { location: 5714 }, Load { destination: Relative(3), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 5722 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(16) }, JumpIf { condition: Relative(6), location: 5748 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, Mov { destination: Relative(22), source: Relative(19) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(24) }, Mov { destination: Direct(32772), source: Relative(22) }, Mov { destination: Direct(32773), source: Relative(26) }, Call { location: 23 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, Store { destination_pointer: Relative(22), source: Direct(32844) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(19), size: Relative(12) } }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(6) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 5754 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(6), location: 5760 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(6) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5782 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(3), location: 9793 }, Jump { location: 5785 }, Load { destination: Relative(3), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 5792 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 5803 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(19) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(16) }, Mov { destination: Relative(16), source: Relative(7) }, Store { destination_pointer: Relative(16), source: Direct(32838) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32843) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32842) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(3) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5829 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(3), location: 5832 }, Jump { location: 6077 }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(16) }, Load { destination: Relative(12), source_pointer: Relative(6) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(12) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 5840 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(12) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, JumpIf { condition: Relative(6), location: 6076 }, Jump { location: 5845 }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(16) }, Load { destination: Relative(12), source_pointer: Relative(6) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(12) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 5853 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 5858 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11735 }, Mov { destination: Relative(22), source: Direct(32773) }, Mov { destination: Relative(27), source: Direct(32774) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Load { destination: Relative(26), source_pointer: Relative(27) }, Load { destination: Relative(3), source_pointer: Relative(22) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 5873 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(3) }, Store { destination_pointer: Relative(7), source: Relative(12) }, Store { destination_pointer: Relative(16), source: Relative(22) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 5881 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(26), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, JumpIf { condition: Relative(12), location: 6074 }, Jump { location: 5885 }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(26), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Direct(32843) }, Mov { destination: Relative(6), source: Relative(24) }, Jump { location: 5892 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(26) }, JumpIf { condition: Relative(27), location: 6000 }, Jump { location: 5895 }, Load { destination: Relative(6), source_pointer: Relative(4) }, Load { destination: Relative(27), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 5900 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(27), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(12) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(30), source_pointer: Relative(32) }, JumpIf { condition: Relative(19), location: 5910 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(33), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(12) }, Store { destination_pointer: Relative(35), source: Relative(19) }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(29) }, Store { destination_pointer: Relative(19), source: Relative(32) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(22) }, Store { destination_pointer: Relative(29), source: Relative(28) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(31) }, Store { destination_pointer: Relative(22), source: Relative(30) }, Store { destination_pointer: Relative(4), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 5954 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, JumpIf { condition: Relative(28), location: 5960 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(29), source: Direct(32773) }, Mov { destination: Relative(30), source: Direct(32774) }, Store { destination_pointer: Relative(30), source: Relative(19) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(26) }, Store { destination_pointer: Relative(7), source: Relative(28) }, Store { destination_pointer: Relative(16), source: Relative(29) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(27) }, JumpIf { condition: Relative(6), location: 5974 }, Jump { location: 5998 }, Load { destination: Relative(6), source_pointer: Relative(29) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(6) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 5980 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(27) }, JumpIf { condition: Relative(19), location: 5986 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(29) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(22), source: Direct(32773) }, Mov { destination: Relative(26), source: Direct(32774) }, Store { destination_pointer: Relative(26), source: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Relative(19) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Jump { location: 5998 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 5829 }, Load { destination: Relative(27), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, JumpIf { condition: Relative(28), location: 6004 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, JumpIf { condition: Relative(19), location: 6010 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryFieldOp { destination: Relative(27), op: LessThan, lhs: Relative(29), rhs: Relative(30) }, JumpIf { condition: Relative(27), location: 6016 }, Jump { location: 6071 }, Load { destination: Relative(27), source_pointer: Relative(4) }, Load { destination: Relative(29), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(29), rhs: Direct(32836) }, JumpIf { condition: Relative(30), location: 6021 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(29), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(30) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(28) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, Load { destination: Relative(36), source_pointer: Relative(38) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(30) }, Store { destination_pointer: Relative(39), source: Relative(34) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(32) }, Store { destination_pointer: Relative(34), source: Relative(36) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(28) }, Store { destination_pointer: Relative(34), source: Relative(31) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(35) }, Store { destination_pointer: Relative(31), source: Relative(33) }, Store { destination_pointer: Relative(4), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 6069 }, Call { location: 11673 }, Store { destination_pointer: Relative(12), source: Relative(27) }, Jump { location: 6071 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, Mov { destination: Relative(6), source: Relative(27) }, Jump { location: 5892 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 5829 }, Jump { location: 6077 }, Load { destination: Relative(3), source_pointer: Relative(4) }, Const { destination: Relative(4), bit_size: Field, value: 12 }, Const { destination: Relative(6), bit_size: Field, value: 30 }, Const { destination: Relative(7), bit_size: Field, value: 70 }, Const { destination: Relative(12), bit_size: Field, value: 66 }, Const { destination: Relative(16), bit_size: Field, value: 130 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(12) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(16) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32841) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 6109 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6113 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 9770 }, Jump { location: 6116 }, Load { destination: Relative(3), source_pointer: Relative(6) }, JumpIf { condition: Relative(3), location: 6119 }, Call { location: 11856 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(12) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(6) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32840) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Const { destination: Relative(12), bit_size: Field, value: 42 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(4) }, Mov { destination: Relative(31), source: Relative(12) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(16) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(19), source_pointer: Relative(3) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6167 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, JumpIf { condition: Relative(22), location: 6173 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(26) } }, Load { destination: Relative(19), source_pointer: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 6180 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, Load { destination: Relative(28), source_pointer: Relative(16) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6194 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(28) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32870) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(32), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Relative(4) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32840) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32840) }, Store { destination_pointer: Relative(30), source: Relative(34) }, Store { destination_pointer: Relative(31), source: Relative(28) }, Store { destination_pointer: Relative(32), source: Direct(32842) }, Store { destination_pointer: Relative(33), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6234 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 9740 }, Jump { location: 6237 }, Load { destination: Relative(24), source_pointer: Relative(30) }, Load { destination: Relative(26), source_pointer: Relative(31) }, Load { destination: Relative(28), source_pointer: Relative(32) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(29) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 6246 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(29) }, Mov { destination: Relative(29), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(35), size: Relative(36) }, output: HeapArray { pointer: Relative(37), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(30), source: Relative(24) }, Store { destination_pointer: Relative(31), source: Relative(29) }, Store { destination_pointer: Relative(32), source: Relative(28) }, Store { destination_pointer: Relative(33), source: Direct(32841) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, Load { destination: Relative(24), source_pointer: Relative(26) }, Cast { destination: Relative(28), source: Relative(24), bit_size: Integer(U32) }, Cast { destination: Relative(26), source: Relative(28), bit_size: Field }, Cast { destination: Relative(24), source: Relative(26), bit_size: Integer(U32) }, Load { destination: Relative(26), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 6271 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(26) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6275 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, JumpIf { condition: Relative(26), location: 6278 }, Jump { location: 6343 }, Load { destination: Relative(26), source_pointer: Relative(16) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 6284 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, JumpIf { condition: Relative(29), location: 6294 }, BinaryIntOp { destination: Relative(32), op: Div, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(1) }, JumpIf { condition: Relative(31), location: 6294 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(26) }, BinaryIntOp { destination: Relative(30), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(29) }, JumpIf { condition: Relative(30), location: 6298 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(29), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(30), op: LessThanEquals, bit_size: U32, lhs: Relative(24), rhs: Relative(29) }, JumpIf { condition: Relative(30), location: 6303 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(29), rhs: Relative(19) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Relative(19) }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U32, lhs: Relative(29), rhs: Relative(31) }, BinaryIntOp { destination: Relative(29), op: LessThan, bit_size: U32, lhs: Relative(26), rhs: Relative(19) }, JumpIf { condition: Relative(29), location: 6309 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Direct(32845) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(29) }, Load { destination: Relative(26), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32842) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(30) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32843) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32836) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(29), source_pointer: Relative(34) }, Not { destination: Relative(30), source: Relative(29), bit_size: U1 }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U1, lhs: Relative(30), rhs: Relative(26) }, JumpIf { condition: Relative(29), location: 6333 }, Jump { location: 6337 }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(31), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 6340 }, Jump { location: 6336 }, Jump { location: 6337 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(26) }, Jump { location: 6275 }, Store { destination_pointer: Relative(22), source: Direct(32841) }, Store { destination_pointer: Relative(27), source: Relative(32) }, Jump { location: 6343 }, Load { destination: Relative(1), source_pointer: Relative(22) }, Load { destination: Relative(16), source_pointer: Relative(27) }, JumpIf { condition: Relative(1), location: 6347 }, Jump { location: 6355 }, JumpIf { condition: Relative(1), location: 6350 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 6354 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Jump { location: 6355 }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 6362 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(16) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32840) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32870) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(27), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Mov { destination: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(29), source: Relative(4) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32840) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32840) }, Store { destination_pointer: Relative(16), source: Relative(27) }, Store { destination_pointer: Relative(22), source: Relative(12) }, Store { destination_pointer: Relative(24), source: Direct(32842) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6402 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 9710 }, Jump { location: 6405 }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(27), source_pointer: Relative(24) }, Load { destination: Relative(28), source_pointer: Relative(19) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6414 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(28) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(30), size: Relative(31) }, output: HeapArray { pointer: Relative(32), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(16), source: Relative(12) }, Store { destination_pointer: Relative(22), source: Relative(28) }, Store { destination_pointer: Relative(24), source: Relative(27) }, Store { destination_pointer: Relative(26), source: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, Load { destination: Relative(12), source_pointer: Relative(16) }, Cast { destination: Relative(19), source: Relative(12), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(19), bit_size: Field }, Cast { destination: Relative(12), source: Relative(16), bit_size: Integer(U32) }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6441 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6445 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, JumpIf { condition: Relative(19), location: 6448 }, Jump { location: 6556 }, Load { destination: Relative(19), source_pointer: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(7) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 6456 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, JumpIf { condition: Relative(27), location: 6466 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, JumpIf { condition: Relative(29), location: 6466 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(24) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 6470 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(27), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(24) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 6475 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, JumpIf { condition: Relative(27), location: 6481 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(30) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, Not { destination: Relative(22), source: Relative(32), bit_size: U1 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(27) }, JumpIf { condition: Relative(30), location: 6505 }, Jump { location: 6509 }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(29), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 6512 }, Jump { location: 6508 }, Jump { location: 6509 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 6445 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(22), location: 6518 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(12) }, Call { location: 11682 }, Mov { destination: Relative(22), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Store { destination_pointer: Relative(26), source: Relative(27) }, Mov { destination: Direct(32771), source: Relative(22) }, Call { location: 11682 }, Mov { destination: Relative(12), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, Store { destination_pointer: Relative(24), source: Relative(29) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(12) }, Call { location: 11682 }, Mov { destination: Relative(22), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Store { destination_pointer: Relative(26), source: Relative(31) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(22) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(12) }, Store { destination_pointer: Relative(26), source: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(16) }, JumpIf { condition: Relative(22), location: 6552 }, Call { location: 11708 }, Store { destination_pointer: Relative(6), source: Relative(1) }, Store { destination_pointer: Relative(7), source: Relative(19) }, Store { destination_pointer: Relative(3), source: Relative(12) }, Jump { location: 6556 }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(3) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 6564 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Direct(32838) }, JumpIf { condition: Relative(19), location: 6570 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(24) } }, Load { destination: Relative(16), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 6576 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(16) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32870) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(30), source: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Store { destination_pointer: Relative(16), source: Relative(28) }, Store { destination_pointer: Relative(24), source: Relative(12) }, Store { destination_pointer: Relative(26), source: Direct(32842) }, Store { destination_pointer: Relative(27), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6616 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 9680 }, Jump { location: 6619 }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(19) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6628 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(28) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(30), size: Relative(31) }, output: HeapArray { pointer: Relative(32), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(16), source: Relative(12) }, Store { destination_pointer: Relative(24), source: Relative(28) }, Store { destination_pointer: Relative(26), source: Relative(22) }, Store { destination_pointer: Relative(27), source: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, Load { destination: Relative(12), source_pointer: Relative(16) }, Cast { destination: Relative(19), source: Relative(12), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(19), bit_size: Field }, Cast { destination: Relative(12), source: Relative(16), bit_size: Integer(U32) }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6655 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6659 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, JumpIf { condition: Relative(19), location: 6662 }, Jump { location: 6770 }, Load { destination: Relative(19), source_pointer: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(7) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 6670 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, JumpIf { condition: Relative(27), location: 6680 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, JumpIf { condition: Relative(29), location: 6680 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(24) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 6684 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(27), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(24) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 6689 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, JumpIf { condition: Relative(27), location: 6695 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(19) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(30) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Load { destination: Relative(32), source_pointer: Relative(34) }, Not { destination: Relative(22), source: Relative(32), bit_size: U1 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(27) }, JumpIf { condition: Relative(30), location: 6719 }, Jump { location: 6723 }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(29), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 6726 }, Jump { location: 6722 }, Jump { location: 6723 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 6659 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(16), location: 6732 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(16), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Store { destination_pointer: Relative(24), source: Relative(27) }, Mov { destination: Direct(32771), source: Relative(16) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, Store { destination_pointer: Relative(22), source: Relative(29) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Store { destination_pointer: Relative(24), source: Relative(31) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(19) }, Call { location: 11682 }, Mov { destination: Relative(16), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(12) }, JumpIf { condition: Relative(19), location: 6766 }, Call { location: 11708 }, Store { destination_pointer: Relative(6), source: Relative(1) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Jump { location: 6770 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 6778 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Direct(32838) }, JumpIf { condition: Relative(16), location: 6784 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 6790 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(13) }, Mov { destination: Relative(31), source: Direct(32844) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(4) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6810 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U1, lhs: Relative(22), rhs: Direct(32837) }, JumpIf { condition: Relative(12), location: 6817 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(26) } }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(12) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6823 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(12) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32870) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(31), source: Relative(13) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, Store { destination_pointer: Relative(12), source: Relative(29) }, Store { destination_pointer: Relative(26), source: Relative(4) }, Store { destination_pointer: Relative(27), source: Direct(32842) }, Store { destination_pointer: Relative(28), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6863 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(4), location: 9650 }, Jump { location: 6866 }, Load { destination: Relative(4), source_pointer: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 6875 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(29), size: Relative(30) }, output: HeapArray { pointer: Relative(31), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(12), source: Relative(4) }, Store { destination_pointer: Relative(26), source: Relative(22) }, Store { destination_pointer: Relative(27), source: Relative(19) }, Store { destination_pointer: Relative(28), source: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Load { destination: Relative(4), source_pointer: Relative(12) }, Cast { destination: Relative(16), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(12), source: Relative(16), bit_size: Field }, Cast { destination: Relative(4), source: Relative(12), bit_size: Integer(U32) }, Load { destination: Relative(12), source_pointer: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6902 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6906 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(16), location: 6909 }, Jump { location: 7017 }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 6917 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, JumpIf { condition: Relative(26), location: 6927 }, BinaryIntOp { destination: Relative(29), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, JumpIf { condition: Relative(28), location: 6927 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, BinaryIntOp { destination: Relative(27), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(26) }, JumpIf { condition: Relative(27), location: 6931 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(22), op: Div, bit_size: U32, lhs: Relative(26), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(27), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(26) }, JumpIf { condition: Relative(27), location: 6936 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(27), op: Div, bit_size: U32, lhs: Relative(26), rhs: Relative(16) }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U32, lhs: Relative(27), rhs: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U32, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, JumpIf { condition: Relative(26), location: 6942 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(22), rhs: Direct(32845) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(16) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(29) }, Load { destination: Relative(31), source_pointer: Relative(33) }, Not { destination: Relative(19), source: Relative(31), bit_size: U1 }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(26) }, JumpIf { condition: Relative(29), location: 6966 }, Jump { location: 6970 }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(28), rhs: Relative(13) }, JumpIf { condition: Relative(19), location: 6973 }, Jump { location: 6969 }, Jump { location: 6970 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 6906 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, JumpIf { condition: Relative(19), location: 6979 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Store { destination_pointer: Relative(24), source: Relative(26) }, Mov { destination: Direct(32771), source: Relative(19) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(27) }, Store { destination_pointer: Relative(22), source: Relative(28) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(16) }, Store { destination_pointer: Relative(24), source: Relative(30) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(19) }, Call { location: 11682 }, Mov { destination: Relative(16), source: Direct(32772) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(12) }, JumpIf { condition: Relative(19), location: 7013 }, Call { location: 11708 }, Store { destination_pointer: Relative(6), source: Relative(1) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Jump { location: 7017 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7025 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Direct(32838) }, JumpIf { condition: Relative(16), location: 7031 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7037 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(13) }, Mov { destination: Relative(31), source: Direct(32844) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(4) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(4), bit_size: Field, value: 4 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(12) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(2) }, Mov { destination: Relative(31), source: Relative(14) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(4) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Load { destination: Relative(12), source_pointer: Relative(2) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7078 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, JumpIf { condition: Relative(2), location: 7084 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 26 }, Mov { destination: Relative(26), source: Direct(0) }, Mov { destination: Relative(27), source: Relative(6) }, Mov { destination: Relative(28), source: Relative(7) }, Mov { destination: Relative(29), source: Relative(3) }, Mov { destination: Relative(30), source: Relative(9) }, Mov { destination: Relative(31), source: Relative(15) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Load { destination: Relative(12), source_pointer: Relative(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(12) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 7102 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 7108 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(24) } }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 7114 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(4) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32870) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(30), source: Relative(13) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Store { destination_pointer: Relative(4), source: Relative(28) }, Store { destination_pointer: Relative(24), source: Relative(2) }, Store { destination_pointer: Relative(26), source: Direct(32842) }, Store { destination_pointer: Relative(27), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7154 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(2), location: 9620 }, Jump { location: 7157 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(12), source_pointer: Relative(24) }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7166 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(22), size: Relative(28) }, output: HeapArray { pointer: Relative(29), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(24), source: Relative(16) }, Store { destination_pointer: Relative(26), source: Relative(14) }, Store { destination_pointer: Relative(27), source: Direct(32841) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(12), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(12), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(14), source_pointer: Relative(12) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7193 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(14) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7197 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 7200 }, Jump { location: 7308 }, Load { destination: Relative(12), source_pointer: Relative(6) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 7208 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(22), location: 7218 }, BinaryIntOp { destination: Relative(27), op: Div, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, JumpIf { condition: Relative(26), location: 7218 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 7222 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(16) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 7227 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(12) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Relative(12) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(26) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(22), location: 7233 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32845) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(12) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32843) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32836) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(29), source_pointer: Relative(31) }, Not { destination: Relative(14), source: Relative(29), bit_size: U1 }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(22) }, JumpIf { condition: Relative(27), location: 7257 }, Jump { location: 7261 }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(26), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 7264 }, Jump { location: 7260 }, Jump { location: 7261 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7197 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, JumpIf { condition: Relative(14), location: 7270 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(2) }, Call { location: 11682 }, Mov { destination: Relative(14), source: Direct(32772) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Mov { destination: Direct(32771), source: Relative(14) }, Call { location: 11682 }, Mov { destination: Relative(2), source: Direct(32772) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(24) }, Store { destination_pointer: Relative(16), source: Relative(26) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(2) }, Call { location: 11682 }, Mov { destination: Relative(14), source: Direct(32772) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(19), source: Relative(28) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(14) }, Call { location: 11682 }, Mov { destination: Relative(12), source: Direct(32772) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Store { destination_pointer: Relative(19), source: Direct(32841) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(4) }, JumpIf { condition: Relative(14), location: 7304 }, Call { location: 11708 }, Store { destination_pointer: Relative(6), source: Relative(1) }, Store { destination_pointer: Relative(7), source: Relative(12) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Jump { location: 7308 }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Load { destination: Relative(12), source_pointer: Relative(2) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7316 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Direct(32843) }, JumpIf { condition: Relative(12), location: 7322 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Load { destination: Relative(4), source_pointer: Relative(21) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7328 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), MemoryAddress(Direct(32842)), HeapArray(HeapArray { pointer: Relative(4), size: 37 }), MemoryAddress(Direct(32837))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7338 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(4) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(19) }, Mov { destination: Relative(19), source: Relative(4) }, Store { destination_pointer: Relative(19), source: Direct(32837) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32837) }, Store { destination_pointer: Relative(6), source: Direct(32842) }, Store { destination_pointer: Relative(7), source: Relative(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 7369 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32837) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, Load { destination: Relative(21), source_pointer: Relative(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 7383 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(24) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32870) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(31), source: Relative(15) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, Store { destination_pointer: Relative(24), source: Relative(29) }, Store { destination_pointer: Relative(26), source: Relative(21) }, Store { destination_pointer: Relative(27), source: Direct(32842) }, Store { destination_pointer: Relative(28), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7423 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 9590 }, Jump { location: 7426 }, Load { destination: Relative(1), source_pointer: Relative(24) }, Load { destination: Relative(12), source_pointer: Relative(26) }, Load { destination: Relative(14), source_pointer: Relative(27) }, Load { destination: Relative(16), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 7435 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(21), size: Relative(22) }, output: HeapArray { pointer: Relative(29), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(24), source: Relative(1) }, Store { destination_pointer: Relative(26), source: Relative(16) }, Store { destination_pointer: Relative(27), source: Relative(14) }, Store { destination_pointer: Relative(28), source: Direct(32841) }, Load { destination: Relative(1), source_pointer: Relative(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(1) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 7455 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(4) }, JumpIf { condition: Relative(1), location: 7573 }, Jump { location: 7460 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 55 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 33 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(12) }, Store { destination_pointer: Relative(14), source: Relative(8) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32863) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(10) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(11) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(2) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 57 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 30 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(8) }, Store { destination_pointer: Relative(12), source: Direct(32868) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32858) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32861) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32853) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(20) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32864) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32865) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32863) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32858) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32861) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32856) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32847) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32859) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32854) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32861) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32856) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32865) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32857) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(20) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(18) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32869) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), HeapArray(HeapArray { pointer: Relative(1), size: 19 }), HeapArray(HeapArray { pointer: Relative(8), size: 29 }), MemoryAddress(Direct(32837))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Array { value_types: [Simple(Integer(U8))], size: 29 }, Simple(Integer(U1))] }, Jump { location: 7749 }, Load { destination: Relative(2), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(8) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 7581 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32837) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7595 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(19) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32840) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32870) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(15) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32840) }, Store { destination_pointer: Relative(19), source: Relative(26) }, Store { destination_pointer: Relative(21), source: Relative(16) }, Store { destination_pointer: Relative(22), source: Direct(32842) }, Store { destination_pointer: Relative(24), source: Direct(32837) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7635 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 9560 }, Jump { location: 7638 }, Load { destination: Relative(12), source_pointer: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(18), source_pointer: Relative(22) }, Load { destination: Relative(26), source_pointer: Relative(16) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 7647 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(26) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(28), size: Relative(29) }, output: HeapArray { pointer: Relative(30), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(19), source: Relative(12) }, Store { destination_pointer: Relative(21), source: Relative(26) }, Store { destination_pointer: Relative(22), source: Relative(18) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, Load { destination: Relative(12), source_pointer: Relative(16) }, Cast { destination: Relative(18), source: Relative(12), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(18), bit_size: Field }, Cast { destination: Relative(12), source: Relative(16), bit_size: Integer(U32) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7672 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7676 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(16), location: 7679 }, Jump { location: 7744 }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7685 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, JumpIf { condition: Relative(19), location: 7695 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(22), location: 7695 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 7699 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(16) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 7704 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(19), rhs: Relative(2) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(19), rhs: Relative(22) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 7710 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32845) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(21) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(21) }, Load { destination: Relative(19), source_pointer: Relative(27) }, Not { destination: Relative(21), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U1, lhs: Relative(21), rhs: Relative(16) }, JumpIf { condition: Relative(19), location: 7734 }, Jump { location: 7738 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(22), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 7741 }, Jump { location: 7737 }, Jump { location: 7738 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 7676 }, Store { destination_pointer: Relative(8), source: Direct(32841) }, Store { destination_pointer: Relative(14), source: Relative(24) }, Jump { location: 7744 }, Load { destination: Relative(1), source_pointer: Relative(8) }, JumpIf { condition: Relative(1), location: 7748 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Jump { location: 7749 }, Load { destination: Relative(2), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(3) }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 7758 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(16) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32838) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(12) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7784 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7788 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(12), location: 9509 }, Jump { location: 7791 }, Load { destination: Relative(12), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 7799 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(8) }, JumpIf { condition: Relative(15), location: 7825 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, Mov { destination: Relative(21), source: Relative(19) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(22) }, Mov { destination: Direct(32772), source: Relative(21) }, Mov { destination: Direct(32773), source: Relative(24) }, Call { location: 23 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(22) }, Store { destination_pointer: Relative(21), source: Direct(32844) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(19), size: Relative(18) } }, Load { destination: Relative(15), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7831 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(15) }, Const { destination: Relative(15), bit_size: Integer(U8), value: 45 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 62 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(24), source: Direct(32868) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(10) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32854) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32869) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32846) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(15) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32846) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32868) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32867) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32851) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32859) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32866) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32854) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32869) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(15) }, Store { destination_pointer: Relative(19), source: Direct(32868) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(5) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(10) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32858) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32861) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32853) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(5) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(20) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(5) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32855) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32858) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32854) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32859) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32853) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(5) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32869) }, Load { destination: Relative(5), source_pointer: Relative(11) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 7915 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7919 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 9462 }, Jump { location: 7922 }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 7928 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(15) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(12) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(14) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32838) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7954 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7958 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 9418 }, Jump { location: 7961 }, Load { destination: Relative(5), source_pointer: Relative(12) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(12), source_pointer: Relative(10) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 7969 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 7995 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, Mov { destination: Relative(18), source: Relative(16) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(19) }, Mov { destination: Direct(32772), source: Relative(18) }, Mov { destination: Direct(32773), source: Relative(20) }, Call { location: 23 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Direct(32844) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(5) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(16), size: Relative(15) } }, Load { destination: Relative(12), source_pointer: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 8001 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32870) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 8022 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 8030 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8034 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(14), location: 9198 }, Jump { location: 8037 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(14) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(10) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(12) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(5) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8061 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8065 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 9154 }, Jump { location: 8068 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(12) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 8076 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(5), location: 8102 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, Mov { destination: Relative(15), source: Relative(14) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(16) }, Mov { destination: Direct(32772), source: Relative(15) }, Mov { destination: Direct(32773), source: Relative(18) }, Call { location: 23 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, Store { destination_pointer: Relative(15), source: Direct(32844) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(14), size: Relative(12) } }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 8108 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 70 }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(5) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32862) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32866) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32861) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32853) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32846) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32867) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32851) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32859) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32866) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32854) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32846) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32868) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32867) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32851) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32859) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32866) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32854) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32869) }, Load { destination: Relative(5), source_pointer: Relative(11) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(5) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8160 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8164 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 9126 }, Jump { location: 8167 }, Load { destination: Relative(2), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(5), source_pointer: Relative(3) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 8176 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(4) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 8193 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(18) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32838) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(14) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 8219 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8223 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 9075 }, Jump { location: 8226 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(4), source_pointer: Relative(18) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8234 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 8260 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, Mov { destination: Relative(18), source: Relative(16) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(19) }, Mov { destination: Direct(32772), source: Relative(18) }, Mov { destination: Direct(32773), source: Relative(20) }, Call { location: 23 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Direct(32844) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(5) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(16), size: Relative(15) } }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(16) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(10) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(15) }, Mov { destination: Relative(15), source: Relative(10) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32842) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32838) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 8295 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8299 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 9048 }, Jump { location: 8302 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(5), source_pointer: Relative(12) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(11), source: Relative(4) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8314 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(15) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(16) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32838) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(10) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 8340 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8344 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 8997 }, Jump { location: 8347 }, Load { destination: Relative(2), source_pointer: Relative(15) }, Load { destination: Relative(4), source_pointer: Relative(16) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8355 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 8381 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, Mov { destination: Relative(18), source: Relative(16) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(19) }, Mov { destination: Direct(32772), source: Relative(18) }, Mov { destination: Direct(32773), source: Relative(20) }, Call { location: 23 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Direct(32844) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(5) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(16), size: Relative(15) } }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(16) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(10) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(15) }, Mov { destination: Relative(15), source: Relative(10) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32837) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32842) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32838) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 8416 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8420 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 8971 }, Jump { location: 8423 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(5), source_pointer: Relative(12) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(11), source: Relative(4) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 8435 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Const { destination: Relative(4), bit_size: Field, value: 10944121435919637611123202872628637544274182200208017171849102093287904247809 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8440 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 8898 }, Jump { location: 8443 }, Load { destination: Relative(2), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 8451 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8455 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 8815 }, Jump { location: 8458 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(3), source: Direct(32837) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32839) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32842) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Direct(32838) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(5) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(5) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Direct(32837) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32840) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32839) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32837) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32842) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32838) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(14), source: Direct(0) }, Mov { destination: Relative(15), source: Relative(2) }, Mov { destination: Relative(16), source: Relative(3) }, Mov { destination: Relative(17), source: Relative(1) }, Mov { destination: Relative(18), source: Relative(13) }, Mov { destination: Relative(19), source: Relative(7) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 11859 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 4 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(14), source: Direct(0) }, Mov { destination: Relative(15), source: Relative(2) }, Mov { destination: Relative(16), source: Relative(3) }, Mov { destination: Relative(17), source: Relative(1) }, Mov { destination: Relative(18), source: Relative(9) }, Mov { destination: Relative(19), source: Relative(8) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(10) }, Call { location: 11859 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(14), source: Direct(0) }, Mov { destination: Relative(15), source: Relative(5) }, Mov { destination: Relative(16), source: Relative(6) }, Mov { destination: Relative(17), source: Relative(4) }, Mov { destination: Relative(18), source: Relative(9) }, Mov { destination: Relative(19), source: Relative(8) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(10) }, Call { location: 11859 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(14), source: Direct(0) }, Mov { destination: Relative(15), source: Relative(5) }, Mov { destination: Relative(16), source: Relative(6) }, Mov { destination: Relative(17), source: Relative(4) }, Mov { destination: Relative(18), source: Relative(13) }, Mov { destination: Relative(19), source: Relative(7) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 11859 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32837) }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 8573 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(5) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 8581 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 8586 }, Jump { location: 8606 }, Store { destination_pointer: Relative(4), source: Direct(32841) }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(8) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32870) }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 8602 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 8611 }, Jump { location: 8605 }, Jump { location: 8606 }, Load { destination: Relative(1), source_pointer: Relative(4) }, JumpIf { condition: Relative(1), location: 8610 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, JumpIf { condition: Relative(8), location: 8613 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32845) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32842) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32843) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Load { destination: Relative(8), source_pointer: Relative(14) }, Load { destination: Relative(10), source_pointer: Relative(4) }, Not { destination: Relative(13), source: Relative(8), bit_size: U1 }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U1, lhs: Relative(13), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 8639 }, Jump { location: 8782 }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32837) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, Load { destination: Relative(13), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8651 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(13) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(11) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Direct(32840) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Direct(32840) }, Store { destination_pointer: Relative(13), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(6) }, Store { destination_pointer: Relative(16), source: Direct(32842) }, Store { destination_pointer: Relative(17), source: Direct(32837) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 8678 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, JumpIf { condition: Relative(14), location: 8785 }, Jump { location: 8681 }, Load { destination: Relative(14), source_pointer: Relative(13) }, Load { destination: Relative(18), source_pointer: Relative(15) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 8690 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(20) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(22), size: Relative(23) }, output: HeapArray { pointer: Relative(24), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(13), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(20) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Store { destination_pointer: Relative(17), source: Direct(32841) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32842) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(15), source: Relative(13), bit_size: Integer(U32) }, Cast { destination: Relative(14), source: Relative(15), bit_size: Field }, Cast { destination: Relative(13), source: Relative(14), bit_size: Integer(U32) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 8711 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, JumpIf { condition: Relative(14), location: 8714 }, Jump { location: 8771 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Relative(8) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, JumpIf { condition: Relative(15), location: 8722 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(14), rhs: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 8722 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 8726 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(14), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 8731 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 8737 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Direct(32845) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(20) }, Not { destination: Relative(16), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 8761 }, Jump { location: 8765 }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(17), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 8768 }, Jump { location: 8764 }, Jump { location: 8765 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32842) }, Mov { destination: Relative(8), source: Relative(14) }, Jump { location: 8711 }, Store { destination_pointer: Relative(9), source: Direct(32841) }, Store { destination_pointer: Relative(10), source: Relative(18) }, Jump { location: 8771 }, Load { destination: Relative(8), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(10) }, JumpIf { condition: Relative(8), location: 8777 }, Jump { location: 8775 }, Store { destination_pointer: Relative(4), source: Direct(32837) }, Jump { location: 8782 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(12), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 8782 }, Jump { location: 8780 }, Store { destination_pointer: Relative(4), source: Direct(32837) }, Jump { location: 8782 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, Mov { destination: Relative(3), source: Relative(8) }, Jump { location: 8602 }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, JumpIf { condition: Relative(18), location: 8789 }, Jump { location: 8812 }, Load { destination: Relative(14), source_pointer: Relative(13) }, Load { destination: Relative(18), source_pointer: Relative(15) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Load { destination: Relative(20), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(8) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(8) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryFieldOp { destination: Relative(23), op: Add, lhs: Relative(21), rhs: Relative(22) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(8) }, Store { destination_pointer: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(13), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(21) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Store { destination_pointer: Relative(17), source: Relative(20) }, Jump { location: 8812 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32842) }, Mov { destination: Relative(8), source: Relative(14) }, Jump { location: 8678 }, Load { destination: Relative(4), source_pointer: Relative(6) }, Load { destination: Relative(5), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(8), location: 8820 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32843) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Not { destination: Relative(5), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 8844 }, Jump { location: 8895 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(11), rhs: Direct(32840) }, Not { destination: Relative(12), source: Relative(5), bit_size: U1 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(14), rhs: Direct(32840) }, Not { destination: Relative(15), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(15) }, JumpIf { condition: Relative(5), location: 8895 }, Jump { location: 8851 }, Load { destination: Relative(5), source_pointer: Relative(6) }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(15), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 8858 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 8861 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(12) }, Call { location: 11682 }, Mov { destination: Relative(15), source: Direct(32772) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Store { destination_pointer: Relative(18), source: Relative(8) }, Mov { destination: Direct(32771), source: Relative(15) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(10) }, Store { destination_pointer: Relative(12), source: Relative(11) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(4) }, Call { location: 11682 }, Mov { destination: Relative(10), source: Direct(32772) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Store { destination_pointer: Relative(12), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(10) }, Call { location: 11682 }, Mov { destination: Relative(8), source: Direct(32772) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(4) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, Store { destination_pointer: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(7), source: Relative(8) }, Store { destination_pointer: Relative(3), source: Relative(16) }, Jump { location: 8895 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 8455 }, Load { destination: Relative(5), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(14), location: 8903 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32836) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Not { destination: Relative(10), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 8927 }, Jump { location: 8968 }, BinaryFieldOp { destination: Relative(10), op: Mul, lhs: Relative(18), rhs: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(8) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(18), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(19), location: 8934 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(17) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(5) }, Store { destination_pointer: Relative(21), source: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(19) }, Call { location: 11682 }, Mov { destination: Relative(5), source: Direct(32772) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Store { destination_pointer: Relative(20), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(5) }, Call { location: 11682 }, Mov { destination: Relative(15), source: Direct(32772) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(10) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(15) }, Call { location: 11682 }, Mov { destination: Relative(10), source: Direct(32772) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(5) }, Store { destination_pointer: Relative(17), source: Direct(32837) }, Store { destination_pointer: Relative(8), source: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(12), source: Relative(18) }, Jump { location: 8968 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 8440 }, JumpIf { condition: Relative(14), location: 8973 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(14) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryFieldOp { destination: Relative(17), op: Mul, lhs: Relative(16), rhs: Direct(32844) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 18 }, Mov { destination: Relative(18), source: Direct(0) }, Mov { destination: Relative(19), source: Relative(10) }, Mov { destination: Relative(20), source: Relative(15) }, Mov { destination: Relative(21), source: Relative(5) }, Mov { destination: Relative(22), source: Relative(17) }, Mov { destination: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(16) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 8420 }, JumpIf { condition: Relative(10), location: 8999 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(10) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32843) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(10), source_pointer: Relative(22) }, Not { destination: Relative(18), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(14) }, JumpIf { condition: Relative(10), location: 9023 }, Jump { location: 9045 }, Load { destination: Relative(10), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9031 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(22), source: Direct(32773) }, Mov { destination: Relative(23), source: Direct(32774) }, Store { destination_pointer: Relative(23), source: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Store { destination_pointer: Relative(15), source: Relative(18) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Jump { location: 9045 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 8344 }, JumpIf { condition: Relative(14), location: 9050 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Load { destination: Relative(16), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Load { destination: Relative(14), source_pointer: Relative(20) }, BinaryFieldOp { destination: Relative(18), op: Add, lhs: Relative(16), rhs: Relative(13) }, BinaryFieldOp { destination: Relative(16), op: Mul, lhs: Relative(14), rhs: Direct(32844) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 19 }, Mov { destination: Relative(19), source: Direct(0) }, Mov { destination: Relative(20), source: Relative(10) }, Mov { destination: Relative(21), source: Relative(15) }, Mov { destination: Relative(22), source: Relative(5) }, Mov { destination: Relative(23), source: Relative(18) }, Mov { destination: Relative(24), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(14) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 8299 }, JumpIf { condition: Relative(10), location: 9077 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(10) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(15) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32843) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Load { destination: Relative(10), source_pointer: Relative(22) }, Not { destination: Relative(15), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(14) }, JumpIf { condition: Relative(10), location: 9101 }, Jump { location: 9123 }, Load { destination: Relative(10), source_pointer: Relative(16) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9109 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(22), source: Direct(32773) }, Mov { destination: Relative(23), source: Direct(32774) }, Store { destination_pointer: Relative(23), source: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Store { destination_pointer: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(18), source: Relative(22) }, Jump { location: 9123 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 8223 }, JumpIf { condition: Relative(5), location: 9128 }, Call { location: 11676 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, Load { destination: Relative(5), source_pointer: Relative(10) }, Load { destination: Relative(8), source_pointer: Relative(12) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 9138 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(11) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(8) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 9146 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), HeapArray(HeapArray { pointer: Relative(8), size: 19 }), MemoryAddress(Relative(13)), MemoryAddress(Relative(5)), HeapArray(HeapArray { pointer: Relative(15), size: 16 }), MemoryAddress(Direct(32841))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 8164 }, JumpIf { condition: Relative(5), location: 9156 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(5), source_pointer: Relative(19) }, Not { destination: Relative(15), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(14) }, JumpIf { condition: Relative(5), location: 9175 }, Jump { location: 9195 }, Load { destination: Relative(5), source_pointer: Relative(10) }, Load { destination: Relative(14), source_pointer: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9183 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(19), source: Direct(32773) }, Mov { destination: Relative(20), source: Direct(32774) }, Store { destination_pointer: Relative(20), source: Relative(16) }, Store { destination_pointer: Relative(10), source: Relative(15) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Jump { location: 9195 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 8065 }, JumpIf { condition: Relative(14), location: 9200 }, Call { location: 11676 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9210 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, Load { destination: Relative(19), source_pointer: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9221 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(12) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(19) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 9229 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(27), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Mov { destination: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(29), source: Relative(14) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32840) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32840) }, Store { destination_pointer: Relative(19), source: Relative(27) }, Store { destination_pointer: Relative(23), source: Relative(12) }, Store { destination_pointer: Relative(24), source: Direct(32842) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 9256 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(18), location: 9388 }, Jump { location: 9259 }, Load { destination: Relative(18), source_pointer: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(24) }, Load { destination: Relative(27), source_pointer: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 9268 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(27) }, Mov { destination: Relative(27), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(27), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(29), size: Relative(30) }, output: HeapArray { pointer: Relative(31), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(19), source: Relative(18) }, Store { destination_pointer: Relative(23), source: Relative(27) }, Store { destination_pointer: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(26), source: Direct(32841) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, Load { destination: Relative(18), source_pointer: Relative(19) }, Cast { destination: Relative(20), source: Relative(18), bit_size: Integer(U32) }, Cast { destination: Relative(19), source: Relative(20), bit_size: Field }, Cast { destination: Relative(18), source: Relative(19), bit_size: Integer(U32) }, Load { destination: Relative(19), source_pointer: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9293 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(19) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 9297 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 9300 }, Jump { location: 9364 }, Load { destination: Relative(19), source_pointer: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9306 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(22), location: 9316 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(19), rhs: Relative(15) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, JumpIf { condition: Relative(24), location: 9316 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(19) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 9320 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(18), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 9325 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 9331 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Direct(32845) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(28) }, Not { destination: Relative(23), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(19) }, JumpIf { condition: Relative(22), location: 9355 }, Jump { location: 9359 }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(24), rhs: Relative(14) }, JumpIf { condition: Relative(19), location: 9362 }, Jump { location: 9358 }, Jump { location: 9359 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Relative(15), source: Relative(19) }, Jump { location: 9297 }, Store { destination_pointer: Relative(16), source: Relative(26) }, Jump { location: 9364 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9371 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 9379 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), HeapArray(HeapArray { pointer: Relative(16), size: 16 }), MemoryAddress(Direct(32844)), MemoryAddress(Relative(14)), MemoryAddress(Relative(15)), HeapArray(HeapArray { pointer: Relative(20), size: 16 }), HeapArray(HeapArray { pointer: Relative(22), size: 16 }), MemoryAddress(Direct(32841))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Field), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 8034 }, Load { destination: Relative(18), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 9392 }, Jump { location: 9415 }, Load { destination: Relative(18), source_pointer: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(24) }, Load { destination: Relative(27), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(15) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(15) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryFieldOp { destination: Relative(30), op: Add, lhs: Relative(28), rhs: Relative(29) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(28), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(15) }, Store { destination_pointer: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(19), source: Relative(18) }, Store { destination_pointer: Relative(23), source: Relative(28) }, Store { destination_pointer: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(26), source: Relative(27) }, Jump { location: 9415 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Relative(15), source: Relative(18) }, Jump { location: 9256 }, JumpIf { condition: Relative(5), location: 9420 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(5), source_pointer: Relative(19) }, Not { destination: Relative(15), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 9439 }, Jump { location: 9459 }, Load { destination: Relative(5), source_pointer: Relative(12) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(10) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9447 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(19), source: Direct(32773) }, Mov { destination: Relative(20), source: Direct(32774) }, Store { destination_pointer: Relative(20), source: Relative(16) }, Store { destination_pointer: Relative(12), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Jump { location: 9459 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 7958 }, Load { destination: Relative(5), source_pointer: Relative(14) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 9468 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(5), location: 9473 }, Jump { location: 9506 }, JumpIf { condition: Relative(5), location: 9475 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(5), source_pointer: Relative(18) }, Load { destination: Relative(15), source_pointer: Relative(21) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 9491 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9499 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), HeapArray(HeapArray { pointer: Relative(15), size: 16 }), MemoryAddress(Direct(32844)), MemoryAddress(Relative(10)), MemoryAddress(Relative(5)), HeapArray(HeapArray { pointer: Relative(19), size: 16 }), HeapArray(HeapArray { pointer: Relative(20), size: 16 }), MemoryAddress(Direct(32841))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Field), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 9506 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 7919 }, JumpIf { condition: Relative(12), location: 9511 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32843) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32836) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Load { destination: Relative(12), source_pointer: Relative(24) }, Not { destination: Relative(18), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(14) }, JumpIf { condition: Relative(12), location: 9535 }, Jump { location: 9557 }, Load { destination: Relative(12), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 9543 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(24), source: Direct(32773) }, Mov { destination: Relative(26), source: Direct(32774) }, Store { destination_pointer: Relative(26), source: Relative(19) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(21) }, Store { destination_pointer: Relative(15), source: Relative(18) }, Store { destination_pointer: Relative(16), source: Relative(24) }, Jump { location: 9557 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7788 }, Load { destination: Relative(12), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(16), location: 9564 }, Jump { location: 9587 }, Load { destination: Relative(12), source_pointer: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(18), source_pointer: Relative(22) }, Load { destination: Relative(26), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Add, lhs: Relative(27), rhs: Relative(28) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Store { destination_pointer: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(19), source: Relative(12) }, Store { destination_pointer: Relative(21), source: Relative(27) }, Store { destination_pointer: Relative(22), source: Relative(18) }, Store { destination_pointer: Relative(24), source: Relative(26) }, Jump { location: 9587 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7635 }, Load { destination: Relative(12), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 9594 }, Jump { location: 9617 }, Load { destination: Relative(12), source_pointer: Relative(24) }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(27) }, Load { destination: Relative(19), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, Load { destination: Relative(21), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(22), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Add, lhs: Relative(21), rhs: Relative(22) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, Store { destination_pointer: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(24), source: Relative(12) }, Store { destination_pointer: Relative(26), source: Relative(21) }, Store { destination_pointer: Relative(27), source: Relative(16) }, Store { destination_pointer: Relative(28), source: Relative(19) }, Jump { location: 9617 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7423 }, Load { destination: Relative(2), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(12), location: 9624 }, Jump { location: 9647 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(12), source_pointer: Relative(24) }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, Load { destination: Relative(19), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(22), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Add, lhs: Relative(19), rhs: Relative(22) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, Store { destination_pointer: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(24), source: Relative(19) }, Store { destination_pointer: Relative(26), source: Relative(14) }, Store { destination_pointer: Relative(27), source: Relative(16) }, Jump { location: 9647 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 7154 }, Load { destination: Relative(4), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(16), location: 9654 }, Jump { location: 9677 }, Load { destination: Relative(4), source_pointer: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(26) }, Load { destination: Relative(19), source_pointer: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(24), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryFieldOp { destination: Relative(30), op: Add, lhs: Relative(24), rhs: Relative(29) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(24), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Store { destination_pointer: Relative(31), source: Relative(30) }, Store { destination_pointer: Relative(12), source: Relative(4) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Store { destination_pointer: Relative(27), source: Relative(19) }, Store { destination_pointer: Relative(28), source: Relative(22) }, Jump { location: 9677 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 6863 }, Load { destination: Relative(12), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(19), location: 9684 }, Jump { location: 9707 }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(1) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryFieldOp { destination: Relative(31), op: Add, lhs: Relative(29), rhs: Relative(30) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(29), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, Store { destination_pointer: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(16), source: Relative(12) }, Store { destination_pointer: Relative(24), source: Relative(29) }, Store { destination_pointer: Relative(26), source: Relative(22) }, Store { destination_pointer: Relative(27), source: Relative(28) }, Jump { location: 9707 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6616 }, Load { destination: Relative(12), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(19), location: 9714 }, Jump { location: 9737 }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(27), source_pointer: Relative(24) }, Load { destination: Relative(28), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(1) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryFieldOp { destination: Relative(31), op: Add, lhs: Relative(29), rhs: Relative(30) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(29), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, Store { destination_pointer: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(16), source: Relative(12) }, Store { destination_pointer: Relative(22), source: Relative(29) }, Store { destination_pointer: Relative(24), source: Relative(27) }, Store { destination_pointer: Relative(26), source: Relative(28) }, Jump { location: 9737 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6402 }, Load { destination: Relative(24), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 9744 }, Jump { location: 9767 }, Load { destination: Relative(24), source_pointer: Relative(30) }, Load { destination: Relative(26), source_pointer: Relative(31) }, Load { destination: Relative(28), source_pointer: Relative(32) }, Load { destination: Relative(29), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, Load { destination: Relative(35), source_pointer: Relative(37) }, BinaryFieldOp { destination: Relative(36), op: Add, lhs: Relative(34), rhs: Relative(35) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, Store { destination_pointer: Relative(37), source: Relative(36) }, Store { destination_pointer: Relative(30), source: Relative(24) }, Store { destination_pointer: Relative(31), source: Relative(34) }, Store { destination_pointer: Relative(32), source: Relative(28) }, Store { destination_pointer: Relative(33), source: Relative(29) }, Jump { location: 9767 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(24) }, Jump { location: 6234 }, Load { destination: Relative(7), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(12) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Load { destination: Relative(12), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(16), rhs: Relative(26) }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(24), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U1, lhs: Relative(7), rhs: Relative(12) }, Store { destination_pointer: Relative(6), source: Relative(16) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 6113 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, Store { destination_pointer: Relative(26), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(6), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 5782 }, JumpIf { condition: Relative(3), location: 9824 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Load { destination: Relative(19), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32843) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Load { destination: Relative(3), source_pointer: Relative(28) }, Not { destination: Relative(22), source: Relative(3), bit_size: U1 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(19) }, JumpIf { condition: Relative(3), location: 9848 }, Jump { location: 9870 }, Load { destination: Relative(3), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 9856 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(28), source: Direct(32773) }, Mov { destination: Relative(29), source: Direct(32774) }, Store { destination_pointer: Relative(29), source: Relative(24) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(26) }, Store { destination_pointer: Relative(6), source: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(28) }, Jump { location: 9870 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 5711 }, JumpIf { condition: Relative(22), location: 9875 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(22) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Load { destination: Relative(22), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(27), op: Mul, lhs: Relative(26), rhs: Direct(32844) }, BinaryFieldOp { destination: Relative(26), op: Mul, lhs: Relative(22), rhs: Direct(32844) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 28 }, Mov { destination: Relative(28), source: Direct(0) }, Mov { destination: Relative(29), source: Relative(19) }, Mov { destination: Relative(30), source: Relative(24) }, Mov { destination: Relative(31), source: Relative(16) }, Mov { destination: Relative(32), source: Relative(27) }, Mov { destination: Relative(33), source: Relative(26) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(22) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 5674 }, JumpIf { condition: Relative(19), location: 9902 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(19) }, Load { destination: Relative(22), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32842) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32843) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(19), source_pointer: Relative(31) }, Not { destination: Relative(27), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U1, lhs: Relative(27), rhs: Relative(22) }, JumpIf { condition: Relative(19), location: 9926 }, Jump { location: 9948 }, Load { destination: Relative(19), source_pointer: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(22) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 9934 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(31), source: Direct(32773) }, Mov { destination: Relative(32), source: Direct(32774) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Store { destination_pointer: Relative(24), source: Relative(27) }, Store { destination_pointer: Relative(26), source: Relative(31) }, Jump { location: 9948 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 5598 }, Load { destination: Relative(16), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(26) }, Store { destination_pointer: Relative(12), source: Relative(22) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 5553 }, Load { destination: Relative(19), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(27), rhs: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(29) }, Store { destination_pointer: Relative(24), source: Relative(27) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 5412 }, JumpIf { condition: Relative(24), location: 9979 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(32) }, Not { destination: Relative(29), source: Relative(24), bit_size: U1 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U1, lhs: Relative(29), rhs: Relative(26) }, JumpIf { condition: Relative(24), location: 9998 }, Jump { location: 10018 }, Load { destination: Relative(24), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10006 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(32), source: Direct(32773) }, Mov { destination: Relative(33), source: Direct(32774) }, Store { destination_pointer: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(27), source: Relative(29) }, Store { destination_pointer: Relative(28), source: Relative(32) }, Jump { location: 10018 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(24) }, Jump { location: 5067 }, JumpIf { condition: Relative(22), location: 10023 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(22), source_pointer: Relative(31) }, Not { destination: Relative(28), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(28), rhs: Relative(24) }, JumpIf { condition: Relative(22), location: 10042 }, Jump { location: 10062 }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(24), source_pointer: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(24) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 10050 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(31), source: Direct(32773) }, Mov { destination: Relative(32), source: Direct(32774) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Store { destination_pointer: Relative(26), source: Relative(28) }, Store { destination_pointer: Relative(27), source: Relative(31) }, Jump { location: 10062 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 4718 }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, JumpIf { condition: Relative(22), location: 10070 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(16) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32843) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(29), source_pointer: Relative(31) }, Not { destination: Relative(19), source: Relative(29), bit_size: U1 }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(22) }, JumpIf { condition: Relative(27), location: 10094 }, Jump { location: 10135 }, BinaryFieldOp { destination: Relative(19), op: Mul, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(6) }, Load { destination: Relative(27), source_pointer: Relative(7) }, Load { destination: Relative(28), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(29), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(29), location: 10101 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(27) }, Call { location: 11682 }, Mov { destination: Relative(29), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(16) }, Store { destination_pointer: Relative(31), source: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(29) }, Call { location: 11682 }, Mov { destination: Relative(16), source: Direct(32772) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Store { destination_pointer: Relative(30), source: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(16) }, Call { location: 11682 }, Mov { destination: Relative(24), source: Direct(32772) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Store { destination_pointer: Relative(29), source: Relative(19) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(24) }, Call { location: 11682 }, Mov { destination: Relative(19), source: Direct(32772) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(16) }, Store { destination_pointer: Relative(27), source: Direct(32837) }, Store { destination_pointer: Relative(6), source: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(19) }, Store { destination_pointer: Relative(3), source: Relative(28) }, Jump { location: 10135 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 4676 }, JumpIf { condition: Relative(24), location: 10140 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(24) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Load { destination: Relative(24), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(28), op: Mul, lhs: Relative(27), rhs: Relative(9) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 29 }, Mov { destination: Relative(29), source: Direct(0) }, Mov { destination: Relative(30), source: Relative(22) }, Mov { destination: Relative(31), source: Relative(26) }, Mov { destination: Relative(32), source: Relative(19) }, Mov { destination: Relative(33), source: Relative(28) }, Mov { destination: Relative(34), source: Relative(24) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(27) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(24) }, Jump { location: 4657 }, JumpIf { condition: Relative(22), location: 10166 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(22), source_pointer: Relative(32) }, Not { destination: Relative(28), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(28), rhs: Relative(24) }, JumpIf { condition: Relative(22), location: 10190 }, Jump { location: 10212 }, Load { destination: Relative(22), source_pointer: Relative(26) }, Load { destination: Relative(24), source_pointer: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(24) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10198 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(32), source: Direct(32773) }, Mov { destination: Relative(33), source: Direct(32774) }, Store { destination_pointer: Relative(33), source: Relative(29) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(26), source: Relative(28) }, Store { destination_pointer: Relative(27), source: Relative(32) }, Jump { location: 10212 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 4581 }, Load { destination: Relative(19), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(22) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(22), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(24), rhs: Relative(28) }, BinaryFieldOp { destination: Relative(24), op: Equals, lhs: Relative(27), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(24) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 4477 }, Load { destination: Relative(19), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(27) }, Store { destination_pointer: Relative(7), source: Relative(24) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 4441 }, Load { destination: Relative(24), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(26), rhs: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(24), rhs: Relative(28) }, Store { destination_pointer: Relative(7), source: Relative(26) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(24) }, Jump { location: 4411 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32843) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(3) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Load { destination: Relative(28), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(28) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(29), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(3) }, Store { destination_pointer: Relative(31), source: Relative(24) }, Mov { destination: Direct(32771), source: Relative(29) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 11772 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(26) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(7), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 4091 }, JumpIf { condition: Relative(3), location: 10295 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(3), source_pointer: Relative(32) }, Not { destination: Relative(28), source: Relative(3), bit_size: U1 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(28), rhs: Relative(27) }, JumpIf { condition: Relative(3), location: 10319 }, Jump { location: 10341 }, Load { destination: Relative(3), source_pointer: Relative(24) }, Load { destination: Relative(27), source_pointer: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(27) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10327 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(32), source: Direct(32773) }, Mov { destination: Relative(33), source: Direct(32774) }, Store { destination_pointer: Relative(33), source: Relative(29) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(24), source: Relative(28) }, Store { destination_pointer: Relative(26), source: Relative(32) }, Jump { location: 10341 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 3843 }, JumpIf { condition: Relative(25), location: 10346 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(25) }, Load { destination: Relative(26), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Load { destination: Relative(25), source_pointer: Relative(32) }, Not { destination: Relative(29), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(29), rhs: Relative(26) }, JumpIf { condition: Relative(25), location: 10365 }, Jump { location: 10385 }, Load { destination: Relative(25), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10373 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(32), source: Direct(32773) }, Mov { destination: Relative(33), source: Direct(32774) }, Store { destination_pointer: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(27), source: Relative(29) }, Store { destination_pointer: Relative(28), source: Relative(32) }, Jump { location: 10385 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 3327 }, JumpIf { condition: Relative(23), location: 10390 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32842) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32836) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(23), source_pointer: Relative(30) }, Not { destination: Relative(27), source: Relative(23), bit_size: U1 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U1, lhs: Relative(27), rhs: Relative(24) }, JumpIf { condition: Relative(23), location: 10409 }, Jump { location: 10429 }, Load { destination: Relative(23), source_pointer: Relative(25) }, Load { destination: Relative(24), source_pointer: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(24) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 10417 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 1 }, Call { location: 11794 }, Mov { destination: Relative(30), source: Direct(32773) }, Mov { destination: Relative(31), source: Direct(32774) }, Store { destination_pointer: Relative(31), source: Relative(28) }, Store { destination_pointer: Relative(25), source: Relative(27) }, Store { destination_pointer: Relative(26), source: Relative(30) }, Jump { location: 10429 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(23) }, Jump { location: 2807 }, Load { destination: Relative(3), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(17), location: 10436 }, Jump { location: 10459 }, Load { destination: Relative(3), source_pointer: Relative(19) }, Load { destination: Relative(17), source_pointer: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Add, lhs: Relative(27), rhs: Relative(28) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Store { destination_pointer: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(19), source: Relative(3) }, Store { destination_pointer: Relative(23), source: Relative(27) }, Store { destination_pointer: Relative(24), source: Relative(22) }, Store { destination_pointer: Relative(25), source: Relative(26) }, Jump { location: 10459 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 2594 }, Load { destination: Relative(15), source_pointer: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(23), location: 10467 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32845) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(15) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(30) }, Not { destination: Relative(22), source: Relative(28), bit_size: U1 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(23) }, JumpIf { condition: Relative(26), location: 10491 }, Jump { location: 10539 }, BinaryFieldOp { destination: Relative(22), op: Mul, lhs: Relative(25), rhs: Relative(27) }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(22), rhs: Relative(19) }, JumpIf { condition: Relative(26), location: 10539 }, Jump { location: 10495 }, Load { destination: Relative(22), source_pointer: Relative(6) }, Load { destination: Relative(26), source_pointer: Relative(7) }, Load { destination: Relative(28), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U32, lhs: Relative(28), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(30), op: LessThanEquals, bit_size: U32, lhs: Direct(32842), rhs: Relative(28) }, JumpIf { condition: Relative(30), location: 10502 }, Call { location: 11708 }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(28), location: 10505 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(26) }, Call { location: 11682 }, Mov { destination: Relative(28), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(15) }, Store { destination_pointer: Relative(31), source: Relative(23) }, Mov { destination: Direct(32771), source: Relative(28) }, Call { location: 11682 }, Mov { destination: Relative(15), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, Store { destination_pointer: Relative(26), source: Relative(25) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(15) }, Call { location: 11682 }, Mov { destination: Relative(24), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Store { destination_pointer: Relative(26), source: Relative(27) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(24) }, Call { location: 11682 }, Mov { destination: Relative(23), source: Direct(32772) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(15) }, Store { destination_pointer: Relative(26), source: Direct(32841) }, Store { destination_pointer: Relative(6), source: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(23) }, Store { destination_pointer: Relative(9), source: Relative(29) }, Jump { location: 10539 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(15) }, Jump { location: 2538 }, JumpIf { condition: Relative(15), location: 10544 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Direct(32845) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32843) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(17) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(24) }, Load { destination: Relative(17), source_pointer: Relative(14) }, Not { destination: Relative(23), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U1, lhs: Relative(17), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 10570 }, Jump { location: 10713 }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32837) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32840) }, Load { destination: Relative(23), source_pointer: Relative(3) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 10582 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(30), source: Relative(19) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Store { destination_pointer: Relative(23), source: Relative(28) }, Store { destination_pointer: Relative(25), source: Relative(3) }, Store { destination_pointer: Relative(26), source: Direct(32842) }, Store { destination_pointer: Relative(27), source: Direct(32837) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 10609 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(24), location: 10716 }, Jump { location: 10612 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(28), source_pointer: Relative(25) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Load { destination: Relative(30), source_pointer: Relative(28) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10621 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(30) }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(32) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(32), size: Relative(33) }, output: HeapArray { pointer: Relative(34), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(25), source: Relative(30) }, Store { destination_pointer: Relative(26), source: Relative(29) }, Store { destination_pointer: Relative(27), source: Direct(32841) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, Load { destination: Relative(23), source_pointer: Relative(24) }, Cast { destination: Relative(25), source: Relative(23), bit_size: Integer(U32) }, Cast { destination: Relative(24), source: Relative(25), bit_size: Field }, Cast { destination: Relative(23), source: Relative(24), bit_size: Integer(U32) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 10642 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(6) }, JumpIf { condition: Relative(24), location: 10645 }, Jump { location: 10702 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Relative(15) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, JumpIf { condition: Relative(25), location: 10653 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(24), rhs: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(15) }, JumpIf { condition: Relative(27), location: 10653 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(24) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(25) }, JumpIf { condition: Relative(26), location: 10657 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(25), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(26), location: 10662 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(6) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(25), rhs: Relative(27) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(6) }, JumpIf { condition: Relative(25), location: 10668 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Direct(32845) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Load { destination: Relative(24), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32842) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32843) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(25), source_pointer: Relative(30) }, Not { destination: Relative(26), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(24) }, JumpIf { condition: Relative(25), location: 10692 }, Jump { location: 10696 }, BinaryFieldOp { destination: Relative(24), op: Equals, lhs: Relative(27), rhs: Relative(19) }, JumpIf { condition: Relative(24), location: 10699 }, Jump { location: 10695 }, Jump { location: 10696 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Relative(15), source: Relative(24) }, Jump { location: 10642 }, Store { destination_pointer: Relative(16), source: Direct(32841) }, Store { destination_pointer: Relative(17), source: Relative(28) }, Jump { location: 10702 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(17) }, JumpIf { condition: Relative(15), location: 10708 }, Jump { location: 10706 }, Store { destination_pointer: Relative(14), source: Direct(32837) }, Jump { location: 10713 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(22), rhs: Relative(16) }, JumpIf { condition: Relative(15), location: 10713 }, Jump { location: 10711 }, Store { destination_pointer: Relative(14), source: Direct(32837) }, Jump { location: 10713 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 2447 }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(24) }, JumpIf { condition: Relative(28), location: 10720 }, Jump { location: 10743 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(28), source_pointer: Relative(25) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Load { destination: Relative(30), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(15) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(15) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryFieldOp { destination: Relative(33), op: Add, lhs: Relative(31), rhs: Relative(32) }, Mov { destination: Direct(32771), source: Relative(28) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(15) }, Store { destination_pointer: Relative(34), source: Relative(33) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(25), source: Relative(31) }, Store { destination_pointer: Relative(26), source: Relative(29) }, Store { destination_pointer: Relative(27), source: Relative(30) }, Jump { location: 10743 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Relative(15), source: Relative(24) }, Jump { location: 10609 }, Load { destination: Relative(17), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(22), location: 10750 }, Jump { location: 10773 }, Load { destination: Relative(17), source_pointer: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Load { destination: Relative(25), source_pointer: Relative(23) }, Load { destination: Relative(26), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Add, lhs: Relative(27), rhs: Relative(28) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(1) }, Store { destination_pointer: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Store { destination_pointer: Relative(19), source: Relative(27) }, Store { destination_pointer: Relative(23), source: Relative(25) }, Store { destination_pointer: Relative(24), source: Relative(26) }, Jump { location: 10773 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 2233 }, JumpIf { condition: Relative(24), location: 10778 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(22), rhs: Direct(32845) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32843) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32836) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(27) }, Load { destination: Relative(24), source_pointer: Relative(31) }, Load { destination: Relative(27), source_pointer: Relative(25) }, Not { destination: Relative(30), source: Relative(24), bit_size: U1 }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U1, lhs: Relative(30), rhs: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(27), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 10804 }, Jump { location: 10947 }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32840) }, Load { destination: Relative(30), source_pointer: Relative(17) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10816 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(30) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(32), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(35), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(36) }, Store { destination_pointer: Relative(37), source: Relative(28) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Store { destination_pointer: Relative(30), source: Relative(35) }, Store { destination_pointer: Relative(32), source: Relative(17) }, Store { destination_pointer: Relative(33), source: Direct(32842) }, Store { destination_pointer: Relative(34), source: Direct(32837) }, Mov { destination: Relative(24), source: Direct(32838) }, Jump { location: 10843 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Direct(32836) }, JumpIf { condition: Relative(31), location: 10950 }, Jump { location: 10846 }, Load { destination: Relative(31), source_pointer: Relative(30) }, Load { destination: Relative(35), source_pointer: Relative(32) }, Load { destination: Relative(36), source_pointer: Relative(33) }, Load { destination: Relative(37), source_pointer: Relative(35) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(37) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 10855 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(37) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(39), size: Relative(40) }, output: HeapArray { pointer: Relative(41), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(30), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(37) }, Store { destination_pointer: Relative(33), source: Relative(36) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32842) }, Load { destination: Relative(30), source_pointer: Relative(31) }, Cast { destination: Relative(32), source: Relative(30), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(32), bit_size: Field }, Cast { destination: Relative(30), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(24), source: Direct(32838) }, Jump { location: 10876 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, JumpIf { condition: Relative(31), location: 10879 }, Jump { location: 10936 }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Relative(24) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(24) }, JumpIf { condition: Relative(32), location: 10887 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(31), rhs: Relative(24) }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(24) }, JumpIf { condition: Relative(34), location: 10887 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(31) }, BinaryIntOp { destination: Relative(33), op: LessThanEquals, bit_size: U32, lhs: Relative(24), rhs: Relative(32) }, JumpIf { condition: Relative(33), location: 10891 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(31), op: Div, bit_size: U32, lhs: Relative(32), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(31) }, BinaryIntOp { destination: Relative(33), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(32) }, JumpIf { condition: Relative(33), location: 10896 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(33), op: Div, bit_size: U32, lhs: Relative(32), rhs: Relative(19) }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(33), rhs: Relative(19) }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U32, lhs: Relative(32), rhs: Relative(34) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(19) }, JumpIf { condition: Relative(32), location: 10902 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Direct(32845) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Load { destination: Relative(31), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32842) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(33) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32843) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Load { destination: Relative(35), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32836) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(33) }, Load { destination: Relative(32), source_pointer: Relative(37) }, Not { destination: Relative(33), source: Relative(32), bit_size: U1 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U1, lhs: Relative(33), rhs: Relative(31) }, JumpIf { condition: Relative(32), location: 10926 }, Jump { location: 10930 }, BinaryFieldOp { destination: Relative(31), op: Equals, lhs: Relative(34), rhs: Relative(28) }, JumpIf { condition: Relative(31), location: 10933 }, Jump { location: 10929 }, Jump { location: 10930 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Relative(24), source: Relative(31) }, Jump { location: 10876 }, Store { destination_pointer: Relative(26), source: Direct(32841) }, Store { destination_pointer: Relative(27), source: Relative(35) }, Jump { location: 10936 }, Load { destination: Relative(24), source_pointer: Relative(26) }, Load { destination: Relative(26), source_pointer: Relative(27) }, JumpIf { condition: Relative(24), location: 10942 }, Jump { location: 10940 }, Store { destination_pointer: Relative(25), source: Direct(32837) }, Jump { location: 10947 }, BinaryFieldOp { destination: Relative(24), op: Equals, lhs: Relative(29), rhs: Relative(26) }, JumpIf { condition: Relative(24), location: 10947 }, Jump { location: 10945 }, Store { destination_pointer: Relative(25), source: Direct(32837) }, Jump { location: 10947 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, Mov { destination: Relative(22), source: Relative(24) }, Jump { location: 2192 }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(31) }, JumpIf { condition: Relative(35), location: 10954 }, Jump { location: 10977 }, Load { destination: Relative(31), source_pointer: Relative(30) }, Load { destination: Relative(35), source_pointer: Relative(32) }, Load { destination: Relative(36), source_pointer: Relative(33) }, Load { destination: Relative(37), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(24) }, Load { destination: Relative(38), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(24) }, Load { destination: Relative(39), source_pointer: Relative(41) }, BinaryFieldOp { destination: Relative(40), op: Add, lhs: Relative(38), rhs: Relative(39) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(24) }, Store { destination_pointer: Relative(41), source: Relative(40) }, Store { destination_pointer: Relative(30), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(38) }, Store { destination_pointer: Relative(33), source: Relative(36) }, Store { destination_pointer: Relative(34), source: Relative(37) }, Jump { location: 10977 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32842) }, Mov { destination: Relative(24), source: Relative(31) }, Jump { location: 10843 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(17), source_pointer: Relative(24) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 23 }, Mov { destination: Relative(23), source: Direct(0) }, Mov { destination: Relative(24), source: Relative(7) }, Mov { destination: Relative(25), source: Relative(9) }, Mov { destination: Relative(26), source: Relative(6) }, Mov { destination: Relative(27), source: Relative(19) }, Mov { destination: Relative(28), source: Relative(17) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(22) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 23 }, Mov { destination: Relative(23), source: Direct(0) }, Mov { destination: Relative(24), source: Relative(15) }, Mov { destination: Relative(25), source: Relative(16) }, Mov { destination: Relative(26), source: Relative(14) }, Mov { destination: Relative(27), source: Relative(19) }, Mov { destination: Relative(28), source: Relative(17) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(22) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(17) }, Jump { location: 2113 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(14) }, Load { destination: Relative(17), source_pointer: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Load { destination: Relative(22), source_pointer: Relative(15) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32837) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(6) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 11029 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Direct(32840) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Direct(32840) }, Store { destination_pointer: Relative(25), source: Relative(30) }, Store { destination_pointer: Relative(27), source: Relative(6) }, Store { destination_pointer: Relative(28), source: Direct(32842) }, Store { destination_pointer: Relative(29), source: Direct(32837) }, Mov { destination: Relative(7), source: Direct(32838) }, Jump { location: 11056 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Direct(32836) }, JumpIf { condition: Relative(26), location: 11174 }, Jump { location: 11059 }, Load { destination: Relative(26), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(27) }, Load { destination: Relative(31), source_pointer: Relative(28) }, Load { destination: Relative(32), source_pointer: Relative(30) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 11068 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(32) }, Mov { destination: Relative(32), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(32), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(34), size: Relative(35) }, output: HeapArray { pointer: Relative(36), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(25), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(32) }, Store { destination_pointer: Relative(28), source: Relative(31) }, Store { destination_pointer: Relative(29), source: Direct(32841) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32842) }, Load { destination: Relative(25), source_pointer: Relative(26) }, Cast { destination: Relative(27), source: Relative(25), bit_size: Integer(U32) }, Cast { destination: Relative(26), source: Relative(27), bit_size: Field }, Cast { destination: Relative(25), source: Relative(26), bit_size: Integer(U32) }, Mov { destination: Relative(7), source: Direct(32838) }, Jump { location: 11089 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(14) }, JumpIf { condition: Relative(26), location: 11092 }, Jump { location: 11149 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(7), rhs: Relative(7) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(7) }, JumpIf { condition: Relative(27), location: 11100 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(26), rhs: Relative(7) }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(7) }, JumpIf { condition: Relative(29), location: 11100 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(26) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 11104 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(27), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(26) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 11109 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(27), rhs: Relative(14) }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(28), rhs: Relative(14) }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(26), rhs: Relative(14) }, JumpIf { condition: Relative(27), location: 11115 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Direct(32845) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32842) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Load { destination: Relative(29), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32843) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Load { destination: Relative(27), source_pointer: Relative(32) }, Not { destination: Relative(28), source: Relative(27), bit_size: U1 }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(28), rhs: Relative(26) }, JumpIf { condition: Relative(27), location: 11139 }, Jump { location: 11143 }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(29), rhs: Relative(17) }, JumpIf { condition: Relative(26), location: 11146 }, Jump { location: 11142 }, Jump { location: 11143 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32842) }, Mov { destination: Relative(7), source: Relative(26) }, Jump { location: 11089 }, Store { destination_pointer: Relative(23), source: Direct(32841) }, Store { destination_pointer: Relative(24), source: Relative(30) }, Jump { location: 11149 }, Load { destination: Relative(7), source_pointer: Relative(23) }, JumpIf { condition: Relative(7), location: 11171 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 38 }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, Mov { destination: Relative(23), source: Relative(22) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U64), value: 9862881900111276825 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 35 }, Mov { destination: Direct(32771), source: Relative(24) }, Mov { destination: Direct(32772), source: Relative(23) }, Mov { destination: Direct(32773), source: Relative(25) }, Call { location: 23 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 35 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(17) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(22), size: Relative(14) } }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 2019 }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(26) }, JumpIf { condition: Relative(30), location: 11178 }, Jump { location: 11201 }, Load { destination: Relative(26), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(27) }, Load { destination: Relative(31), source_pointer: Relative(28) }, Load { destination: Relative(32), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(7) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(7) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryFieldOp { destination: Relative(35), op: Add, lhs: Relative(33), rhs: Relative(34) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(33), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(7) }, Store { destination_pointer: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(25), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(33) }, Store { destination_pointer: Relative(28), source: Relative(31) }, Store { destination_pointer: Relative(29), source: Relative(32) }, Jump { location: 11201 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32842) }, Mov { destination: Relative(7), source: Relative(26) }, Jump { location: 11056 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(6) }, Load { destination: Relative(8), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(6), source_pointer: Relative(21) }, Load { destination: Relative(17), source_pointer: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 11218 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(23) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 11226 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32841)), HeapArray(HeapArray { pointer: Relative(17), size: 17 }), MemoryAddress(Relative(13)), MemoryAddress(Relative(8)), MemoryAddress(Relative(6)), HeapArray(HeapArray { pointer: Relative(22), size: 95 }), MemoryAddress(Direct(32841))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 17 }, Simple(Field), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 95 }, Simple(Integer(U1))] }, Const { destination: Relative(17), bit_size: Integer(U32), value: 24 }, Mov { destination: Relative(24), source: Direct(0) }, Mov { destination: Relative(25), source: Relative(9) }, Mov { destination: Relative(26), source: Relative(15) }, Mov { destination: Relative(27), source: Relative(16) }, Mov { destination: Relative(28), source: Relative(8) }, Mov { destination: Relative(29), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(17) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(6) }, Jump { location: 1813 }, Load { destination: Relative(15), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 11248 }, Jump { location: 11271 }, Load { destination: Relative(15), source_pointer: Relative(21) }, Load { destination: Relative(16), source_pointer: Relative(22) }, Load { destination: Relative(19), source_pointer: Relative(23) }, Load { destination: Relative(20), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(2) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Add, lhs: Relative(25), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(21), source: Relative(15) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Store { destination_pointer: Relative(23), source: Relative(19) }, Store { destination_pointer: Relative(24), source: Relative(20) }, Jump { location: 11271 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(15) }, Jump { location: 1302 }, Load { destination: Relative(14), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 11278 }, Jump { location: 11301 }, Load { destination: Relative(14), source_pointer: Relative(20) }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(2) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Add, lhs: Relative(25), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(20), source: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Jump { location: 11301 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(14) }, Jump { location: 1034 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(14), source: Direct(0) }, Mov { destination: Relative(15), source: Relative(8) }, Mov { destination: Relative(16), source: Relative(9) }, Mov { destination: Relative(17), source: Relative(13) }, Mov { destination: Relative(18), source: Relative(4) }, Mov { destination: Relative(19), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 861 }, Load { destination: Relative(9), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 11321 }, Jump { location: 11344 }, Load { destination: Relative(9), source_pointer: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Load { destination: Relative(14), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(20), rhs: Relative(21) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(15), source: Relative(9) }, Store { destination_pointer: Relative(16), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Store { destination_pointer: Relative(18), source: Relative(19) }, Jump { location: 11344 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 705 }, Load { destination: Relative(4), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(13), location: 11351 }, Jump { location: 11374 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Load { destination: Relative(18), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(21), op: Add, lhs: Relative(19), rhs: Relative(20) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, Store { destination_pointer: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Store { destination_pointer: Relative(15), source: Relative(17) }, Store { destination_pointer: Relative(16), source: Relative(18) }, Jump { location: 11374 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 485 }, Load { destination: Relative(10), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 11381 }, Jump { location: 11404 }, Load { destination: Relative(10), source_pointer: Relative(17) }, Load { destination: Relative(12), source_pointer: Relative(18) }, Load { destination: Relative(13), source_pointer: Relative(19) }, Load { destination: Relative(15), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(16), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(16), rhs: Relative(21) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(17), source: Relative(10) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(13) }, Store { destination_pointer: Relative(20), source: Relative(15) }, Jump { location: 11404 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 197 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 11412 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 11407 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(8), source: Direct(0) }, Mov { destination: Relative(9), source: Relative(1) }, Mov { destination: Relative(10), source: Relative(2) }, Mov { destination: Relative(11), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 12110 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 11432 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(8) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(8) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32870) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(4) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Direct(32842) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 11472 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 11637 }, Jump { location: 11475 }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(13), source_pointer: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 11484 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(16), size: Relative(17) }, output: HeapArray { pointer: Relative(18), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Cast { destination: Relative(9), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(9), bit_size: Field }, Cast { destination: Relative(7), source: Relative(8), bit_size: Integer(U32) }, Load { destination: Relative(8), source_pointer: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 11511 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 11515 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 11518 }, Jump { location: 11636 }, Load { destination: Relative(9), source_pointer: Relative(1) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 11526 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, JumpIf { condition: Relative(13), location: 11536 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(11), rhs: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 11536 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 11540 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(11), op: Div, bit_size: U32, lhs: Relative(13), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 11545 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(14), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 11551 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32845) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, Not { destination: Relative(16), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: Or, bit_size: U1, lhs: Relative(17), rhs: Relative(16) }, JumpIf { condition: Relative(13), location: 11578 }, Jump { location: 11573 }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(15), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 11576 }, Jump { location: 11590 }, Store { destination_pointer: Relative(10), source: Direct(32841) }, Jump { location: 11590 }, Store { destination_pointer: Relative(10), source: Direct(32841) }, Load { destination: Relative(12), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 11584 }, Call { location: 11673 }, Load { destination: Relative(12), source_pointer: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(2) }, Store { destination_pointer: Relative(1), source: Relative(12) }, Store { destination_pointer: Relative(2), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(13) }, Jump { location: 11590 }, Load { destination: Relative(12), source_pointer: Relative(10) }, JumpIf { condition: Relative(12), location: 11596 }, Jump { location: 11593 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, Mov { destination: Relative(6), source: Relative(9) }, Jump { location: 11515 }, Load { destination: Relative(6), source_pointer: Relative(1) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(6) }, JumpIf { condition: Relative(10), location: 11602 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 11682 }, Mov { destination: Relative(10), source: Direct(32772) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(10) }, Call { location: 11682 }, Mov { destination: Relative(7), source: Direct(32772) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 11682 }, Mov { destination: Relative(9), source: Direct(32772) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Store { destination_pointer: Relative(11), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(9) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(5) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Store { destination_pointer: Relative(3), source: Relative(8) }, Jump { location: 11636 }, Return, Load { destination: Relative(7), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 11641 }, Jump { location: 11664 }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(13), source_pointer: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryFieldOp { destination: Relative(17), op: Add, lhs: Relative(15), rhs: Relative(16) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Store { destination_pointer: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(15) }, Store { destination_pointer: Relative(11), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Relative(14) }, Jump { location: 11664 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, Mov { destination: Relative(6), source: Relative(7) }, Jump { location: 11472 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 4105629585450304037 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12632160011611521689 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32773), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32774), op: Equals, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, JumpIf { condition: Direct(32774), location: 11686 }, Jump { location: 11688 }, Mov { destination: Direct(32772), source: Direct(32771) }, Jump { location: 11707 }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32776) }, Load { destination: Direct(32775), source_pointer: Direct(32775) }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32775), rhs: Direct(32776) }, Mov { destination: Direct(32772), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32775) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32775) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32772) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 11705 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 11698 }, IndirectConst { destination_pointer: Direct(32772), bit_size: Integer(U32), value: 1 }, Jump { location: 11707 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 8082322909743101849 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 11665340019033496436 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 13674703438729013973 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1359149291226868540 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 6665645948190457319 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14241324264716156348 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16986922238178214607 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15583592523844085222 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(2) }, Load { destination: Direct(32775), source_pointer: Direct(32775) }, BinaryIntOp { destination: Direct(32776), op: Sub, bit_size: U32, lhs: Direct(32775), rhs: Direct(32772) }, Load { destination: Direct(32777), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Const { destination: Direct(32780), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32780) }, JumpIf { condition: Direct(32778), location: 11744 }, Jump { location: 11748 }, Mov { destination: Direct(32773), source: Direct(32771) }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, Store { destination_pointer: Direct(32780), source: Direct(32776) }, Jump { location: 11770 }, Const { destination: Direct(32781), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(32781) }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32780) }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, Store { destination_pointer: Direct(32780), source: Direct(32776) }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(2) }, Store { destination_pointer: Direct(32780), source: Direct(32776) }, Const { destination: Direct(32781), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(32781) }, BinaryIntOp { destination: Direct(32782), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(32776) }, Mov { destination: Direct(32783), source: Direct(32779) }, Mov { destination: Direct(32784), source: Direct(32780) }, BinaryIntOp { destination: Direct(32785), op: Equals, bit_size: U32, lhs: Direct(32783), rhs: Direct(32782) }, JumpIf { condition: Direct(32785), location: 11769 }, Load { destination: Direct(32781), source_pointer: Direct(32783) }, Store { destination_pointer: Direct(32784), source: Direct(32781) }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32783), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32784), rhs: Direct(2) }, Jump { location: 11762 }, Jump { location: 11770 }, BinaryIntOp { destination: Direct(32774), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(32776) }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 11776 }, Jump { location: 11778 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 11793 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 11790 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 11783 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 11793 }, Return, Load { destination: Direct(32775), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(2) }, Load { destination: Direct(32776), source_pointer: Direct(32779) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Load { destination: Direct(32777), source_pointer: Direct(32779) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32780), op: LessThanEquals, bit_size: U32, lhs: Direct(32779), rhs: Direct(32777) }, BinaryIntOp { destination: Direct(32781), op: Equals, bit_size: U32, lhs: Direct(32775), rhs: Direct(2) }, JumpIf { condition: Direct(32780), location: 11805 }, Jump { location: 11822 }, JumpIf { condition: Direct(32781), location: 11807 }, Jump { location: 11811 }, Mov { destination: Direct(32773), source: Direct(32771) }, BinaryIntOp { destination: Direct(32782), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, Store { destination_pointer: Direct(32782), source: Direct(32779) }, Jump { location: 11821 }, Const { destination: Direct(32783), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32782), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(32783) }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32782) }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32782), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, Store { destination_pointer: Direct(32782), source: Direct(32779) }, BinaryIntOp { destination: Direct(32782), op: Add, bit_size: U32, lhs: Direct(32782), rhs: Direct(2) }, Store { destination_pointer: Direct(32782), source: Direct(32777) }, Jump { location: 11821 }, Jump { location: 11834 }, Const { destination: Direct(32783), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32782), op: Mul, bit_size: U32, lhs: Direct(32779), rhs: Direct(32783) }, Const { destination: Direct(32784), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32782), rhs: Direct(32784) }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32783) }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, Store { destination_pointer: Direct(32783), source: Direct(32779) }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32783), rhs: Direct(2) }, Store { destination_pointer: Direct(32783), source: Direct(32782) }, Jump { location: 11834 }, Const { destination: Direct(32781), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32773), rhs: Direct(32781) }, BinaryIntOp { destination: Direct(32781), op: Equals, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, JumpIf { condition: Direct(32781), location: 11848 }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(32776) }, Mov { destination: Direct(32784), source: Direct(32778) }, Mov { destination: Direct(32785), source: Direct(32780) }, BinaryIntOp { destination: Direct(32786), op: Equals, bit_size: U32, lhs: Direct(32784), rhs: Direct(32783) }, JumpIf { condition: Direct(32786), location: 11848 }, Load { destination: Direct(32782), source_pointer: Direct(32784) }, Store { destination_pointer: Direct(32785), source: Direct(32782) }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32784), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32785), op: Add, bit_size: U32, lhs: Direct(32785), rhs: Direct(2) }, Jump { location: 11841 }, BinaryIntOp { destination: Direct(32774), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(32776) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16291778408346427203 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 3078107792722303059 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 10951819287827820458 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 11407 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(8), source: Direct(0) }, Mov { destination: Relative(9), source: Relative(1) }, Mov { destination: Relative(10), source: Relative(2) }, Mov { destination: Relative(11), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 12557 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 11875 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(8) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(8) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32870) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(4) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Direct(32842) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 11915 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 12080 }, Jump { location: 11918 }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(13), source_pointer: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 11927 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(16), size: Relative(17) }, output: HeapArray { pointer: Relative(18), size: 4 }, len: Direct(32845) }), Store { destination_pointer: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Cast { destination: Relative(9), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(9), bit_size: Field }, Cast { destination: Relative(7), source: Relative(8), bit_size: Integer(U32) }, Load { destination: Relative(8), source_pointer: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 11954 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 11958 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 11961 }, Jump { location: 12079 }, Load { destination: Relative(9), source_pointer: Relative(1) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 11969 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, JumpIf { condition: Relative(13), location: 11979 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(11), rhs: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 11979 }, Call { location: 11670 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 11983 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(11), op: Div, bit_size: U32, lhs: Relative(13), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 11988 }, Call { location: 11673 }, BinaryIntOp { destination: Relative(14), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 11994 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32845) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, Not { destination: Relative(16), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: Or, bit_size: U1, lhs: Relative(17), rhs: Relative(16) }, JumpIf { condition: Relative(13), location: 12021 }, Jump { location: 12016 }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(15), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 12019 }, Jump { location: 12033 }, Store { destination_pointer: Relative(10), source: Direct(32841) }, Jump { location: 12033 }, Store { destination_pointer: Relative(10), source: Direct(32841) }, Load { destination: Relative(12), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 12027 }, Call { location: 11673 }, Load { destination: Relative(12), source_pointer: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(2) }, Store { destination_pointer: Relative(1), source: Relative(12) }, Store { destination_pointer: Relative(2), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(13) }, Jump { location: 12033 }, Load { destination: Relative(12), source_pointer: Relative(10) }, JumpIf { condition: Relative(12), location: 12039 }, Jump { location: 12036 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, Mov { destination: Relative(6), source: Relative(9) }, Jump { location: 11958 }, Load { destination: Relative(6), source_pointer: Relative(1) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(6) }, JumpIf { condition: Relative(10), location: 12045 }, Call { location: 11676 }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 11682 }, Mov { destination: Relative(10), source: Direct(32772) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Store { destination_pointer: Relative(12), source: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(10) }, Call { location: 11682 }, Mov { destination: Relative(7), source: Direct(32772) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 11682 }, Mov { destination: Relative(9), source: Direct(32772) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Store { destination_pointer: Relative(11), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(9) }, Call { location: 11682 }, Mov { destination: Relative(4), source: Direct(32772) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(5) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Store { destination_pointer: Relative(3), source: Relative(8) }, Jump { location: 12079 }, Return, Load { destination: Relative(7), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 12084 }, Jump { location: 12107 }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(13), source_pointer: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(6) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryFieldOp { destination: Relative(17), op: Add, lhs: Relative(15), rhs: Relative(16) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 11772 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Store { destination_pointer: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(15) }, Store { destination_pointer: Relative(11), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Relative(14) }, Jump { location: 12107 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, Mov { destination: Relative(6), source: Relative(7) }, Jump { location: 11915 }, Call { location: 11407 }, Load { destination: Relative(4), source_pointer: Relative(2) }, Load { destination: Relative(5), source_pointer: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 12119 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 12125 }, Call { location: 11673 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 12132 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 12556 }, Jump { location: 12138 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(6), source_pointer: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 12146 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U32, lhs: Relative(6), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 12153 }, Call { location: 11670 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(10) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(9) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12173 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(5), location: 12528 }, Jump { location: 12176 }, Load { destination: Relative(5), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32838) }, Load { destination: Relative(8), source_pointer: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 12196 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(13) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(14) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32838) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 12222 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12226 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 12477 }, Jump { location: 12229 }, Load { destination: Relative(8), source_pointer: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 12237 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Direct(32849) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32853) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32857) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32853) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32857) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32852) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32850) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32847) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32852) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32856) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32863) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32850) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32848) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 12414 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 12440 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, Mov { destination: Relative(17), source: Relative(16) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(18) }, Mov { destination: Direct(32772), source: Relative(17) }, Mov { destination: Direct(32773), source: Relative(19) }, Call { location: 23 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, Store { destination_pointer: Relative(17), source: Direct(32844) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(10) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(16), size: Relative(15) } }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12442 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 12452 }, Jump { location: 12445 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(6) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Store { destination_pointer: Relative(2), source: Relative(7) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Jump { location: 12556 }, JumpIf { condition: Relative(10), location: 12454 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32843) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 13 }, Mov { destination: Relative(13), source: Direct(0) }, Mov { destination: Relative(14), source: Relative(7) }, Mov { destination: Relative(15), source: Relative(5) }, Mov { destination: Relative(16), source: Relative(6) }, Mov { destination: Relative(17), source: Relative(11) }, Mov { destination: Relative(18), source: Relative(10) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(12) }, Call { location: 11416 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(10) }, Jump { location: 12442 }, JumpIf { condition: Relative(11), location: 12479 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32845) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32842) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32843) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(11), source_pointer: Relative(19) }, Not { destination: Relative(15), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 12503 }, Jump { location: 12525 }, Load { destination: Relative(11), source_pointer: Relative(13) }, Load { destination: Relative(12), source_pointer: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(12) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 12511 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(19), source: Direct(32773) }, Mov { destination: Relative(20), source: Direct(32774) }, Store { destination_pointer: Relative(20), source: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Jump { location: 12525 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(11) }, Jump { location: 12226 }, Load { destination: Relative(5), source_pointer: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 12536 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11794 }, Mov { destination: Relative(12), source: Direct(32773) }, Mov { destination: Relative(13), source: Direct(32774) }, Store { destination_pointer: Relative(13), source: Direct(32837) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32840) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32840) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32837) }, Store { destination_pointer: Relative(7), source: Relative(10) }, Store { destination_pointer: Relative(9), source: Relative(12) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(5) }, Jump { location: 12173 }, Return, Call { location: 11407 }, Load { destination: Relative(4), source_pointer: Relative(2) }, Load { destination: Relative(5), source_pointer: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 12566 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 12572 }, Call { location: 11673 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 12579 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 13003 }, Jump { location: 12585 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(6), source_pointer: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 12593 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(5), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U32, lhs: Relative(6), rhs: Direct(32843) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 12600 }, Call { location: 11670 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(10) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(9) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12620 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(5), location: 12975 }, Jump { location: 12623 }, Load { destination: Relative(5), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32838) }, Load { destination: Relative(8), source_pointer: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 12643 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(13) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(14) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32838) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 12669 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12673 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 12924 }, Jump { location: 12676 }, Load { destination: Relative(8), source_pointer: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 12684 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Direct(32849) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32853) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32857) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32853) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32857) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32851) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32867) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32852) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32855) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32850) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32860) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32847) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32852) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32866) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32856) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32862) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32846) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32868) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32865) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32863) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32858) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32864) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32850) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32859) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32854) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32861) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32869) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32848) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 12861 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 12887 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, Mov { destination: Relative(17), source: Relative(16) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(18) }, Mov { destination: Direct(32772), source: Relative(17) }, Mov { destination: Direct(32773), source: Relative(19) }, Call { location: 23 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, Store { destination_pointer: Relative(17), source: Direct(32844) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(10) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(16), size: Relative(15) } }, Mov { destination: Relative(4), source: Direct(32838) }, Jump { location: 12889 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 12899 }, Jump { location: 12892 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(6) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Store { destination_pointer: Relative(2), source: Relative(7) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Jump { location: 13003 }, JumpIf { condition: Relative(10), location: 12901 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32843) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 13 }, Mov { destination: Relative(13), source: Direct(0) }, Mov { destination: Relative(14), source: Relative(7) }, Mov { destination: Relative(15), source: Relative(5) }, Mov { destination: Relative(16), source: Relative(6) }, Mov { destination: Relative(17), source: Relative(11) }, Mov { destination: Relative(18), source: Relative(10) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(12) }, Call { location: 11859 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(10) }, Jump { location: 12889 }, JumpIf { condition: Relative(11), location: 12926 }, Call { location: 11676 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32845) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32842) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32843) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(11), source_pointer: Relative(19) }, Not { destination: Relative(15), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 12950 }, Jump { location: 12972 }, Load { destination: Relative(11), source_pointer: Relative(13) }, Load { destination: Relative(12), source_pointer: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(12) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 12958 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 2 }, Call { location: 11794 }, Mov { destination: Relative(19), source: Direct(32773) }, Mov { destination: Relative(20), source: Direct(32774) }, Store { destination_pointer: Relative(20), source: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Jump { location: 12972 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(11) }, Jump { location: 12673 }, Load { destination: Relative(5), source_pointer: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 12983 }, Call { location: 11413 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 11794 }, Mov { destination: Relative(12), source: Direct(32773) }, Mov { destination: Relative(13), source: Direct(32774) }, Store { destination_pointer: Relative(13), source: Direct(32837) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32840) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32839) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32837) }, Store { destination_pointer: Relative(7), source: Relative(10) }, Store { destination_pointer: Relative(9), source: Relative(12) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32842) }, Mov { destination: Relative(4), source: Relative(5) }, Jump { location: 12620 }, Return]"
  ],
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher(_build_hasher: B) -> Self\n    where\n        B: BuildHasher,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize(&mut self)\n    where\n        B: BuildHasher,\n        K: Eq + Hash,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n#[deprecated(\"This functions is deprecated in favour of external verification libraries. To verify Barretenberg proofs, it's recommended to use the library https://github.com/AztecProtocol/aztec-packages/tree/next/barretenberg/noir/bb_proof_verification\")]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
