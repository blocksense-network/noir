---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRahsxEEX/xc9+kDQajSa/UkJwEqcYjBNcu1CC/70zO7qbtBAo6ovvWa91LK3GkvD75nn/eP3+cDi9vP7Y3H173zyeD8fj4fvD8fVpdzm8nuzd903yl5I3d3m7KSWCImoER7QIiegRugSliLBQWCgsFBYyC1m0CInoEbpETRE5okRQhFmqBUe0CInoS7BdsYVdNQtdoplTLHJEiaCIGsERLUIieoQuIWGRsEhYJCwSFgmLhEXCImGRsPSw9LB0s3QLiqgRHNEiJKJH6BJq7dTC5yFZ9pEamVMCZEABEKACGNAAAnChTVzOCZABBUCACmBAAwigDyguLA7enBwqgAHevDoIoAN0wFJ1C2RAARCgAhgAoddZZocCIEAFMKABBNABOoATAGZ2c3MgQAUwoAEE0AE6wKs4IANgbjA3mL0gszgwwL+iOwigA3SAF2dWBxMWLwAvyQAGNIB5ik+ll2aADlDzFJ9czYACIEAFMKAB3OwF4HUdoAHFCzsgAwqAABXgwuoggA7QAV7YARlQAASoAAbAnGH2wi7soAO8wgMyoAAIUAHj8ZbSAALoA7ywS3Pw5uJQAQxoAG/eHTpAB/gSG5ABBUCACmBAA8BcYa4wM8wMM8PsxV/UoQ7w+iEfl1cLLftIBhQAAawVFQcGNIAAOkADyKslIAPc7LuNV0tABTCgAQTQATrAyyYgA2DOMGeYvVqoOriQHXqMi7w2lne8NgIIUAGMDzeAANzTHHSAr4cBbhaH8TCJCFABMBPMBDOhh8u+vGzhCZABi/l2225wmHi4nPd7P0t8Ol3YmeNtd96fLpu70/V43G5+7o7X5UM/3nanJS+7s921Wtifni1N+HI47p1u24/W6eum2kZblbUx/3Pr7KvF0jw3/qp9+bo9Cbpeqa7ty79/v3R8f28T/bd1SYfAFqSZHpihr4beZwzFN7sw2AI1ZeAPQ0v/bWgzBkkVBskyZahpNfDUXJS+9sHWvRkD+RYQBvuNTxkyrYYy8yS5ogtcZ+qpreXUpqrJDqEQGOqcoa4GKVOGjnXJzrtTfah+ngpDLVN9YFlHwTLVB66fDHnKoB8LbJ6aTaLVQDz1HKitiyz1qVG0vlZU6zpnWJ+kpKlRiMq6VeSZ36UdwNcnqXXGIA0LnLSZ1UkbrZv11AiSrPOQ5io6rWt0TlMzqQUbrk6tTlowBK1Tz7BjAKr0f3PwV/t7u9o9Hc5//D90c9P5sHs87sfly/X09Onu5dcb7uD/pbfz69P++Xreu+njTyZ7+VbsuFJ6uvc/GOyS05bZL7Lf69nu0f3Nu/Ib",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
