---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZddbttADITv4mc97JL7m6sURuA4SmBAsA3FDlAEuXvJ1VBpURht133JR8Uaaj2jpayPzfP4dH19PBxfTm+bh28fm6f5ME2H18fptN9dDqej/Pdj4/SPd3nz4AdhAetC70APEsibB1IGMIIJzGAB60KSfqz0IIEMSr+gjGACpV9UFrAuZAd6kEAGAxhB6ZeUGSyg9MvCIP2K0oMESr+qlH7eaRGtSFaohepNKFZUFFFdpE+pFrNVoldrrmezPZvv2YzP5nw26zO8X4pghS6mwP6lyFYUKyoKQsSEiBkRMyJmRKwWelhIsJBgIcFCgoUECwkWEixkWMiwkGEhw8EAAwP8C7Avwr0I8xoRcUTEERFHRBwRcUwgIo6IONaFyS1RJ0ScEHFiMCxRJ0s4WcIpW2EJJ0s4Oys8oqYWtfZozcAMFrAu1G3RKGqSK+i2aGQwgBFMYAbLQs3Ei7maSWNdqJk0epBABgMYwQSiX0C/gH4R/TQTL6FpJo0MBjCCCcxgAetCzcRLaJpJI4EMBjCCCcxgAevCjH4tDQk9E8hgACOYwAwWsC4sDkS/gn4F/Qr6FfQr6FfQr6BfxR6u2MIVO7hGEJOhYjBUzIVqY8HZWHAe29mRFWxFsMLGwr9MdT/0TXX6w1TnG1M9DP9nqscbUz1hJOUbU71gJNXh5lB3w82h7jGYZMvLnrcH6+NlHkfd/z89aeX5e97N4/GyeThep2nYvO+mazvp7bw7Nl52s3wqVxuPz0Jp+HKYRq0+hy+1uy0lveebmHxa5fHv9a6u+tyjp2B6ivddn7rWT6ue8336cKd/ffqw6mO+7/qJe/Rl1VfXo09p1fv71t+l52r3H9ee+y+wrT903T+hrvrao49M0Meu6ye275+Su0+fa4c+F4a+uJ77Pydvet9z/1bO0FcuPfp1/bWEDr08em0BUvasQB7NtgXk6dy3hrKuQR7E93YIvutb1GIdiLvWQIHWDuXXe3krR7v9Yf7tPZZie8Oi1H59k3wJ/fmsMbzv5sPuaRr1TO11Pe5NKIeX72f7xF6Rz/NpPz5f51Ev8vWeLP2+yYyRcLf6c0qO5DVkkFcMPfTtsA7yZrG1d70mkDMcrwLyg/wAWgVZ2uW0Xd8Y9Bx2A8evlnJGlDP0m/8A",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
