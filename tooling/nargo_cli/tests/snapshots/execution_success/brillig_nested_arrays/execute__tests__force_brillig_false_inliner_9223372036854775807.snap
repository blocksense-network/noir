---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjdauMwEIXfJde50O9I6qssoaStWwIhLWlSWErffWekM26XJUbI7E2/48ZzLM1IY6zPzdP0cH25P5yeX983d78+Nw/nw/F4eLk/vj7uL4fXE//3c2PkjzVpc2e3zAyWRmtACzrQb+6cMIARJDCBGSyNzoAWdCD7eWEAI0gg+wVhBkujZ78otKADPRjACBKYwAyyHzGDAS3IfknIflnIfkUYQQIlf0ZEVlEgoqTQfrFqmeYIK5Y15UlznjTpSbOeNO1J856R+CaCiqiCVCQVWUWBkPw3YVWIc0EJmggqogqpqkEZmsgqpLAWlWjCqnAqvIqgIqogFUmFODuUpAqpSRPi7FEVF1AWF1GXJqIKcSaUpomsQpwTSuMkCdGqcCq8CnHOXD5XyyfrUuZNYAIzWBolz5UWdKAHAwg/Bz8HPwc/Sa/ntEh2Ky3oQA8GMIIEJlD8OIeSVKHktNKCDvRgACNIYALhJ6n0XBLJZKUFHejBAEaQwARmEH4EP4IfwY/gR/Aj+BH8SPy4xpTB0pgMaEEHih8vhRTACBKYwAyWxmxACzpQ/HjZ5ABGkEDx4y2VM1gaC/sFrnexoAM9GMAIEpjADEpfrA3cqLAqxFK2kRFP2UZGTGUbmaiCVIhvRHNqokBIcwqE5hS0OTXhVQQV4py+ePvoS+f+cp4m2Uo/3kL8bnrbn6fTZXN3uh6P283H/nitN72/7U+Vl/2Zf+UZTqcnJhs+H46TqK/td7S5HepsRLCzNIfH/nhT5vg0Ei8Nq8W7uO75bmj8bo73aV18WJm/tfHkR+LzHF/MSDzRHG/XjX8o3hddP76MrJ/gdfxhqP6hzPFlJD7K66LGx6Hnk9f5E92sn6WVDWDRoKcDLBr0tIDOEbixKfQ0gU6DsDaJqw1u94FFg55GsGjQ0wk6pzDUCn5shVQG4lP2iM/mZg2k0Kt60ZJBVzNaNOjpRksGa9tRIqs5tDeXodRpVT/zcWU/WzTo6WeLBj39rHMEbmwKPf2s0yCsTeJqg9v9bNGgp58tGvT0s84pLBiE/9fQinx61fji80j83BBLDgPx/CWlA2A5MgL+qtIc8nfV2BjyPAY+1FnrEOzQLEpWB+eHxuCCmx3y38t5x1f7x8P5n/PL6OrhWvT1kCbyWpLTP+lIH/vzYf9wnORO8bqeHjWQLy+/3/QXPRp9O78+Tk/X8yQP+T4fZb9f/M7j4u7kU5iv+IBoa2OWS1svy9aS3ekxXw3gO4z/DqB6hwaQ48uwmw+W6j181se1m+/hwy4+hNt9ydz/AA==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
