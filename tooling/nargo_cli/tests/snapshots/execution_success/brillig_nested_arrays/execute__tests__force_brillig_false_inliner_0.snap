---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZfdaiM5EIXfxde5kKr0m1cZQnASz2AwTvDYA0uYd98q9aeeXZaBpc3c5FPHXdXyOTpW63P3dni5fXs+nr++f989fvncvVyOp9Px2/Pp/XV/Pb6f7b+fu+B/Yqi7x/hgbLAvjAFGKFB3j+JMMMMCK2ywLxTrp84IBSq0fsmZYYHWLzsb7As1wAgFKkwwQ+tXnBU2aP2qMVm/5oxQoPXrTusXgw/yHJQ5cAldm9TmoDPIrqL8tNEitpf404bqdcpep+51Cl+n8nVKX9F+GaQ58Mk05F8GdQ7aHHQGgsWCxYrFisWKxS5hREJBQkFCQUJBQkFCQUJBQkVCRUJFQkXBhIAJ/RLyZdTLiDeIxRmLMxZnLM5YnAvE4ozFuS8sYbG6YHHB4qIwLVaX6XCZDpc6B9PhMh2uYQ4iVsuw2nuMZrDCBvtCj8WgVYu18VgMKkwwwwIrbLAvdE/FTHBPBwUqTAvdk2hmjGXtzLDAChvsC8eCdkYokH6Zfpl+mX7uSTST3ZPBvtA9GYxQoMIEM/R+ZvJwxNlgXzjscEYoUGGCGdKvej9bJLXBvrAFGKFAhQlmWCD9Gv0a/Tr9Ov06/Tr9Ov36ktVOVANRDUQ1ENVAVANRDUQ1ENVAVANRDUQ1EtVIVCNRjUQ1EtVIVCNRjUQ1EtVIVIWoClEVoipEVYiqEFUhqkJUhagKUVWiqkRViaoSVSWqOqOqM6o6o6ozqjqjmmZU0xJVy+rcEJ+vl8PBc/uPHdL2zY/95XC+7h7Pt9PpYfdjf7qNm75/7M+D1/3FPrWnHc5vRmv49Xg6+Ojnw6/q8PtS8bU3iiWWtTz///rQ1/q6pV7SrJd83/Nl0/xlrdd6X326U79t9Wmtz/W+5xfdUt/W+h621Jey1sf75r+pXvtcf9q3rL+kc/5p0/pJfa3vW+qzCvV50/OLzu9fSrivvvYN9bUp9S1sWf+1xFkff7t+5V4B5A8q0LVS37VtqV8V7C1tqLete07AhltmYJv5DKHt59vm0NY52NZ9b4cUN32L3mYH0U1zkCRrh/bvxfRkV/vX4+U/J2Cp42wmbby3+27ib0Be/GN/Oe5fTge/03vdzq+z0C6vf33MT+bh+uPy/np4u10O/pBfJ2zr98V+5czcJ38Bsys7wDzY4cQv47jsD3YmeZqnxFFgdwRdC+zN3l6Z1oJq7Wp5Ws8afo/9EKa43pHsjmR3+Df/Gw==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
