---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91ZzY7aMBC24wRI2FVR2wdJWFj2iFS2f7c+QhaWQ3vrvVIeoqe+UqU+U2WtByYfExMUW0g7EnLION98Mx47zlirF9HuZyV1baJOhfqsXVsOkyogVhmTp47EsxVkrbqFdP9cm8PzVm8COpyD3ZD4D+XiKRf8C8j/LmeYEfDnhJ/GwS/HDudL08ZXYPdWtScvf4Z0PMe+Ot3E6en6vbvOAS/GuHNOoeP2TuCfMN+sfGiO8Qhk9zBfNuGx54T9GB77jrA/hsdeEPan8NhLwv4cHvt+ql7mxLPDo3lkjqYO+RV5HVhosKdUex1QYL9QUde9SoM94oPxSSB2mcB1BjorNDe1oDPCvcSDtQmIRXPvVp36j7nAfQ35TuubC2S/UFFzs/LFNRXiSrEbCVxnoLOCuTAS7IwEOxLWpmlz4Jxx/Di/a4wf2S9U1HyqfHGV5gXFbixwnYHOCr1TtKAzwr3Eg0XvEMwhwreSC/wCxmvVd/zIfqGi5lPli6s0Lyh2E4HrDHRWaM3Tgs4I95IOLFyDhmKZQFhWaP8QglcWiBf3MfL+YoVzmouULyPQ5eAz1xVMx/f7KAb+c3+t7R8MF/shV54bxBtjaGXt2nKY1GSLxj4TeKSgo77fgF+kdaJ8y3AV2Iq8Z7mX1msFfLhIuUDc7Hj+cdeX5sIY/I0U64vnkwFdrPlE/l46n3heTKAv9c+Evpjz1Hfn2th1ACnnydZUHeOcNuHtrx7Kkuya5hgHHBduP4P+391/PubUpgN47ld1tb+r9/Wy3u0W2xrjpCBO/DsY9/bS+EUe1znlEl9vfbyk+a7C8akw93+61sbtL3CI+V3I15ykIyYZ8JnE4XPYl/IaL+730b79TYX+Ul7S/Ruh/5T1Iftv1On6eQPP5RALfq3hftbxXML0vP8v1/Kc8PlcqHA+G8FnDXaSDn9wP5t7uF5jPCce385xRdvFhVynZ/CRK39+2sP2ZIDtFGzngm2l5He6EXzwxdQXI8kvjjkGntx2Abx0B298rmueSusgztPfrpXmqVTjSjy++2oq0hhxH7C2gWeEml3j/lELz3XVszGmViK/v3vXs8l+0eHzOgyfw7sqAT5duS19W+B3PN/nYQ3TCHakurmEtQmI9di0/ZHOoSOfofauh9K9QkXNzcoXV2mu41kAf3YGOiuYC9IZilQ3l7A2TZvDFc6meo/fazmbwnr2kPMkrGdf4Typdz37tZwn0Zrne0f3OU/CNWgolg6EZQXr2UN4mUC8uI/SPoXG1u5TQtc7tsv7p+1iWZfPlf07P1fv+A/JWXgaEScAAA==",
  "debug_symbols": "pZfdauMwEIXfxde5kEa/01cppaSpWwIhCW6ysJS8+2p8fNzuQmFRbvp9aXqOZXUsks/hdXy5vj/vj2+nj+Hh8XN4mfaHw/79+XDabS/707H99nNw9kP88OA3gwgQgAgkIAMFqIDOCA5AS2gt0hCACCQgAwWogM6IDmgtoUGAAEQgARkoQAV0RmotscEDAgQgAgnIQAEqoDMyWjJaMloyWjJaMloyWnJrSQ0V0BnFAR4QIAARSEBryQ0FqIDOqA5oLaVBgABEIAEZaC3aUAGdoQ7wgAABiEAC7D/tGsvCulBB7+wX3kQX8Y7iKUIJFBsnMUmUTCmUStFFxFGsOZgIJVAixZqjSaYUijUnE11kHtpZPEUogRIpiZIp1pxNKkUXsUH2xcSaq4lQAsWa1cQeDNtVG2pIodjjYVtnoz2LDTekNYtti82y2L3bNEMKpVJ0EZtqiKcIJVAihc024WJ7aDMOqRRdxCYd4ilCCZRIsWbbQ5t6SKFUii5i0w/xFKEEijXbzttzAMmUQqkUXcSeCIinCCVQ2KxsVjYrm5XNujSLm5tvt83Ao/b5Mo2jnbTfzt52Ip+303i8DA/H6+GwGX5tD9f5jz7O2+PMy3Zq77ZZGI+vja3wbX8YzW6br7T7OaqhLGENdY2n/8/XwHyNHXnvIhfQtGcF7WxRNrQzpGsNdV1DOz3ubYi+6y5yWhtq3z5oZYOEH++i/tyQQ1wKcnb35Yt23IF4boH43JNfB0F86ckL1y+S7ru+dK1f1nwo9+XjnfvXl49rPpX7rp9DT76ueXU9+ZzXvL9v/V35oJy/oD3zFwPXH7vmJ+qa1558CrLk0z/Xf2qvtrv99Nc3i5s1Tfvty2FcXr5dj7tv715+n/kOv5mcp9NufL1OozV9fT2xj5eP3vmNd/nJPh22l+LCRlx6utnl/wA=",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
