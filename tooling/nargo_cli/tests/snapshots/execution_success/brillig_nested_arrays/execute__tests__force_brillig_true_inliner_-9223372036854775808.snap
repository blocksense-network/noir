---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1aXW7TQBAee+MkdloRgbiHnSZNHyuR8vvEEUxKeYE33skpeOJKnACOgMQV0Ko7yfjLeOPIuwqqOlJlx7P+5pvZ2R/PNqF7SdyflYG7prQv3ObaXct+UgXEKmPyTCLxbAQ5oXZh3V93zeF9qzcBHc7Bbkj8q3K+zhX/AvK/yAVmBPwZ4w/i4Jcjh/N208QnsHtOzcEr32GdzLF3Tjd2er5/7u5zwIvR75JT6Lg9U/inwjcrLza7eASyux0vq/DYM8a+CY99wdgvw2PPGftVeOwFY78Oj33J2G/CY9cTuh9vnxwej1GzM7XN3chzzDwBe0TNOYbAfkFR59QqAXvMB+OTQuwyhesUdFZ43CeKzijPUg/WKiAWj+tz2vcfc0H6GnK97JoLbL+gqLlZ+eI6UOLKsRsqXKegs4K5MFTsDBU7GtZq0+QgOWP/SX6n6D+2X1DUfKp8cdXGBcdupHCdgs4Kr1eJojPKs9SDxesT5hDjW8kVfgHjtezaf2y/oKj5VPniqo0Ljt1Y4ToFnRWe8xJFZ5RnaQsWzkF9sUwgLCu8NwnBKwvES/oYeX+xxDEtRcuXIehy8FnqCqGT3xIoBn5Lf63tLwIX2yFXmRvjFswM2lrhfWQGbd+7a+S1vXwqcAlsRc6BhbYmEvCRcqi/frj7Y/tr+B/4q+1RDOjk+oI5L8dKn5z/KXCxHUvk+slc2+sS+ItzntQNe8TCiFj8FrjYjmVCu7losGniXLvnZQ9ZXpUl2zMOP6N97tJ+Bu0/u99yXuTroAfPu2Vd3V3Ud/Wivr2dr2ucS6ykIk7y2xb369hXhnZ5FqkeNOPc4XhlB3hp+3QKx6fKgM9Xd7Vx+wMcYn7rybkmbYkJrhHjOHy2e01ZE8Y9PNq3fxOlvZaX/PxMaT8Rbdj+E9rfY5zBeznEQt4n8DxreS8Vetn+m7vKnPD5XFA4n43icwJ20hZ/cL7OPVxP0Z9jj2+HuKLt4kiukwP4yFW+P+lge9zD9gBs54ptUuxgvuB+XYupL0aaXxJzBDyl7QJ4JS288b22carNgzhOv7urNk61ulXq8d1XJ9H6SNvbkmJHxkK+d67o2tZx7YyJ7yOv351r1Gy/aPH5Ogyf7VqVAp+23Na+RfDbXO7zsC5pFDtaLVzDWgXEutk0/dHOrSN/M3SucfKzgqLmZuWLqzbW8ZtHvjsFnRXMBe1cRKuFa1irTZPDCc6bOvffQzlvwhp1nzMirFGf4Iyoc436oZwR8ZznW6O7nBHhHNQXKwmEZQVr1H14mUC8pI/aPoX7FvcpkfP/UjsfIuB5bP1Oq3XjmJJi4Lf099h6thyXI2jL7bFmbQXr2dz2l7vG/h8frZ7dtnd9rG8/1rdlOxabJ6FrpevF5Yf1fFGXHyv7c3aoVvoPifLNU30rAAA=",
  "debug_symbols": "pZfLbtswEEX/RWsvyOFz8itFEDiJUhgwnMC1CxSB/70zurpqsyhQ0Juc48hzRVFD0fqcXufn6/enw+nt/cf08O1zej4fjsfD96fj+8v+cng/2X8/p+B/RKaHuJskARkoQAUa0AFdkAIQAaQkSxFDBgpQgQZ0QBfkAETAUpIhARkoQAUa0AFdUAJgKdkgQAIyUIAKNKADuqAGACkVKRUpFSkVKRUpFSnVUopBF7QARECABGSgABWwlGrogC7oAbCUZhAgARkoQAUspRs6oAs0ABEQIAEZsBQ1VKABHdAFMYSVEYx+64NLpAglUTKlULyZokujdIquIoESKULxZHHJlEKpFE9OLp2iqyztml0iRSiJkimFUimN0imebLcvegtDIsWTq4snN5dMKRRP7i6e7LPqLQ3RVbytxafOGxsiFF9oPi3eyeLX7r0M0VW8nyGRIpREyZRCqRQme3+Lz6F3+CLe45BIEUqiZEqhVIon+xx6z0N0Fe97SKQIJVEypVA82WfeVwGkU3QVXwuQSBFKomRKoTBZmaxM1jVZQqBEilC8vLo0SqfoKr6aIJEilETJFB9Yc6mURumr+NqR7iKURMmUQqkUz1GXTtFVfO1AIkUoieLJervtJm4xT5fzPPsO89eeYzvRx/48ny7Tw+l6PO6mn/vjdfnSj4/9aeFlf7aj1uPz6dVogW+H4+x22/2pDv8u1dTWYk19Ky//X98T63seqI8hcwCmIyOwB6wywR6kQ2Po2xjsEXpvQo5DV1HLltDH5kE7E6zlRhIky5bQw0CCRF6ELbmR+u1W2kodqfcHHOql3Hd+GRq/bPWp3Vef75y/sfq81Zd23/lrGqnvW70O9V+tW328b/xD9UnZf0lH+i8njj8P9U/WrV5H6kviA6AMnb8mXn+t4b76pgP1bduNehjp/1Yj6+PX/n20T/uXw/nLO+HNk86H/fNxXj++XU8vfx29/PrgEb5TfpzfX+bX63n2pD8vlv675lsMaWdbyaP/yLePYt0gqT/e/PS/AQ==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
