---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 7,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use poseidon::poseidon;\n\nfn main(x: [Field; 7]) {\n    // Test optimized sponge\n    let result = poseidon::bn254::sponge(x);\n\n    assert(result == 0x080ae1669d62f0197190573d4a325bfb8d8fc201ce3127cbac0c47a7ac81ac48);\n}\n",
      "path": ""
    },
    "55": {
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n",
      "path": ""
    },
    "56": {
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse std::default::Default;\nuse std::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        std::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        std::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    std::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
