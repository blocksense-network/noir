---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdbuIwEIXfJddc2OO/cV+lQhWlaYWEAFFYaVXx7jtjz0m7F1S77g3nC/icJONxYj6ml/n5+va0O7we36eHx4/p+bzb73dvT/vjdnPZHQ/y7cfk9KOk6cGvppK7lC7cpTZh18V3oS6hS+zSU7incE/hnsI9pfaU2lNqT/FOlFQlIKiKNaqyqZiTqHemMi6rZlMZX1TZtHYlGc+q3pRMg2k0TabZVPKqKpvWrsGZelO9fqcQABGQABlQAAzQmuj9RwfwAE3WksQAiIAEyIACYIAmayWTA3gAAQJAk7XMKQEyoAA0WUufqkF2AA8gQABEQDJoPaVT07pKoXWSFr31UgM9u5a3dVADBlSD1kcNxEVazBoBCZABpQO1PvMKARABCaAufxObLgzv9e5ajxEgACIgATKgABhQDbQnO7Tkm5wJ6/Hpcp5nPeuXBSrL9rQ5z4fL9HC47ver6ddmf22D3k+bQ9PL5iy/yv3NhxdRCXzd7Wel2+rT7e5bicnMxGGxp3/2h8DmD6EO+GPN5k+ORs6fAs6f+Gf+PHL/MUbzx5hG/CEt/jziJ1r85Wf+NFL/WAr8POTPvPiH6p+W+nH82f2P+T36J/qR/osuL/6R9ZP1ldH8eaj/E06fR7pP3t5ml2fkiH+ZPXlNjPgJ1ZfX8IB/aV4eWTuF8eDlNOKvAVdfkx/xZ0xe5btzT/Gbh79buo+c/1LA/0jwZUmgdCfh2w7KyxT6oRUgL+W4JBR3tw48VIe1HGy2u/PfG2fdLOuDQ3fL2oK6tWlau+qGuak3JdNgGk2TaTa1PLY8trxqedXyquVVy2sbIKlC2/+oZtNiyqa1q3cO4AEECIAISIAMKAAGIFn36dQ24h5AgACIgATIgAJgQDUgJBOSCcmEZEIyIZmQrBt7YtvZd6gGurfv4AEECIAISIAMQHJAckByRHJEcmzJN23G827zvJ+1obTjroct+ksOL79P+AV/3U7n43Z+uZ5n7cXP/2/y8UiyCinwejXJ5T5mWhVa66TIgZcXrC9BD72ODHVF0a+xydXxVUY4XgwyjVKa9U2b/w8=",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
