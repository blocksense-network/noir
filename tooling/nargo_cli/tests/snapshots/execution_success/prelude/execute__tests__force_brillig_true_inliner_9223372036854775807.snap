---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/82aX27aQBDGdwEbbPPHQGNecgiDSaFvPPQibihSX6qq6gFyrL60Z2us7tib0cQQ+ZvII6HFWfKbb2fG9qzBmsasG0emgxHkrxsjNw68+eHz6+SO8262jZhfJP+Y7/eRsD6g/iJyTKvDz4mvFP987Difnxq+vxbyO3l+Jd77qWnqQ2v9lD/N9a9b1py4tf5uWauFaSnEtQL5u8iLH56flzPH8y9AlsUu0Mnj3jJ/hq3TMP8x04q+rlnmj/Tw+FCuKXahoDUV5ngNhoKfUPAjsQZAFsVct9YOX6R6wvF39bkSqvA/1vrHOvxPxJ/o8L8SP9Lh19fCWIVflMRPdOqz7gumOvw6PjMdfl3/c538Hoi/UOHvHomf6uiv+Usd/gPxVzr8I/HXKvyirv8POvV5pvvlnWmM9xqZ93fcvX17vrXXIP8x06rVa2RMD48P7zU2gtZUmOP38I3gZyP4kVgBkBUCWWMgawJkRUAWMvZxT3UlQNYUyJoBWX2t1TmQhayJRU91pUDWEsjqa00gz8cVkNXX6+oayKI+TuobKzu5Me9opFXqZaTnJm1rk3qfqoYoXz9+fvv+yzDjD694EDPPiSTg/pX/lx6KWe+9fzy8Mn8vsG55+KbUgBaW+TNGbojJ/3s9fLtjel4rIopdJmhNhTmeP6lYM8GPxOIaeL4r083f7Rsanj+roqc9f1aI61vzx8+vLvkLgKwQyBoDWRMgKwKykLGPe6orAbKmQNYMyOprrc6BLGRNLHqqKwWylkBWX2sCeT6ugKy+XlcHQBbf0Pjsyk5uzLtZ3csMBa1tGxrpi2MrfP7NGxruaHhFAGJDM7gyL21oqhsfNQujp2YO1Wgejv93m5UNHT8wLxNlmP+Aff6PO/aLnMZRB52XQ7m9FOWlfCjP5/1juWL8yvxfqfwDEEOBCgcmAAA=",
  "debug_symbols": "pdbNbqpAGMbxe2Htgpl5P2Z6K03TUEsbEoKG6klOGu/9DD4PPXZBF3bjH8X3JxIc+Wxe+5fz+/MwvR0+mofHz+ZlHsZxeH8eD/vuNBym+upn0y4PITUPYdcEQRQxxJGMlGtiiwQkIlAilAglQolVkZqMlGtSiwQkIgkRRBFDoCQoCYpAESgCRaAIFIEiUASKQBEoCkWhKBSFolAUikJRKApFoRgUg2JQDIpBMSgGxaAYFIPiUByKQ3EoDsWhOBSH4lAcSoaSoWQoGUqGkqFkKBlKhpKhFCgFSoFSoBQoBUqBUqAUKAVKaFs2sJFNrLDV0qXGOpvZ6lltaNnARjaxwiprrLPVK0sLulzQ1wY2sokVVlljnaUX6SV6iV6il+gleoleopfoJXqJntATekJP6Ak9oSf0hJ7QE3pKT+kpPaWn9JSe0lN6Sk/pGT2jZ/SMntEzekbP6Bk9o+f0nJ7Tc3pOz+k5Pafn9JbfQmiX5atdN8K6saxa7eWya9YF8fk09/2yHt6skHXdPHZzP52ah+k8jrvmTzeer2/6OHbTtadurnsr2U+vtRV8G8Z+2brs/k+326P16udwvb6/xvWe+eBb8/Gn+ZS/DsDDlxDjNyFtC+7rEbiXe+bF1/ncbs3/dAZiWr9Aau85gzfztjXv2/O5BM6XmLaOP//y/OV7zt9Tfdbth/nbv/5lkeahexl7Pn07T/ubvae/x3XPetdwnA/7/vU894t0c+tQHx9Dll3I5emyfN4/",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main() {\n    let _xs: Vec<Field> = Vec::new();\n    let _option: Option<Field> = Option::none();\n\n    print(\"42\\n\");\n    println(\"42\");\n}\n\nmod a {\n    // We don't want to give an error due to re-importing elements that are already in the prelude.\n    use std::collections::vec::Vec;\n    use std::option::Option;\n\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n\nmod b {\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
