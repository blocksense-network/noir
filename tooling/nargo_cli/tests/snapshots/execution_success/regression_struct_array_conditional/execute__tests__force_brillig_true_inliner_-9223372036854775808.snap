---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjNbiJLDIXfhTWL+rFddl5lFEUkISMkRCImXOkq4t2n3PZhZhazmGbD+RrwV05T7rT6a/O6f758fzqc3t5/bB6+fW2ez4fj8fD96fj+svs8vJ/mu1+b4i80Ng91uyGNsCW4RNSItnloM3oERXCERIwIjbAlZFr6jBrRInoERXCERIwIjbAlRlhGWMa00IweQREcIREjQiNsCS0RNSIsGhYNi4ZFw6Jh0bBoWCwsFhYLi4XFwmJhsbBYWCwsFpZaSmbNbJk9kzI5UzJHpmamr6avpq+mr6avpq+mr6avpq+mr04fz2wls2a2zJ5JmZwpmSNTM9PX09fT19PX09fT19PX09fT19PX00fpo/RR+ih9lD5KH6WP0kfpo/Rx+jh9nD5OH6eP08fp4/Rx+jh9kj5Jn6RP0uf7XGb61h6e8331pEzOnOuY58jUTIv0TV2LQwU0wFTW6kAABghgABTg4z8nt/pGr92hAhqgAwjAAAEMgAIsoJUCqIAG6AA3kwMDBDAAbmYHN8+z2XwKAiqgATqAAAwQwAAoAOYGc4O5wewjUYcDARggABeqgyX4AFRz6AACMEAAA6AAS/BBCKgAmAlmgtmnoRUHAQyAAizBRyKgAhqgAwgAM8PMMDPMDLPALDALzD4frToQgAECGAAFWIKPU2sOFdAAHUAABghgABTgZt+QPmgBFdAAHUAABsCsMCvMPmgLGHo29Gzo2dCzoWdDzwazwWwwW5p7KYAKaIAOIAADBDAAbiYHN8+J6z5oARXQAB1AAAYIYAAUAHODucHcYG4wN5gbzD5oTRwGQAGW4P+CAiqgAdw8HNysDgwQwAAowBJ8BgMqoAHcbA4EYIAABkABlsAwM8wM8zKDC6BnRs+Mnhk9M3pm9CwwC8wCs8AsMAvMArPALDALzAPmAfMyg3q9bje4+Xz6PO/3fu/5293ovEf92J33p8/Nw+lyPG43/+2Ol+VLPz52pyU/d+f56bxO7E+vM6fw7XDcO123v6rL30vniGbxnNFbOf9DfbvVy131cyZX1M9fFPWsK+rJd9VST72sqWdFPduKejHJ+lHaivrRsf4gvq9e1vz9QzvqdaypH3pXvTL2rzLfWb9m/yjd6mXN/reKeqt8Z/2a/q3c6tuq/jvmx6ivmZ/b/qFVvz8NXPxo0Ip6Llify5r1mbA+E91Xz2vOHyvOP9uq+oHrD+ua+ZeC9aWuWV8E13/RNdd/IfQvXO6s//P6/TiPdi+H8x/Ph65uOh92z8d9Hr5dTi+/ffr5/wc+wfOlj/P7y/71ct676ddDpvnyrevYUtHHeUvgR7QlevRnGH4weNu1+GFdvknzUB6v3thP",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
