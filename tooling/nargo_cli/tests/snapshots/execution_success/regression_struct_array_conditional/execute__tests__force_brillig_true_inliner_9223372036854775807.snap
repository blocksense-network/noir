---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjNbiJLDIXfhTWL+rFddl5lFEUkISMkRCImudJVlHefMvZhZhazmGLD+TrgD3e6TLX6c/O8f/z4/nA4vbz+2Nx9+9w8ng/H4+H7w/H1afd+eD3Nv35uir/Q2NzV7YY0wi7BJaJGtM1dm9EjKIIjJGJETEufYZeQElEjWkSPoAiOkIgRERYJy5gWmlEjWkSPoAiOkIgRoRF2CQ2LhkXDomHRsGhYNCwaFg2LhsXCYmGxsFhYLCwWFguLhcXCYmGppWTWzJbZMymTMyVzZGpm+mr6avpq+mr6avpq+mr66vSxp2ZaZCuZNbNl9kzK5EzJTF9LX0tfT19PX09fT19PX09fT19PX09fTx+lj9JH6aP0UfoofZQ+Sh+lj9LH6eP0cfo4fZw+Th+nj9PH6eP0Sfokfb68xXO+P2b6IlbPnkmZ02+ekjkyNdOns0zw1RxQAVNZq0MHEIABAhgAn/rm4OY5bNVXeEAFNEAHEIABAhgABaS5lQKogAboADeTAwMEMABuZgc3z39r8+UfUAEN0AEEYIAABkABMDeYG8wNZp+FOhwIwAABuFAdLMFXfjWHDiAAAwTgP6rFQQGW4BMQUAEN0AEEYIAAYCaYCWaGmWFmmBlmhplhZpgvG0F1UIAl+FS05lABDdABBGCAANzsi8S3hwBL8C2i+drwTSKgATqAAAwQwAAowM2+xnzQAiqgATqAAAyAWWFWmH3QLmDo2dCzoWdDz4aeDT0bzAazwWxp7qUAKqABOoAADBDAALhZHNw813P3QQuogAboAAIwQAADoACYG8wN5gZzg7nB3GD2QWvqMAAKsATfewIqoAHcbA5+M1IcGCCAAVCAJfgMBlRAA/hNTnUgAAMEMAAKsASGmWFmmH0GA9Azo2dGz4yeGT0zehaYBWaBWWAWmAVmgVlgFpgF5gHzgHlczF9f2w3uOh/ez/u933T+dhs6b07fduf96X1zd/o4Hreb/3bHj8uHfrztTpd8353nu1O5Pz3PnMKXw3Hv9LX9VV3+XjpHNIvnjF7L+R/q27VebqqfM7lQP68o6lkX6slX+aWeelmpZ0U920K9mGT9KG2hfnR8/yC+rV5Wzn9oR72OlfqhN9UrY/0q8431K+tH6VovK+vfKuqt8o31K/1buda3pf475seor8zPdf3Q0vWngR8/GrRQzxXrj9vK/HFB/1xW+mfG/PPS/DHh/JnotnpeuX6suP5sS/Xjev66cv5S8P1SV75fBPuP6Mr+I4T+hcuN9X/uH/fzaPd0OP/xYOrLTefD7vG4z8OXj9PTb+++//+Gd/Bg6+38+rR//jjv3fTr6dZ8+dZ1bKno/bwl8SPaEt37wxM/GLztWvywXj5J81Duv7yxnw==",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
