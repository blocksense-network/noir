---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
