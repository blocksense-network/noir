---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
