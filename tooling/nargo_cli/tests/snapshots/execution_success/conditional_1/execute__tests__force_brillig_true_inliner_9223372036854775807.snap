---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
