---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91dTYhkVxV+r+q97q7qn6runp+ocTIx/o1gqKqu6u4RwRGSTCY/k59JJsn8JKmu7k4mkwjiRjdSO8Gdi4AKgjs3ijsXbtwIggiKLtwILhSXIogIgpC+3e9MffW9c2+9Tr9blTsPhlf17nfP+e65555zf17XxNHRdeHgX5x9TuiOl2AuZffWya52ibJascK5bL5xiXx9cawEwLEaAMekZN9MI7++mQZg07kAOM4HwHEhAI61qNzxcz6KvI6fegA2XQyA41IAHJcD4LgSAMdGABybAXBcDYDjWgAc1wPgeCoAjqcD4HgmAI5nA+D4QAAcPxYAx48HwPETAXB8MACOnwyA47kAOD4UAMfzAXB8OACOnwqA4yMBcPx0ABw/EwDHzwbA8XMBcPx8ABwveOB4eNXhsyFtDl/M4YY5PDAb8mbD22womw1bsyF6HuqZzTyzWWY2o8xmj9lMMZsVZjPALLbNYtYsFs1izCx2zGLCTNbNZNhMNs1kzkyWzGTEJPuHMvkmGZhga4KZCRZmMBpnN85kOutClL/E4F+qHN1r2fcKlJd4aNOukd4y5W+3NvdqSvtK5L9Ry2SmXuR3+iJ/zg//1nwm57HhSD62RfRWCcd1qoB5HDCPWzBPAOYJC+YyYC5bME8C5kkL5gpgrgAmBsxTgHnKgnkaME9bMM8A5hkL5lnAPGvBXAXMVQvmOcA8Z8E8D5jnLZgXAPOCBfMiYF60YK4B5poF8xJgXrJgXgbMyxbMdcBct2BeAcwrFsyrgHnVgnkNMK9ZMDcAc8OCuQmYmxbMLcDcsmBuA+a2BfM6YF63YN4AzBsWzJuAedOC6QOmb8HsAGbHghkAZmDB7AJm14LZA8yeBbMPmH0L5i3AvGXBvA2Yty2YO4C5Y8G8A5h3LJi7gLlrwbwLmHctmPcA8x5hluGzXI9lGMlFPuYC261uz3Ou60rb8AUMaafonvejuxeTviga9QeWif565HNecfQCE+oTPmwf6etlwQxHfLgsGebbIWUplEn/mrnwDcCxbwmPWjTuvyX73UXPftebod9t3o9+V6WyZJhvx3H9Dm3Cfpd4sMWB3+359btOa3Z+12nfj36XUFkyzLfjuH6HvpUCbg8+72efpc9iDzaStbKv/G6udYU/6jLX/DC6d4m/VOGZ2FXsvIB4KqtBWTIc11PPviegB2UJj5Twu9n3RnafgzpSv6nonyP9Y7yVZ2yXmoKvKXjja7ezz4vZP+NDaxlA/G5uVDWKLXfUhc9EVzPKxy8p8+1L0o55pR2ie8GL7uKxTfTXI685/l5sWyA+bB/um5of+7Riko98aop9pC/rSpnIWsy+pyAL8bhPiXj8LPXx2beye1ORWSEOdaU9+AzH4Deobdg3Jx1vaJt50jNfoh70Vx5bvnxH5Ne9yD/ab2b/8LEfvORHflfkL4P8yIN9Vjzwb2+0cnNSHGdm3HyHfE7yLI57rFuDcsT/Jh7J/G72rKG0bcGiLwJ9K4q+hlK/QbIEm4CsBaXdKeG/l9199oW51kBuRLq09s0TL0/5bLeo/Vx8ovL4tDi/4py9pvBJCf8D4jmL/vQ7J2p1lqN8zo+n0+7Ce2uivx75zGGj+dgK8WH74FqT44fUbSplmBttMauh6NFkFYl/RWUtlihL8qfYBm150nmNFs+1vCR2Njnkp/Cc846Wl5agHPHfh7z08+xZQ6m/Qvo0X9K4NqK8b7MsqYdxtabISgn/i+w+yzjmagPiXWuduESubKO/Z3fTv7902KtEDm0eb0mU9xv2WcT/ing2oY7vfhVd2txM9hW0vTjMa4dtHnrh3DPx8QHaO8EYloJebE8UuWOe4FcVPNqfY9cqlHEecOnG+KzZummRVY30efCUcvuO6ForyEc+r2ffK4Bfc+BXiT/LXye8Fo/RhquEF91zFrzISwn/x+xu/PBR8MNDvcNRfennWYwH9DseDy7/NlfFYifEaz7fjPJ9ynMm3JdskkzNd8xVU55dyu6tk1190dcgLlqe88ijxbo4H2jjQ74nClfzmdc+gv8btQd1+M4t9/boD/79M/vcUNrnyjMY5w7bP/TCXx1XuJfH40qLP9peL88NEI/9V2Rer40r0VnUxi7+iOf5LK7teeyib1YVPO4dI/4/2X2W81ntfZvYchdb8TPuO6zHcz6Zp/4/u5t++R/ZAXXE5dmhp/GrAo9aPG4T19mOp/3nwmc7on9aZzvaWUoVnvF6x+deiy2eaPFnNRqdydjWpCLrPDyztRntzDEC+0nqFvU5Lc7EBfgkDj6av8RUD9dqmu6U8M2swO840GNWzdG+OSpLlLZ43jfOnTva8oFw0/wS+5j3bs5mDTG5ul0Zbx/+4FhVeeaK0fheCdeLLXfRw89Yj9YP2jtPuNd1Lh6vg75YVeryXpfg78QjmQ/TONPar80veAxqdo6VdmgxIbHISizt4vMZwV+gMejLn7UxyOe9mANO6iuutsu8oQ19+ijZIfZjh57GT3QZHl8lHj7e1zu4BiGtD1y501y8PlhW8BgX2Vfw/Nk1fnldKH70FfCjL0/HjzaL+pGGW1BwRdY5+G5hkXilvQ/IcRjjFeJ5zAr+Mtj6iqONi1Eep/Fi+1Un8FogXoK/Sv3u6d1PNY6KrmnFUV7nYZmx9zXKuWI/zLlYl3Ou4G9BX193+GmRPtS4ch/enE7sVftQdC1Gup/yWNTe/dXmaEViKNpHO79zzfe18zvbXGMA/blv8RHkh/aRcaf5pdT9MHIlZmk+jXLFpyf5/l3SjzlD01+FcsR/HWz1NZIp9bFNVUebbDniHI0pbV0hdcreoxNO2hlvw6K7aPwQ/DczkPGdbmUyP1d7Jp1H8fhxnUdpPqHtJ7BPfBt84v0Z9h231dV3ZduZ/Uazsza3xferzJUMx2Veyp63TnbN/IxV+kY7Y8V9WrbPLM/cyjwb0OypxZ1mlLcd77PhOMKzgfctMR51Ynxy5RiUe5dyjLZmMbgfkn7tvVKsm0I54n8M8eRHJFObL6SONmnzBXzXqBHlxzLHFM23XWNh0vlqSrqxr9csum025Bwj+J84cszaMduzruCRJ+9ZYlv5TF/zCe1Mn33iZ+ATv6YcM82+47a6+q5sO7PfaHb+qMVQtAHHUFd7NfucUvDoXxwnT0HZqsM+azO0jysHH9d3NXtqcacZ5W3XpDLt7AjHHo9n1Km956jlDpRryx22tVwGz8WJ30Kc+APlLYwTmLd+R7qbIFub63HMFfyfQPfvFR4umxXNYWgz/juO1QlyeQ6svS+FeI7Fgv8z5BZ5X6oR5eMV7w2gv4m+RQe/Uwo/7Z2JlPB/AX5bFV0m9i3yWrLI/Ksjn56ORleROHZGwZ8GjPBpRPk4dobK0N78nvm60lYtl6WE/4fS1tnFzU5bi5sY6zhuav2B+OP2h9isSXjsG+3vBjEnY5zg+PMvig/anA/r2uZ8aWUk89+ZTG2ewvtrUj+x6Fux6PsvxLhKZbI+bd7iei9McPf7vIXf/cLxznkZYyrG7wrFpEn7FZxjGopOzI1a33G/umKRZgOXzbQxrNlFdKM9T5OsSXP6dQvXOQte5HGOWMkagXlR+ztf2xoP+eH44b7S1ksYR3yOl63to3dADrkOR3bAs52I9KeEP5vZBt+tl/tJ/iOw/a1+e3+jv9/v9Xd3u4M+n2eYS/xMzjMObTcclWP8Mdd89h1/wwLxeKaA+AchFp+jHJoq+gzuiw5cbLkfylCeJcPxZ9pvW+BvfghedNeHeY5StghlGBvNtZR9R3uhLOGREv4LkD/Mhb/TIfWbiv4F0j/GW3mGcYZlVZVnmKcfIb/FtpeYj+69HzlH8vEZcxPfWYzKH1fdXn9r0N9qty9223vddm/SuCpbf39rY3vQ6Q62dnob/Y3N/rT1D3qbO4MDI7T22uZrZ9r6O9vbmxc7O63u1u5gf7e7MUn/B1LhSSBpdAAA",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
