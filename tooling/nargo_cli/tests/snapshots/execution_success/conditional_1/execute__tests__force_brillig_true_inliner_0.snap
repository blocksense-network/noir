---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
