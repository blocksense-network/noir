---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1Y227bMAylb+mcoluxYnssOuxll2KwfInltz5s2Hc4S/wd/vTVqOjQtGwMiNja6AgEulPkkUwexYMn2Tz+YlMPTenBWLDvwZTJeaIc6ko8i529+IKGZ8kuz49lelSZqpO02usiyYv9TiutCl0cUp1lR53rstpXZVKpPDuqpqiyhhjuCoTQOO8RIPwVHeIabLRh25UBrOjS+eD+0JbucwBuPzQfxh8XXgwpDJIz5X9AcG8jxRMDMPZF8JRdB7LkjySE1xcYolfo8wbcBpU52sgFM+VHU8YML8/MeXCEW0z0utavk3wXM/8c25/FMAwqEvigTgH9yYXR87M96ee+dHIFQ/ZK17wx41h/S9Z08ovoxvWSuD2eeyGMm7qBaawuDQ7XpN0/4Vr39pT6xHwDoz8CC+sl+0ds/gfT3hJ/sDwn7zRlrZqsbuqiPhzyP/V7ph8Ihh1OqamvPO7olceddClxB+0QOqdc2M/0CsYvfR4DQ6E74rH9gPkJbP8tyOYyj+2H9nB8sI75A2MUvQc4FrZjP3Asaod+dNLF5Vsyb+ofmW7eV1L/BkMbfIsPtpgmeb+Q3wjeodR2Bvx8wna4Nx2jZxASPG8ZPkI8YCf9fc/xALwPFy30EjA8KUY9h6Lz2VhMxsJ2uM/WtEOyD9WFdkRs/hfTfmfKDVmD668t+2/Y/gO7LX0UI64rsPTh/O499MnUL+HEr+5J39L5lTLtl+ZXuamvnF/Vz8WvAmH9QnHbyq+oLzRXTr3rnuuNJpm7qN8AY+4VCZ3vv3KvPhaD7HvVY/uhPRyfOe41l/cjNjaV9+/IvKm82c37Tur3TPfv9rSGYsl9meOWkncP33+C98vKyzj3CsnYHDeOCNZ3DB8h3lpKv31uYDrmrYWX4Ztjybzss6lTXvaD9C2dl2Wm/dK87C861Y367yEAAA==",
  "debug_symbols": "pZTBjoMgEIbfZc5zAByw+ipN01hLGxKChuomG9N336ErbvfQQ+nFEf75mPE3zAJne5qvRxcuww3a/QKn6Lx316Mf+m5yQ+Dd5Y6Ql8cpWstb8KQzNXbRhgnaMHuP8NX5+ZF0G7vwiFMXWRUINpw58oEX5216u+MfLV6jivQKK202XL/Bi4/4iszKV1SX8Kre+KaEr2Xm66L6xnzEk8j+kSjyr9Ef8dTQymupCnitmszrqoSvs39GFNXf/l8Zb1T2z2hZxIsX/IFXXe/ivxsPAlpuWPJ1QVBsP0LFKAJBu0PQ0LKdhnP41JoDZ+040D11EF138nYdHJc59E9zZPoes5InzRiH3p7naFMHufgCkp97aVDJ1KFMW9zCvhJI4oC/MhFSk2S1yQpJbbJBzXT6xh8=",
  "file_map": {
    "50": {
      "source": "struct myStruct {\n    foo: Field,\n    foo_arr: [Field; 2],\n}\n// Tests a very simple program.\n//\n// The features being tested is the identity function in Brillig\nfn main(x: Field) {\n    // Safety: testing context\n    unsafe {\n        assert(x == identity(x));\n        // TODO: add support for array comparison\n        let arr = identity_array([x, x]);\n        assert(x == arr[0]);\n        assert(x == arr[1]);\n\n        let s = myStruct { foo: x, foo_arr: [x, x] };\n        let identity_struct = identity_struct(s);\n        assert(x == identity_struct.foo);\n        assert(x == identity_struct.foo_arr[0]);\n        assert(x == identity_struct.foo_arr[1]);\n    }\n}\n\nunconstrained fn identity(x: Field) -> Field {\n    x\n}\n\nunconstrained fn identity_array(arr: [Field; 2]) -> [Field; 2] {\n    arr\n}\n\nunconstrained fn identity_struct(s: myStruct) -> myStruct {\n    s\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "identity",
    "identity_array",
    "identity_struct"
  ]
}
