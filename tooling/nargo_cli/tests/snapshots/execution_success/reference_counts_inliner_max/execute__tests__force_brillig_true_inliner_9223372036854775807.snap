---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2364549065372372629": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n\n        // `5` here is higher than in other inliner settings. This is likely due to references getting optimized out,\n        // and mutations being optimized and removed so the original array ends up being aliased more.\n        assert_eq(\n            refcount_1,\n            5,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
