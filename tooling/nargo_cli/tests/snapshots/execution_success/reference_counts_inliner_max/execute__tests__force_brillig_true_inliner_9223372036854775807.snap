---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2364549065372372629": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n\n        // `5` here is higher than in other inliner settings. This is likely due to references getting optimized out,\n        // and mutations being optimized and removed so the original array ends up being aliased more.\n        assert_eq(\n            refcount_1,\n            5,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
