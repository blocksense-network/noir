---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct PrivateAccumulatedData {\n    pub public_call_requests: [Counted<Field>; 4],\n}\n\npub struct PrivateAccumulatedDataBuilder {\n    pub l2_to_l1_msgs: BoundedVec<Field, 4>,\n    pub public_call_requests: BoundedVec<Counted<Field>, 4>,\n    pub private_call_stack: BoundedVec<Field, 4>,\n}\n\nimpl PrivateAccumulatedDataBuilder {\n    pub fn finish(self) -> PrivateAccumulatedData {\n        PrivateAccumulatedData { public_call_requests: self.public_call_requests.storage() }\n    }\n}\n\npub struct Counted<T> {\n    pub inner: T,\n    pub counter: u32,\n}\n\nimpl<T> Counted<T> {\n    pub fn new(inner: T, counter: u32) -> Self {\n        Self { inner, counter }\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub end: PrivateAccumulatedData,\n}\n\npub struct PrivateKernelData {\n    pub public_inputs: PrivateKernelCircuitPublicInputs,\n}\n\npub struct FixtureBuilder2 {\n    pub public_teardown_call_request: Field,\n    pub private_call_requests: BoundedVec<Field, 4>,\n    pub public_call_requests: BoundedVec<Counted<Field>, 4>,\n    pub counter: u32,\n}\n\nimpl FixtureBuilder2 {\n    pub fn new() -> Self {\n        let mut builder: FixtureBuilder2 = zeroed();\n        builder.counter = 1;\n        builder\n    }\n\n    pub fn to_private_accumulated_data_builder(self) -> PrivateAccumulatedDataBuilder {\n        PrivateAccumulatedDataBuilder {\n            l2_to_l1_msgs: zeroed(),\n            public_call_requests: self.public_call_requests,\n            private_call_stack: vec_reverse(self.private_call_requests),\n        }\n    }\n\n    pub fn to_private_accumulated_data(self) -> PrivateAccumulatedData {\n        self.to_private_accumulated_data_builder().finish()\n    }\n\n    pub fn to_private_kernel_circuit_public_inputs(self) -> PrivateKernelCircuitPublicInputs {\n        PrivateKernelCircuitPublicInputs { end: self.to_private_accumulated_data() }\n    }\n\n    pub fn to_private_kernel_data(self) -> PrivateKernelData {\n        let public_inputs =\n            PrivateKernelCircuitPublicInputs { end: self.to_private_accumulated_data() };\n        PrivateKernelData { public_inputs }\n    }\n\n    pub fn add_public_call_request(&mut self) {\n        self.public_call_requests.push(Counted::new(zeroed(), self.next_counter()));\n    }\n\n    pub fn append_public_call_requests(&mut self, num: u32) {\n        for _ in 0..num {\n            self.add_public_call_request();\n        }\n    }\n\n    pub fn set_public_teardown_call_request(&mut self) {\n        let mut fields = [0; 5];\n        for i in 0..5 {\n            fields[i] = i as Field;\n        }\n\n        self.public_teardown_call_request = zeroed();\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\nstruct PrivateKernelTailToPublicInputsBuilder {\n    previous_kernel: FixtureBuilder2,\n}\n\nimpl PrivateKernelTailToPublicInputsBuilder {\n    pub unconstrained fn execute(&mut self) {\n        let kernel = PrivateKernelTailToPublicCircuitPrivateInputs {\n            previous_kernel: self.previous_kernel.to_private_kernel_data(),\n        };\n        let mut output_composer = PrivateKernelCircuitPublicInputsComposer::new_from_previous_kernel(\n            kernel.previous_kernel.public_inputs,\n        );\n        output_composer.sort_ordered_values();\n    }\n}\n\npub struct PrivateKernelTailToPublicCircuitPrivateInputs {\n    previous_kernel: PrivateKernelData,\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    public_inputs: PrivateKernelCircuitPublicInputsBuilder,\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        // Note hashes, nullifiers, and private logs are sorted in the reset circuit.\n        self.public_inputs.end.l2_to_l1_msgs.storage =\n            sort_by_counter_desc(self.public_inputs.end.l2_to_l1_msgs.storage);\n        self.public_inputs.end.public_call_requests.storage =\n            sort_by_counter_desc(self.public_inputs.end.public_call_requests.storage);\n    }\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub fn new_from_previous_kernel(\n        previous_kernel_public_inputs: PrivateKernelCircuitPublicInputs,\n    ) -> Self {\n        let mut public_inputs: PrivateKernelCircuitPublicInputsBuilder = zeroed();\n        let start = previous_kernel_public_inputs.end;\n        public_inputs.end.public_call_requests = BoundedVec {\n            storage: start.public_call_requests,\n            len: start.public_call_requests.len(),\n        };\n        PrivateKernelCircuitPublicInputsComposer { public_inputs }\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsBuilder {\n    end: PrivateAccumulatedDataBuilder,\n}\n\nfn vec_reverse<T, let N: u32>(vec: BoundedVec<T, N>) -> BoundedVec<T, N> {\n    let mut reversed = BoundedVec::new();\n    let len = vec.len();\n    for i in 0..N {\n        if i < len {\n            reversed.push(vec.get_unchecked(len - i - 1));\n        }\n    }\n    reversed\n}\n\npub unconstrained fn sort_by_counter_desc<T, let N: u32>(array: [T; N]) -> [T; N] {\n    sort_by(array)\n}\n\npub unconstrained fn sort_by<T, let N: u32>(array: [T; N]) -> [T; N] {\n    let mut result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index<T, let N: u32>(array: [T; N]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder2::new();\n    let mut builder = PrivateKernelTailToPublicInputsBuilder { previous_kernel };\n    builder.previous_kernel.append_public_call_requests(4);\n    assert_eq(builder.previous_kernel.public_call_requests.storage[3].counter, 4);\n    builder.previous_kernel.set_public_teardown_call_request();\n    builder.execute();\n    assert_eq(builder.previous_kernel.public_call_requests.storage[3].counter, 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
