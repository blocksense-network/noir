---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZwYoTQRCtJDNJZnWJrH/gF0xMYuJBCJjsCn5FcMndDxDm6lEQFryI4MWLHjx48KIXLyIi4s2DiIif4TapcmpeejrZTDcbwxYsNZ2uqapXVV09212jnGrMIxiTRWbMPK1GXY+6UqujLhKZP8wT5nU13/AINgG7PvWP0v7NxILPo/+9hHWGjI/oDKA/bbGeO1muH7EY2uexriF5p336d5ny5wN+TuCdELkNGPv0qsX/usJm6HaWx8OXXdE98a/733qb+td9XXQf+tc9F91H3nV3+5doUbdvWZ/UeiM3VagBzYmKa1NI6uQKLa9fkQu5Pk6pLzgiWiaZi8E2kX2faMBY+21i917pRTmhTgleHQttZ8w8rUY9gjjEDj9ikL0G/mG8xn58TA+UXgJbtt5btR5dOYjCYBxgzWmSuaaybcOGGEnJiN+mHj8ovSgn1LHgxbWpfR0zT6vRgABrbPEjhjmR7YJ/LfVO6Hpsge2LOglaJ0OizevkFvh3HnVi23+q9i2tS769ElquCY8Yh/uAS5PMtZVt1z+LtnoUv8+6jzYtNnGMdWFokhXnRPYu8x3uLTewfxDEDWlV//jIz658/W+YPu0gps87iOnLDmL6ugEm8odnFrj3jXC/0CRzCdjWc3uWuK0bZ8FkbH9TelEO/dH7TAKyrn1mmhXnRPY+823YZ7bhm8GQnGu4amCT74mz5FnXU7tEJ+bSkJz3YA08YH6R56JtPbdteS47BzEkNRqD7EPmgWNtzXMTsIU4szMkvSzwfpoGjuEg8FrsSh70mbzEymB6pH7X9RezH/gu9h2Rf6N0PnbkbZIt+Cq/Tjz59VrpfMLPHSrvAzJOSvQZwn1UZJ8yl5zugf4xj9OKZFt3YmtVXJ+p3/F7YZ24ivwrpfM5P3cs72NcsZ/V1TzGVWRfMA+91m1xjRzYaoCtVoKtRsvnQiL7ErCFule0YRNb5r7F1WOxVojstYLnTKtqcB2b7Qo228rmyTnYlN4q/SHKcjlfuR2O0lRy2mD9spaRIjWv5d/xWPcr4VEFP+fDWXfem81ng9nxcf/eDGuQVOzwzm+d9Ya9RfeSSbbgrvsV3zanG9j0PQ793aXv13H/QMx1mBPZX8zNGvnusDXJirbqJbYM4bewyP5Utn44bEnujNxvh9zhmnJHFjnXfavJ41/Bq8ph6SQAAA==",
  "debug_symbols": "pZjNbhs7DIXfZdZeSKR+KL9KUQRO4hQGDCdw7QtcBH738lii3C7sFsym30ltnqEoijPjz+V1+3z+8bQ7vL3/XNbfPpfn426/3/142r+/bE6794P+7+cS8A/Rso6rhbgjdeSO0lE7ZFmToi1rXi0cOmIHdXCHuiRF7igd6pIV0tGuSKEjdlCHuhSFulRF7igdtUM61EVWSw4dsYM6uCN1qEtTYEVBWQdlsHWWMKhWUddcaJAHUR8tQsmDZbAOymDrrPDTilT4aREqDfJgGoSfLr2WwToog61T4Ke1kThIgzyYBuGnBZIyWAdlsHU2+Gl5WhykQR5Mg/DT+rUyWAdlsHXGoIYUIaIJMsEmkolsopioJsSEOpNWMsZgIpogE3BOEMlENlFMVBNiog1BwQScMwSZYBPJBJwrRDFRTYiJNgQOSRfRBJmAs0AkE9lEMaHOHCDEBA4fyoJTwVg7TgJrh0V0P2MV6HhGquh5LhDFRDUhQ6DRGfmgsxkXRWszthK93UU1ISY0jYQ00N8JaaDBuyATbAJjABmiuRMyRDcnZIh2TkgD/ZuQBho4IQ10XsK10HoZa0fvdYHZgYGEZssYSWi2q0ADZIbIJooJzB+9OmG7c4ZAVIFAVIXAlwUCU6phLOqXS7hcVouNzqfTcbvF5PxtluqE/dgct4fTsj6c9/vV8t9mf75+6efH5nDlaXPUTzX97eFVqYZvu/0W6rK6RYf7oeiIa2y6Bed/jkYJrtE5fSm6OaIlj2gpjuiWRrTOFkd4jHZ1nQVfiyd2xFOx/Kl6Sk/SLL6FL8ZXz9ZHyz/H7Imn2TvZ1bjF6p+FXfG33vVcX4LFC7niqVh88uQvqc3T4+lfqWTx4jq8zerfInmOL9vcavVuPD0w4FotA66tuCwkWBFZoqcKrcqcQvHuMUar38+hWSNwi9Vl0ThMixQ9wyxQmOtI92tZ7lukMGuZAgefReJp4bof6ZMjzXXUuxtK7UES8XZD1Qc2lwUl21KV1WWRSjSLVMhl0fA82S0aic8ip2mRs8ciM1tbZL7fm3+xkJtF8VlImRbi2pEsYWYhMTgt6s0iu/pbbk8t4e460gOLEubYLEHCly0au0pR4tyQEn0bUursrOLc08jzIULfrnwWbbYFBZdFKm2e9dJ8Z13mk3iS4rkd6yvynJzR9UCiYfHmIB6HVOddKFXXfYyznTDdT08OTGE+VTzYz4cOed6NKfscKk8H18sBc7W9UOmqQ6LpkMjTUZzJOkqlaxV5vuOpdFWyzLcc1lP2h8N3/Wvzsjv+8dvnBV7H3eZ5vx1/vp0PL799evr/wz6x304/ju8v29fzcQun2w+o+F3qW5S6io2+X3C9Xw==",
  "file_map": {
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
