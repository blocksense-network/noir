---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZT2sTQRSfJLtttloi9Rv4CTY2MfUgBExbwU8RLLn7AYS9evUiCAUvInjxohcPXrzoxYuIiHjzICLiR7BD38+8/WV2kmZnag19EN5O3tv3b37zZnenYabUEJ7Q2Dh0hsLzetQNaCt3Buoj6PwWnglvKnkrYLIZ+Q1pfyfvXc8c+QWMfzsTmzHrA5sR7OfrYudWMbXPuVjalLHGEO5pH/0umun1llxndE+MuY1Y+/yyI/6mys3SzWJaj1B+YXsU3vbf9bYb3vZV2N4Lb3sC2/vBbXd7F8wxbt+IPWC9NXVVwoDmxpTXJgg4uWRm1y/0Yq6PI+ohj8TMEmQp+TbGvU+0aKzjtrV7p+yyHqhTka+uhfYzFJ7Xo21DdUg9caSke4Xi43oNw8SYbym7hny5em9dPPrmIImTY58xpwmyNeXblRvnaJQO4rZ4fK/ssh6o48iX16aOdSg8r0d9Q7mmjjhSkkG3S/Gtq3ti43GdfJ/jJCpOBsYsj5MbFN+/wIlr/6nbt7QtPHtlZhYTAXMcbFJemiBrK9++l0UXHhH3SffRNYdPHjMuLI2Ksgy6t4WvcG+5xv3DUN2Y5vWPD3Ltm6//LaePK5jTpxXM6fMK5vRliZxMuHzGkXvfDu8XmiDLyLeWbTjqtmidkZP1/VXZZT2OR+8zGen69pndoiyD7l3hZ2GfOQvPDJbwXcOHgWWeJ04yzxpP7QqbPJeW8L2HMXBP+Pk8l31r2Vmb56rvIJaA0ZR07wuPXGvnPK9RbjG+2VnCu4ZLhj7nek/keHzriPsldB8IX+Hn8jwydvqRa9cF/vRZBGplc3qo/tfrLpU4+F7GCfRfK5uP5NqFyVFxzOfFdRgorlfK5mO57pjq/odxVmHPEq8H6D4RjjndIPtDGec1ybUe4GteXZ+q//k5aZG6Qv+lsvlMrjuO+7mu3MebSs51he5z4bHXuquuiSe3hinn1qjIrWFmv4dB9wXlFus81ZUbfNlzJt9a9e0tjCNj3Djib2/z8LmIz3YNn23l89Djc1ScfjzoyegrSTHVC4WJwU6eAwstsY8ewJQoudZ/K2Pd58CTGnFOBuPuZHs8GffHBwe9O2PGrlG14zPSRdYp9yTdg0bFMfedR4X2ubuEz9Dj03pOxT2+M88myaD7U7hdI988vkZF2VezwpclfneA7g/l67vHF+bO6v3y6O0tqLfv0POdT9t5/ANcf7GUGSYAAA==",
  "debug_symbols": "tZrdbhsrEIDfZa9zwfwAQ17l6KjKj1NZspzISY50FOXdu6kCbhkca2LmplpX8/G1OzCwwNtyv7l9/flju394fF6u/3lbdo93Ny/bx/366+39ark9bHe77c8ff/71Ej7+QPwd//x0s//4+fxyc3hZrlGuls3+frnmsNIP291muY7h/d+rBckYz8b4aIxPxvhsjJdRfKTP+Mh9fPk6vnTxFIzxYIxHYzwZ44f5lfgZL6mPj8b4ZIwf5rfwZzyEPsEkVqAYAQ5WAKwAWoFhlgHqawXo3yvzGQKpJ6KZSGYimwkxE8N8Y6pvF3NfA2IwE2Am0EyQmWAzcaJ6l0qUvifGdI7IPZHNhJiJYiVSMBPjSg717UaIPYFmgszEMOcR2wQQ+wymaCaSmchmQsxEsRJ5PHenWkui9LUkj3OejtOrcqCZIDPBZmI8i4dKCCoimYlsJsRMFCshw5wLpkpwn3MBM4FmgswEm4lxzrm0pVi/ZpBkJrKZEDNRrEQZ5zxjJaRfFRcwE2gmyEywmRjnvNQKVwB7IpmJbCbETBQrsa6Zh2tqql+KJf+FXKlQyrk2T7kk1T44t4/O7ZNz++zcfnRuPzm3n53bF+f2y6XtS6glmwT6ygUQnNsH5/bRuf3x+M3SNg2AzwlKXS1QgawE7C2I3oLkLcjeAvEWFGcBBm8BXCwoFJqAQQnQW0DeAvYWjLcKA4Zm4PS1gUOrdhwoKENyN2R3g7gbirdhfNwx1QDuBnQ30AQDUzOoUyoYH9tMNUR3Q3I3nBjTEZshlzMGOJ4truNLGcTdULwNHC43INc5en1UczTD5QaG2i3WR/W1zzjBcBzTrNcZJ47cZhrY3RC9DXFGphM0Q1KZjhPeUsFcDQVFGSZUjRK5GWJ/RgPp8hEXiWoeIukVWYIZBjka1Pd/QncDuRvY3ZAnGCQ1g6gRlyf0JQnt/yCgVjMZZhjy0aDGQ0Z3A7kb2N1wonrL8dZHyF8bUmh7eimIznSaayikDNndIO6G4m2QCSOOqVUNJlU1ZMKIS9AMSa8EZMKIS7nNcUlXPkmXG9bPnGpYv0eUYUL1htJqKwZlKBPW3hHaeinqlXGZsCJLpRlS0YYJa29pNxRZ1JoPx2dh6w51M4A67sZw4o4cwxESBfF3oHE34dw+ZDmDgsZ1imKdAtb+qE3lG9B4A5MwtOMd3TFxvCl5DuLvQHEMxbbjiFFDMoYyNUhdbsPx9hhRrsldH9XbG+8WEWODGFWHHW/PUMTaYddH9c8b74dQbPdA10f1IsYbEGsvaGdH6+D9C3pff/13c9je3O42n9fLH173d3/cNn/5/2nTXTx/Ojzebe5fD5uPK+jH2+e/D+lgPYbHENaG18Z/AQ==",
  "file_map": {
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
