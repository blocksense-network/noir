---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ay47rRBBtJ/YkzmMSgdghgcQHYMeOE68YIVaIn3D82CHxAQiZD0Nixwr2fAALFuzZgO44t2t8XCl3PDft0SympVHH7upTj66qLnePo9rm6N5VNzQC+UL/8PXzBManj38P+jm4rYU+42sT/xjEsS/oZ1H+yNeYzjj4AeGPZP9gpnG+qVt81IX4zh//lvB7pVr/GEt/Wr8x9f/YoPNS6/ov0xVlcW+RJauSKi+zMDtkp12R+6CfFfwyD/IsyIOsyMton/qAaQX/uC+i6pDnu8cfZbQjfM8WflHsd3mcZVFVlGmUEP6dLXxoSVVmhD8bAb9pa405V21zmG9hPrTo5weH8VOq62eK8V8wWW3nfYfxI3m4fSjWyHYLQdatMIYximPIZyHwkbCmFrFci1ieRaw7i1gUP7RmE5jn9PTEh7+juVJutLkPbJW8zyBvdxzeiZQ3LeLvpbyplN0abrzcFT3ti4tx7BOSn/IaRmmbfQnvmz+qgzzVxgbOdWEc6XeA+V0PpgOYPL7x9wqwJBk8JgPRJ7pvcuz/PZio19KgF9GngOk4Xcy1apspvxP9vUC/BhqSZ8NkwLmct6dl53v7iulD9F/rvrHtVwxzKciHdicflXxqCbjcp4huAri+MNcX9LaZB0kWWiMX5FkJ8niM/lum1z3YamqwCV8z5Ivr6jO+a8a3kcPVDKScTrwxBjdMB2nORNBjLsjFY2koPemB678y0Ev5AvHXwL/PlxzDfJ7LJZy5oAOPb7K33yP3g34ObmuD61vi/1L1rZQvTPWtFGNbYQzzGI4hn5XA5w3LHhatGa6x09MTH/6O17fIx+K3Z8jzzEK1e6KUZyR5HGvyxAHfHzzggTmG79FE/73um1iaOV0ZcY+gteVnNohJ9D8AJtUxT3m0bufPwUZNc2HMZk5r+CxADpT1LH/d1VvyaaQfUmvhevMYwH14zcYwr/O9iudYXANHkIvmY207ZP1+1D3WtlIdtgD8n3p499X28x7efwHmz/q39fPCbstJN/quU+pyvx1pfxu83xL/BZN1rP12zuTh9uH7rVTPbIWxPh9FPlKsSVizN6wPwjKdJ71Wfx/r3szk7xPBrs/19zcffT3+Ln1PDfFHiY/0jTskrl7bvcTYcSWtnymupPpHqo24n0jfh0uBzxuWPSyplr41rqRa4dq58i/wHucNPVcm+j8A81f9eyPM53U5yaKU+Qx5o+SYk7Bc1X5XIv2MyU70v+l+5DuQ4CPAVQKvIfZwn2EP55n2IPrfmT3Guu+S7EG8lldsItXTpvjktlE9NuRn+ziPnzWuDHwkuaR7CH62gbwxb6wZHfJxDXpwWe966AmP36v8qftG98+drnw4n+JaOqvA86WzvHWX74N+H9zWxLMK9AWvlm2ilDmPP3f9tupyzaZszHQWPhH4YIyY7ndorpTb/Su4XN9r93v8HoTo/9a95DPS2TK3L+49aCe+9xD9P8DPdGaG/y/WNBfGxvZD9B3uh6b7xqbxddkI9NL91JbRY86XahOeY675i8kP8fyMzrfGtPvh+P7e8Cyrxic/4s2FcaT/Tz/jHT/1t5yZVYcsrKKsyvZZUcR5xve9puH/+9nmvzsek3R3CuJDkVdFHL00/3yfnPJ4nwVleBbnpfkncRIej9kxT/IqjfPTi+ufJlUaRacwSosyDZNr/Cle7+p2HPNY02b6me6oOT3W8Uh/rwGauNyyXOkJ/Bq6zwx0Tk9/xhDeuXX3nV9f0k/rS/qnO6P6UkYaW8IY5timrfQz2guxSA6P0X8K+1fT5jCH5m8F/nPGvyO38A5zPMeaCu9wn/9ETyK/Rd1tn0uceTJ8fMdlI98ZI64eU8ohzw5hmMZhGYf7a3H1DtKjsuKpMAAA",
  "debug_symbols": "pZjdbhoxEIXfZa+5sMf2eJxXqaKIJKRCQiSiUKmKePfO7Pgs7cWiyLnhfAuZj/U/2c/pdfd8+fm0P769/5oefnxOz6f94bD/+XR4f9me9+9HffdzCvYS0/QQN1PMHsWDPaqHeLQ5KHhED/JwC7mF3EJuIbeQW8gtyS3JLcktyS3JLcktSS1Zo3qIR5sj65tlMxWVsUb0II/kkT2KB3toXdUQjzYHq0U0tK5psEf1EI82Rw0e0YM8vK5mD2t70LTGk6a1Pmk2Twk9rQO0JUI9U0/rA22alJ7cs/aUns2zhZ6xJ/VMPbuvdV/rvtZ9rfta98UQABFAAHOyQQYUAAMqQABm1m6OMQAiwMxikAAZUAAMqAABtA7z1GwGEUCABGCAVpGOULSp6BABBEiADCgABlSAAGDOMGeYM8wZ5gxzhjnDbLObyEAArYPNeIcIIEACZEABMADmAnOBmWFmmBlmhplhZpgZZlsvlAwE0DrYqnGIAAIkQAYUAANgrjBXmAVmgVlgFpgFZoFZYLY1RNk2OKuyGW6rhmzS2rJxsCqbq7ZwHCpAAOYR2yEDwO6nGRAgATJAhSkYVIAAVJjmvVaFiQwigAAqTMkgAwqAARVg5mzQOtiScYgAAiRABhQAA8xTbP8PgAgggHnYIOOdAmCA3WE1EEDrYIvIIQIIkAAZYOZ6vW4mnHRP59NuZwfdP0efHogf29PueJ4ejpfDYTP93h4u8x/9+tge5zxvT/qpDsLu+Kqpwrf9YWd03dyqw3pptMGdi3WDWcrL1+szo57rWj2t12fCzedMa/VpvV5sSs/1QjJSv9y/5DpSX3H/InGknpfvl6H2N9S3MPL9zTYSr89ppF4y6qWNjL8s499W62O8MwEDC2ZgqDKk0N8MUOghP6iIN8VYQ/SMXRS5jCnkphjsTj1HF0UdVJSyKCQMKWjZFqJuqAP7EkWMB62P6L36vNTX9X3tThM4oh85piHB0otceEhQsbXz+ijcE9RlQtaSR/qwoQtSiN+s54H6tEyiRO179SkPdWDA4VRjGRJE7G11/XT7oiDFbzZhTMANC6mGPLYX8G0vWD9j7yuk3BQ8pijppvh/R3nUq+3L/vTfY4uruU777fNh1y/fLseXfz49//nAJ3js8XF6f9m9Xk47M92efejLD9LfCST10f5DtcssG70ju4x2WbJe8uPVbuYv",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
