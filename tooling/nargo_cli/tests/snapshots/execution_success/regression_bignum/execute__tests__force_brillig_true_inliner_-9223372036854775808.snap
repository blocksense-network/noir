---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbtswDEX/Jc95sEiKovYrRVGkbToECNIiSwYMRf59pOnrbA8DBvUl97gpj22Jlu18bl73z9fvT4fT2/uPzbeHz83z+XA8Hr4/Hd9fdpfD+8n/+rmZ4oP8s2w3VDIogzMko2ZoRsuwjD4Hp4XTwmnhtHBaOC2cFk4Lp4XTImmRtIhbyIMzJKNmaEbLcAt79DnqlFEyKIMzJKNmaEbLSEtNi6ZF06Jp0bRoWjQt6hbxaBmW0edoU0bJoAy3VA/JcIt6aEbLsAy3tO3Gpgy3mAdlcIbM0X2re0hGzdCMlmEZfY4yxWBPAQVAAAYIoAIUEFPms1TKBCgAAjBAABWggAYwAMwEM8FMMBPMBDPBTDATzATz3KzeL2Vu1xkKgAAMEEAFKKABDACzwCwwC8wCs8AsMAvMArPAHG1cOCCqJCD+uQY0gAHiMLxvSnRvaQEFQIA4DAsQQAUooAHCHN0S/TxDdHRCARCAAQKoAF0gWpmif6KZEwgQl3ZMk/lOKc7d+gJ9AhQAARgggPDEiEX7JzRAmH0MKXqeaoAAKkABDWCAvkD0fAI80fMJIdSAKG8BUW4BfYFo7IQo7wEEYECsMVNABSigAQzQF4jGTigAAjAAZoaZYWaYGWaGWWAWmAXmaGyebxcCqAAFNIABwkxxd5kABRBmDmCAACpAAQ1ggL7AvIbHdM+r+AwEYIACoipmMBqbYwajsTlmMBo7QQAVoIAGMEAIY5aj5xMKgAAMEEAFKCDMdrttN7h7P13O+33cvP+4nftN/mN33p8um2+n6/G43fzcHa/zP/342J3mvOzO/q3P2P706unCt8NxH3Tb3qunf5eW6My52FfQtbz+f70o6rUN1FOs4nO9X28j9bLWt6H9d1rqeSpfrNeBeiZMHlP/Wj3LQL2s9SIj4y+21veR49eC8dPCI/W1or6OjL829L/aSP83kaW+1ZHxb1NDfakj9XFPz3qyr9Vz+drxD9Vrx/XbppHxM8L+bej8bV2/TEbWD2vof7OR8zdd928j15911Peh9asTrp8uI9dfN/R/t5Hr398+0IBlaiMz6G8rWEL8fYXGDOVuGDqLsi4DjnXIYHdDHzsGvY9DGzOsi6kfztDTAK23E3+NK0OGbvcHEhky2HoW/sQ1ZND7WdjYWVS+G/7uyUff2r0czn/9cHML1/mwez7ul8236+nlj28vvz7wDX74+Ti/v+xfr+d9mO6//vjHA3XecpHHeKn3TdNtL7HhD6sP7K+VXNrjLQ7lNw==",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
