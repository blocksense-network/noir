---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbhpBDEX/hWcedmyPx9NfiaKIJKRCQiSiUKmK+Pfaa+5u+1CpmrxwzwI+DDPeWZbPzev++fr96XB6e/+x+fbwuXk+H47Hw/en4/vL7nJ4P/mzn5spHsgfy3ZDJYMyOEMyaoZmtAzL6HNwWjgtnBZOC6eF08Jp4bRwWjgtkhZJi7iFPDhDMmqGZrQMt7BHn6NOGSWDMjhDMmqGZrSMtNS0aFo0LZoWTYumRdOibhGPlmEZfY42ZZQMynBL9ZAMt6iHZrQMy3BL225synCLeVAGZ8gc3Y+6h2TUDM1oGZbR5yhTTPYUUAAEYIAAKkABsWS+SqVMgAIgAAMEUAEKaAADwEwwE8wEM8FMMBPMBDPBTDDPzer9UuZ2naEACMAAAVSAAhrAADALzAKzwCwwC8wCs8AsMAvM0caFA6JKAuLNNaABDBDD8L4p0b2lBRQAAWIYFiCAClBAA4Q5uiX6eYbo6IQCIAADBFABeodoZYr+iWZOIECc2rFM5h9K8d2t36FPgAIgAAMEEJ6YsWj/hAYIs88hRc9TDRBABSigAQzQ7xA9nwBP9HxCCDUgyltAlFtAv0M0dkKU9wACMCD2mCmgAhTQAAbod4jGTigAAjAAZoaZYWaYGWaGWWAWmAXmaGyeLxcCqAAFNIABwkxxdZkABRBmDmCAACpAAQ1ggH6HeQ+P5Z538RkIwAAFRFWsYDQ2xwpGYycwQAAxjFjcaOx8pgEMEMJY5ej5hAIgAAMEUAEKCLPdbtsNrt5Pl/N+HxfvPy7nfpH/2J33p8vm2+l6PG43P3fH6/ymHx+705yX3dlf9RXbn149Xfh2OO6Dbtu1evp3aYnOnIt9B13K6//Xi6Je20A9xS4+1/v5NlIvS30b+vxO93qeyhfrdaCeCYvH1L9WzzJQL0u9yMj8iy31fWT8WjB/WnikvlbU15H514b+Vxvp/yZyr291ZP7b1FBf6kh9XNOznuxr9Vy+Nv6heu04f9s0Mn9G+Hwb+v627F8mI/uHNfS/2cj3N10+30bOP+uo70P7VyecP11Gzr9u6P9uI+e/332gAcvURlbQ71awhfj9Co0ZymoY+hZl2QYc65DBVkMfG4Ou89DGDMtm6sMZ+jVAy+XEb+PKkKHb+oNEhgy6jsHGxmB1NeiQofJq+LsnH/1o93I4//XHzS1c58Pu+bi/H75dTy9/vHr59YFX8MfPx/n9Zf96Pe/DtP774w8P1HnLRR7jpt4PTbe9xIH/WH1gv63k0h5vMZTf",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
