---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjdTiM5EIXfJddc2FUu/8yrjBAKEEaRooAysNIK8e5b5fLpMCt1JnJuOF9I/MltV7k7+dw87x4/fj3sjy+vvzc/fn5uHk/7w2H/6+Hw+rR9378e9b+fm2B/SP/Guw1FD/Jgj+QhHtmjeFSP1oPdwm5ht7BbWC2iIR7Zo3hUj9YjBY/oQR7s4ZbklqSWrFE8qkfrIcEjepAHeyQP8XCLuEXcIm7Jakka0YM82CN5iEf2KB7Vo/UobiluKTquaOgnm4atYNBsnjWMjCNtFXX9Ko9MI2VkHllG1pHNs4WRceTwteFrw9eGrw1fG75mPtJsnjGYsBhEAAEYkAACyIACqIA2IMIczVwNCMCABBBABhRABbQBvbw7wEwwE8y9zLOBADKgACqgDegl3yECCMAAmBlmK/iomx+tyCka6Ciy5bVCd0gAAeh8iA0KoALaACt7hwggAAMSQAAwC8wCs8CcYc4wWztQMmCAmcVAABlQBlgXkC1CIQADbLgVQBFABhRABbQB1jEOEUAABkBo7UC23dYPDgSwD9umWEs4CCADCqACmgNZXzhEAAGGkKxWuYMdDMFO2gCIAALYMdNP4wQQQAYUQAW0AVaZDmYmAwIwIAEEkAEFUAFtgB3QDjAnmBPMVrSJDUyYDMq4LivR/h8rUQcCMCDhwwLIAPOIQQW0Af20zgZYzIzF7Gd2B5gzzBnmjBn207sDtqlgmwrMVpncoQB0FPdbYxtglekQAToftvWxgmRbHzu/HQqgAsxjq2FF6xAB5rFLtqJ1SAABZEABVICZs92wAyACCMCABBBABpiwGLQBdoY7RAABGJAAAsiAAoA5wmydwtUgAgjAgAQQQAaM5WWqgDbAOoX56+tugwejh/fTbmfPRd+elPT56W172h3fNz+OH4fD3eaf7eGjf+j32/bY83170ne1FnbHZ00VvuwPO6Ovu/PosD5Ub5xjsN45l+Fy/XgrMh9feW08rY9noTE+xXweX/4Yz+vj9VzDBPRka2uGtG4QOye7QDjMjG9ljM9RZq6A+HwFiWYMxW7xbijr11Av7GLOyzbmLHOGsBhKnTGUwjCURjOGFrCVeo9dNVyq5mUvKaxWc7ywFXrSDAHnvCpIN/ZDlJsbwirmpo64KLimJS5exHU9cVFxXVNQuLkr/qK4pi0uKq7ri4uKmxuDzotJabWuL22H3t1h0Dv1XFHUtijC1EF53ST45jlc2otvd0z9ejZnWGpKv49NGTIthjo1B15aXHFqDiLLVYhMzUHobEhlypCXvpDaptbh3Fn6nDdlSMsTGMvMVZSEzSwpT4xv9k2mj28ydQVB4vkZcmonAy31GPKMoUVMocWp8QHl3GhqDZeGakVu24P/jb/XV9un/emPn1C/zHTabx8Pu/Hy5eP49O3d93/f8A5+gn07vT7tnj9OOzOdf4fVPz9Zv1pp7d3bT2P6knQxKJK9jPau3gU58/2XTeY/",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
