---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjdaiM5EIXfxde+aJX+SvMqIQQncQaDcYInWViC3311VHXa2YHAIDM3Pp/j1Ge1ulot9+fmef/48fPhcHp5/bX5cfe5eTwfjsfDz4fj69Pu/fB66n/93Cx4kf4athsJFmIRLZJFtigW1UIt2oholmiWaJZoltgtsUe2KBbVQi3aiLRYBAux6JbUI1lki2JRLdSijcjdknsEC7GII0p/13pgZEvP5Ikj7EMtxbN6qmezrItn8BTP6Jk83VfdV91X3Vfdp+5T96n71H3qPnWfuk/hk57q2Szb4hk8xTN6Jk/U97kNC/4hASIhETKhECpBCc0hLIRAoDlAmAGZUAiVoITmMNpyQCAIIRIgLACUV0BzGP04AOUKEEIkJEImFEIlKKE5oEcNKEQvYhRoxpHq2SzRjyODp3hGz+SZPd2X3Zfdl91Xug/fW4KneEbP5Jk9i2f1VMvRxA0ghEhIhEwohEpQQnMY3TyAZqUZDS0LIBEyoRAqQQnNAX1tEAhCoLnR3Nws6GDBGoUOFgFUghKaAzpYIgBfkQAQZgA8BVAIlQBPBTQHNK4BPAoQQiQkQiYUQiXA3ADNAT1tEAhCiIREyAQstJiNsdQOaA5juR0QCEKIhETIBCzg4+ZQCUqAGZOJljcIBCFEQiJkAsw4Beh8AyU0BzR5xNlBl0ecHbS5QSFUAspxmrB+D8ACbhAIQoiERMiEQqgEmivNSrPSrDQrzWj+iN5A8wMi+icq7pioagAhREIiZEIhVIISmgO6JS2AQBBCJCRCJhRCJSihOSSaE82J5kRzojnRPG7VYzcAoWA/gPKxMUB5AkRCIqA8AzCwAqgEJWBgmEwsjAaBQHOhudCMtjEohEpQQnNA2xgEAs11CC+X7YZ7q4f3836PrdWXzVbfgr3tzvvT++bH6eN43G7+2R0/xj/9etudRr7vzv3TPlX703PPLnw5HPegy/ZavXxf2m/dXtzv3Wt5/vN6XMNWr/G7evm+vp9Hr0+hXOvrH39/q14vS5wYv2AvYPWSZup1/X7VifoYOP+9p76rr39v/iRg0bMD6JuOOUNaDSVNGVpYT8LSZgwSr4ZYbjUkmTEU5XXYbx1xxlCvzVjj1LmQso6h37ZmDHGJNMQQpsagbTUsMzOZhYI8NQt5XRNKyDNrypdFrV8ec4ZlNSSdMhRZDaXcatCpo8jXechz85DzOg853zyGNDUPWa5jSHXKUNpq0Jn1qbfDaujbrinDemV3nJrJmNZbfd8QTRnWC6vj1FGUsp7NMncU5ToPpU6NoVaucP1XqEztOa5ns8mMoSZemnWup5ccrtu2qXlcZF0dlqkz0QKH0KZW2bawmZrMzEFL3Li01G6rzzN91NbltU2tz1/qa75t/L/V3/d3u6fD+X8Pbi8wnQ+7x+Pe3758nJ6+fPr+7xs/4YPft/Pr0/7547yH6fr0t7/cSVu2fX9wj+d5/W3O27LgTf+pcxf708K+r72/YCj/AQ==",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
