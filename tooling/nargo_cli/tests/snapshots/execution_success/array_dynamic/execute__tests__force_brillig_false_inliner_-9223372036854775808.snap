---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index2",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "offset",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "sublen",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZfdatwwEIXfxdd7IY2kkZRXKSU4G6cYjHdxdgMl5N07sz7jpoUNRe7Vd/xzjixZI8vv3fPwdP3xOM4vp9fu4dt797SM0zT+eJxOx/4ynmY5+/5x6Ozw8bIMg5zqPl0X17lfhvnSPczXaTp0b/10vd30eu7nGy/9IlfdoRvmZ6EEvozToOrj8Nvt7ls9E8ye82ZP/+5P5X/5s2/yZ/OXFj8FGzwKLc9PnjZ/uefn+/6UAvwpxSa/3/xpn5+pxZ/t/aVcm/xs/uJ2+nOLv0bz15b3xz7Bz77u8xO3+KPNX45xp7/p+VM1P+d9/twy/7ha/XENTf6t/zXu9DfNn2L1z03zN5P5M8Umv9/8LetHjlb/OdWG9TOQ1V+43/5Xft789+fPl36/+UOLP/E+/zZ/w/3584U/eut/pJbvV3R18ze1n+z5I7eMf4y8+VvGL7J9/2Pmfe3/5f8uR/1xXP7YsXVVNhqHzrsVXj77AloR5CUKotSCIK3gFXlF6R6kXrykyLCTpsizkQcJDKAkeWmGEihZut0gCfPSEhVQH0qmQdA8+ZwEzZNuBQI1T1oPmifNhwQymMEC1pXRgR4kMIDIi5on/YkMZrCAVfdJhy45UIdN+pEIDLp7EkYwgQxmsIB1JTvQgwQij5HHyGPkMfJY82S8uK7MDvQggQGMoObJuGbNk/7nDBawriyaJ/0vHiQwgBFMIIPIK8gryKsORF4lHAcwgglEXkVeRV5FnnfOBBK9IzsTTEQTyQTbzZIbbtVQTFRdx7UwnAlvgkwEE9FEMsEmsoliwpK1aIKWmVbNKshEMKHJUUUywSayiWJCk5OWrzOhybqYvvXL2D9NA/7VXq7z8dOv2+Xn2a7Yz915OR2H5+sy6KJxuybLyC8=",
  "file_map": {
    "50": {
      "source": "fn main(\n    x: [u32; 5],\n    mut z: u32,\n    t: u32,\n    index: [Field; 5],\n    index2: [Field; 5],\n    offset: Field,\n    sublen: Field,\n) {\n    let idx = (z - 5 * t - 5) as Field;\n    //dynamic array test\n    dyn_array(x, idx, idx - 3);\n    //regression for issue 1283\n    let mut s = 0;\n    let x3 = [246, 159, 32, 176, 8];\n    for i in 0..5 {\n        s += x3[index[i]];\n    }\n    assert(s != 0);\n\n    if 3 < (sublen as u32) {\n        assert(index[offset + 3] == index2[3]);\n    }\n}\n\nfn dyn_array(mut x: [u32; 5], y: Field, z: Field) {\n    assert(x[y] == 111);\n    assert(x[z] == 101);\n    x[z] = 0;\n    assert(x[y] == 111);\n    assert(x[1] == 0);\n    if y as u32 < 10 {\n        x[y] = x[y] - 2;\n    } else {\n        x[y] = 0;\n    }\n    assert(x[4] == 109);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
