---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      },
      {
        "name": "z",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 4,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        }
      },
      "visibility": "databus"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1Zy27TQBSdie087KSJ4Edi6pCyK1Lfr39I00ZIrPgCvGLFjg9gAxILxIYdEkj8GZl2bnJyfcdJiUeVESNFY889c993Ho5W921n/tP2ObR9YHsNYwrGTNu3/XC7llbIa+hLR10DHRs10DGoUEcNeepL37AGPo1qoGOz4rj7XpNaNfBpuwY6dmqgY1xxbpKOlKPJ/Ned/3rqfq9dDKJBZvEO7CRT0KZgTBKaIBsnxoAvZQwO+m37ju0bQK9wIU47TG6V/PeGo92OWm0V63/HHwNWMf9r4h/54T9sWT4H+ZI/2kJyA4bjcwLAHALm0IE5AsyRA3MMmGMH5gQwJw7MKWBOHZgzwJw5MOeAOXdgLgBz4cBcAubSgbkCzBXDUE74qZks85xzWU8VLwdkC8lu+pE90kyeUqsXFsXkx8prfaeaySN9uH9o/e0RJl/qoxktzIt2EC0CGsXX7BMvAcdzi/Sg2PjYC+Z5t+c573YfMe+yfzHvOC3Mi3Y8NO8wt3jeBR58Mc+76//rXb3yLmC0MC/a8dC8kz5aGdwFPF8CBnMVbdCCDZ7zd+b5DJo9tPZ5fDAG6NuXzD+e9pWZT/8b/zx16E/PprVytWgB8yf6iHzWRjyjdYAW5qtyYvseghzkRXpEDH9u3/u2b8Icmj8Q5DeZ/BW9hTH0EecVCGOEN3V9YJ8T+zM59NGOUR1Hy6lKO3qUJdXrQBX3A75e+zh7m0Z2NAU7SHbLj+yN9wqSHyuve9dir2gxfbh/cC0ytLag60CgafbcFuS0BTl15EW+QV9uWx+YhxQPz+eZtCPY6ON7Dv8uVbX+sR/9C2dNzAETk1dsnGiRKp7D0M8Rw78Fnq/tc18V85evoXjGCwR8zHhJ94Ey3RsCL677G9sb2z5voF8AYw2GjwQ86tlg9ki+6TM5WFtl51/K0ZDR9u34cLs2Mv75Anpw/+C5bp0vlCr6TroDYL7w9abJ5iMN16KQ6awFmjk/bJKvXUFHXWJTT8B3BfkkOwFaj/GS8hvxrtp8Z3spvyV7GlvYkzB7dIk93TX28Hol/PsSeyT9yup1R8D3SuxBW3c2kI32dx2ymw784r7E8B/U0v5fTD+cX7ZmEO4x1gzMOb5mSPFAPI9fX8BjXCh+A4ZH/0prBo+VFuTguo7fGTiN5uJ+69Pv473ln4cUc6ox3kKgI/6TfcdziQLb9v9Sz9l4ks52J7PJaHJzk00nTxh/0yjGiQf509Hz62k2mgxvU/P6bJ186f6LdWQa3aHxjo144hcx/FfCzn/f7DP/RoLyDO5nCU47+jsewliYr45Jd2/8JkF4kh3nRR2JlgANa9y0rn1HfyEv0iNi+B/2nWKC3xFo/kCQ32byV/QWxvg3iUTAJwLexOc78bM92l71XfhOJuOPY1w3yh0fdTUvqfF0Mk7TF1l6m6WjdXX1B9ekZP8xKAAA",
  "debug_symbols": "pZVBbsMgEEXvwtoLYAAzuUoURU5CKkuWE7l2pSry3ctkGLddVKrIxu8T8r9nMDYPdUmn5e3Yj9fbu9rtH+o09cPQvx2H27mb+9uYf30oTZdo1M40KloGMBzDMwKjZUQGPoGawSnIKcgpyCnIKcgpyClG50lLzGMg5lhHRKbJwZ5oCm1hzg5EV+gLQ2HOa4mxEJlWF5pCWwiFrjD7IzH7kYhM0IXUqSZhRYAI6pd6Ay8iiKCuqV2IIrAIRytIK+CMCCuCkmkxnBPhRQQRrQhKphVyWITXIowIKwJEOBFeBCX7dW2UbJbjPKVEe+XH7sl76t5NaZzVblyGoVEf3bA8//R+78Yn527Ks3lh0njJzIHXfkik1ubbrf+2AogZwGx2/3+/B/F7V+F30Ba/g/ia39XU79zm93V+v/ltVf16q7/GD63cH9rwoh9r6tdb/7rq+WnY/FX3p/eS/aat8tvN/2L9VX6IuPWvf/kPedSd++nXebJS0tR3pyGV4XUZzz9m58+7zMh5dJ9u53RZpkRJ34dSvuxNiI2JeGhU/lbtg29af6DzgaY8NiY4Ghoaom4M2sNKhX0B",
  "file_map": {
    "50": {
      "source": "// An simple program demonstrating two calldata array inputs and a single return data array. As an arbitrary example,\n// the return data is computed as a linear combination of the calldata.\nfn main(\n    mut x: [u32; 4],\n    y: call_data(0) [u32; 3],\n    z: call_data(1) [u32; 4],\n) -> return_data [u32; 4] {\n    let mut result = [0; 4];\n    for i in 0..3 {\n        let idx = x[i];\n        result[idx] = y[idx] + z[idx];\n    }\n    result[x[3]] = z[x[3]];\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
