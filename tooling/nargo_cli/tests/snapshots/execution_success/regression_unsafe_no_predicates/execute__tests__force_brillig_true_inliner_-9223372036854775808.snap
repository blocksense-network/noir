---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "nest",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/71WwU7CQBCdlhYsxEAwfoS3QsES9YCKXE286qVC+I5+umzYDa+PMSLsMkmzhZ2+N/N2OtNIdhbZy1hi11gOzfnM7ZqfZyOPWHnIOKNAcTZEjuR3c3tfds3oebPf8phwRrw+8Wf5pMyU/DzGX2SAGQB/7PCTMPh5x+K81U18Id4W+fEz+NwSfJbgY+xamk0Acdwe1qp7/mp79WV/P7T3GeGFqB+Mybf+N0r8MeRm7LWWhs6+uB3+og6S26hnz+rJ4qWU361d29vr0d5rNRDRWYd61yLiE+IS4u9K0NoY8Xvl4mF9YtIuUWIdKHsX0nXCcaG5vRS4UU+2Fv3GuE2tvQAu+zEnnqnj7ytasE6henFEsSSyP2/tTGM51C6FPFP67w50eqf8tBrD/9yZDETvt6hPoDqacq2gub02cPN70aGcRU6rsQ/AZT8hDk1X9FvUu7Uvei9BLPxwjuSwD7g5oc0sY3O75mca56b1FORPyf9BmnGmlPPcU5xDyh+5cOb0ZD9rk9p/LOVsp5mxVr3XhOsM+VPyf7a/u0pOyRlxbspqtCmqTTWt1uvJqmLNjMWgE85znzWufRdeaD4Vp879EN+c+R9zXzuX/8591B/3kCdReAbKnus5PfFfm1VZzFbjyar8nhZVcX9SbWq5Yc9c1LtVm/vJEVjH1jljab0cubl3Ov9Pu4b+FtF6p+MyWv8AI64yvNERAAA=",
  "debug_symbols": "tZfdioMwEIXfJddeJJOZ/PRVlqXYNi2CaLF2YSl9941L7ZYoLEOZGzFyvi8GPMLc1CHtrqdt0x37i9p83FTb7+ux6bu8ut0rtRuatm1O29fHSk8XML/5y7nupuVlrIdRbbyrVOoO+cZn+ti0SW1I3z8rBcDMW2YemXli5h0z75n5sJZ3Zs7H13y1CALiIwkUSnUUU1stpzZyapBTWzk1yqlJTu3k1F5OLddGK9dGlGsjyrUR5dqIb7bRzb9riLpUo5ya5NROTu3l1EFOHcXU9GYb46y2Gku1kVOvtvEJmCVguQByAeICjgt4JuBWAYSZQAslEdjE6qeJhmYCbEF4zSYMmwA2YdkEsgliE45NeC4RVk9OMPeUIJYEsonVk5N9EracNIJjE/6ft1oSgU1ELhE1j7jn1Vc9NPWuTY/x9njt9i/T7vh9TsXgex76fTpchzSNwH/Tr5n2drpylF/ETCXysQom75H3+QE=",
  "file_map": {
    "50": {
      "source": "fn main(x: u8, nest: bool) {\n    if nest {\n        let foo = unsafe_assert([x]);\n        assert(foo != 0);\n    }\n}\n\n#[no_predicates]\npub fn unsafe_assert<let N: u32>(msg: [u8; N]) -> u8 {\n    // Safety: testing context\n    let block = unsafe { get_block(msg) };\n    verify_block(msg, block);\n    block[0]\n}\n\nunconstrained fn get_block<let N: u32>(msg: [u8; N]) -> [u8; 2] {\n    let mut block: [u8; 2] = [0; 2];\n    block[0] = msg[0];\n    block\n}\n\nfn verify_block<let N: u32>(msg: [u8; N], block: [u8; 2]) {\n    assert_eq(block[0], msg[0]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
