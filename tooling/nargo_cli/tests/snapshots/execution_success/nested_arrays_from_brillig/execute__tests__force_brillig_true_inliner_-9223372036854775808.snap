---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "values",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VYwY7TMBCdpHEaB1VbwQGJG1y4JrS7XQkOBQp8R0TV78hH8MGsWQ+dvk7c0mYkOlLlJLbfm3mejJ1m9Gzu6ZfF6yK2mWhLOjTuW8e2uc7aEbEaKx+zG/AxvwEfJzfgY3EDPjoDH/+YfNmD0yGpwqIFURwNGwf4K7Y+trnoH3HxWw+8Y+I/NsutV+Ib0f+FF/oa4D94gWmA30wjzo9+j4+xcB5kZLZOK+M4H2YQG4lYmLuw4V5lwEcQJwF/TaY51WbAx/6gPnw94zH93p8M+or+OA7uc/1hHMGqp99rMQ5zKxfj3onr9/HaOB+3xu918yoRMz+b9vTXWLeJeMa6ss6VHA99XvQV/SFPHe8LwSOx2A8H49/G+7vYlmIOz58r/CXwH/itPENdvDLeK+PDHvgmXr+g/V72td/jWexlGxv8D4z/zQb/nvG/2+A/hDUI7/AnXjMyrflLriuyzrFxnxPcWp1mm8A91rIvAhfHIafMZ/efapEr/p+rRS9wcRxyZgkt5F60jm1znXXor6PhOuxg7Efwz+i80LwUuARcso4V/fj8q8emYV7eQxwdr7nkdzD+c7yvB+JYX+jnbtW1u0W36+677Xb5s0OdguVCJ1lrMjpcS6L9mUfO573hjobPwqnzk8TaANYEdAhmnEsL9qlM+Cr52VdZC3iuVkPwDF3axLHUarN2hmb+2lbXNqWr1CcH7aaKr3OlT+ad7JM8U4VHw5qMiOUgHvyfIZgf8GEd75vrbHFuLjB/Taa52aZ0LRVdWbtK8XWu9GEuVApPpfBoWPg9b/R9s0xpou21Wo2cQtwprGB8LtZqN8+dKViYt5WNJmfnLfPXZPoetal80uoBa+cVX+dKH9Ydr/B4hUfDwnfg1D7O3zCpfXymzMNcMDqPn/2fED+r6fjdsciFU7qmahjP1eoOfmddU8PKEbGKEbHGrNNTgxgvPRNv+uf20jNxnsDSzsQprHPrPWK5E1hYL+R8zN3yRIz4DaGdpUmZh3q4f4wBeTUsIr3mpdZUy48iwathDd1nig/afwM8L+Twb5R71krxHgAA",
  "debug_symbols": "pZbdiuJAEIXfJde56K7+q/ZVBpGocQiEKBldWCTvvlWpLsddWBg6N/lOjOfr0J3WPJtzf3x8Hobpcv1qdh/P5jgP4zh8HsbrqbsP14k+fTaGD56Otm28FYDACbwgCKIgNTsgoCCvCEZgBSBwArI4QhBEQRLgikhnnoACcoa2SUZAzkgAgRN4QRBEQRKgIK9AIxALigXFgmJBsiRCFCQBCvKKbARWAAInIAsSgiAKyJIJKMgrrDGFthAKXaEvDIWxMBWSzhoOuQTLy2c5WA2gwWnwGoKGqCFpQA25BFAzqBnUDGoGNYOaQc3AHlp964wG9jgOoIE9noPXEDREDXyHgQNqYDMtm10f3cTBamAzcmAzz9j6CK+BzGCWpW10Dxzuc9/zFnjbFLRVbt3cT/dmNz3GsW1+deNj/dLXrZtW3ruZrtLc99OZSMLLMPaclva7bf5fjehLOVn3qocf9xOg9j1u68dU0XcJSt+hremj036Gmn7W+fOmZv580Pv3seb+A4TSD87X9F3Uvg81/fAaP1aNj7r+IdfMn006vsWN/ar1t1n7ULX+b30Lm+6/rg/21Ydt8weQa8Z3+vxDSNvG/6e/p7PuNMx/vWYsbJqH7jj25fTymE5vV++/b3pFX1Nu8/XUnx9zz6bvdxX6Uf8A1zq3579AOommjWG/8Mh/AA==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nfn access_nested(notes: [MyNote; 2]) -> Field {\n    notes[0].array[1] + notes[1].array[0] + notes[0].plain + notes[1].header.params[0]\n}\n\nunconstrained fn create_inside_brillig(values: [Field; 6]) -> [MyNote; 2] {\n    let header = Header { params: [values[0], values[1], values[2]] };\n    let note0 = MyNote { array: [values[0], values[1]], plain: values[2], header };\n    let note1 = MyNote { array: [values[3], values[4]], plain: values[5], header };\n    [note0, note1]\n}\n\nfn main(values: [Field; 6]) {\n    // Safety: testing context\n    let notes = unsafe { create_inside_brillig(values) };\n    assert(access_nested(notes) == (2 + 4 + 3 + 1));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
