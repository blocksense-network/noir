---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
