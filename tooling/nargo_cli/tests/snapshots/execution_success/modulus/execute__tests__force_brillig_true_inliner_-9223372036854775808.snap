---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "bn254_modulus_be_bytes",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "bn254_modulus_be_bits",
        "type": {
          "kind": "array",
          "length": 254,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 1
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nd3Nbh3Ukkfxd8mYgXdV7b2reJVWC/F1UaQIUICWWoh3b7uF4er6hGitiRXH+seJVyU55+fB+f3dd99/89sPX73/8V8//fLuy//6/d2Hn779+tf3P/34/N7vf3zx7puP7z98eP/DV//+0++eXt5kzv8Pfvn56x9f3v/l168//vruy3zqL959/+N3zz/Kfv4F/vX+w/fvvtxPf/z3F++ynvhk8UnwSfJJ8cnmk8Mnl0+aT3j9zetvXn/z+pvX37z+5vU3r795/c3rb17/8PqH1z+8/uH1D69/eP3D6x9e//D6h9e/vP7l9S+vf3n9y+tfXv/y+pfXv7z+5fWb129ev3n95vWb129ev3n95vWb129ef3j94fWH1x9ef3j94fWH1x9ef3j9wfXr6YlPFp8EnySfFJ9sPjl8cvmk+YTXX7z+4vUXr794/cXrL15/8fqL11+8/uL1g9cPXj94/eD1g9cPXj94/eD1g9cPXj95/eT1k9dPXj95/eT1k9dPXj95fW59xa2vuPUVt77i1lefsL76a3LfTjafHD65fNJ8MnjyCev7x8nik+CT5BNef/P6m9ffvP7m9Tevf3j9w+sfXv/w+ofXP7z+4fUPr394/cPrX17/8vqX17+8/uX1L69/ef3L619e//L6zes3r9+8fvP6zes3r9+8fvP6zes3rz+8/vD6w+sPrz+8/vD6w+sPrz+8/uD6++mJTxafBJ8knxSfbD45fHL5pPmE11+8/uL1F6+/eP3F6y9ef/H6i9dfvP7i9R9bX3S9Tnq/mSw+CT5JPik+2Xxy+OTySfPJw/rPmvvn5PnZ/X9OHlvfP08WnwSfJJ8Un2w+OXzyuMt5/Vv5/MzrPyeP5erk62c5GW8mD2/s1uvB3JtvJs0ngyePTemfJ4tPgk+ST4pPNp8cPuH1N6+/ef3D6x9e//D6h9c/vP7h9Q+vf3j9w+sfXv/y+pfXv7z+5fUvr395/cvrX17/8vqX129ev3n95vWb129ev3n95vWb129ev3n94fWH1x9ef3j94fWH1x9ef3j94fUH1z9PT3yy+CT4JPmk+GTzyeGTyyfNJ7z+4vUXr794/cXrL15/8fqL11+8/uL1F68fvH7w+sHrB68fvH7w+sHrB68fvH7w+snrJ6+fvH7y+snrJ6+fvH7y+snrJ69fvH7x+sXrF69fvH7x+sXrc+s73PoOt77Dre9w6zvc+g63vsOt73DrO9z6Dre+w63vcOs73PoOt77Dre9w6zvc+g63vsOt73DrO9z6Dre+w63vcOs73PoOt77Dre9w6zvc+g63vsOt73DrO9z6Dre+w63vcOs73PoOt77Dre9w6zvc+g63vsOt73DrO9z6Dre+w63vcOs73PoOt77Dre9w67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lru9z6Lre+y63vcuu73Pout77Lre9y67vc+i63vsut73Lra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77m1tfc+ppbX3Pra259za2vufU1t77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259w61vuPUNt77h1jfc+oZb33DrG259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",
  "file_map": {
    "50": {
      "source": "fn main(bn254_modulus_be_bytes: [u8; 32], bn254_modulus_be_bits: [u1; 254]) {\n    let modulus_size = std::field::modulus_num_bits();\n    // NOTE: The constraints used in this circuit will only work when testing nargo with the plonk bn254 backend\n    assert(modulus_size == 254);\n\n    assert_reverse(\n        std::field::modulus_be_bytes(),\n        std::field::modulus_le_bytes(),\n    );\n\n    let modulus_be_byte_array = std::field::modulus_be_bytes();\n    for i in 0..32 {\n        assert(modulus_be_byte_array[i] == bn254_modulus_be_bytes[i]);\n    }\n    let modulus_le_byte_array = std::field::modulus_le_bytes();\n    for i in 0..32 {\n        assert(modulus_le_byte_array[i] == bn254_modulus_be_bytes[31 - i]);\n    }\n\n    let modulus_be_bits = std::field::modulus_be_bits();\n    for i in 0..254 {\n        assert(modulus_be_bits[i] == bn254_modulus_be_bits[i]);\n    }\n    let modulus_le_bits = std::field::modulus_le_bits();\n    for i in 0..254 {\n        assert(modulus_le_bits[i] == bn254_modulus_be_bits[253 - i]);\n    }\n}\n\nfn assert_reverse(forwards: [u8], backwards: [u8]) {\n    for i in 0..32 {\n        assert_eq(forwards[i], backwards[31 - i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
