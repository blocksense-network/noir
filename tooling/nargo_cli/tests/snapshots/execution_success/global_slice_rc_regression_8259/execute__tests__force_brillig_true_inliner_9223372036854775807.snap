---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2ZzW7aQBCA12AHzE9MIGm495aTY0OgN6SSkvYtDBSpl6qq+gB+qh577aWV+kiVlR17MhmbIM80VMpc1t5df/Ozu7ML65hCHFu65N0wfRa2DOvJtSArZA2tEujzx5a+LRuovSnorE/0SvLn4WTtM/4J2h/7lqkZH2Aq8MOW5XxICz71xaAS+tFvMunbZzzPoE/btsPza/vsk280xl9xfMIRY38D+ZbJ27RoM0Z+7Sx1+CHwb1OV2MXAXynz3yvxId53lm9MsU5WqA70w/x/h9qckhKzcB3o6hCWdN6p8g3bD3N9wPTH41rGujuQ5ZM2rTFd7fEb9PfJO/6W84PmgjoxWQqywK6uuc/PP219YB7mtEwgDtp7E+RVOHy5lk91NpB/uD9+zsQjdVe2zPz9jb6h/jaZOhpLvA5x/qf2aJw9TpT4EAuPiQX2CfT3mTgdkt+wro7RPVdV+VY2zrg/jUEZyzuQ5TNtGmPqVviN9fcrbKV+ZILzW92YOEaGhe3yS9gL+x7WktmaW/Ny/CjyS+Ikw79ZczlFkP8G+C0d/kfgt3X4E+D7Kvw4AX5HZ37me0ZXJz4b4Pd0+Ln9fR3+FPinKvwoj0+gM775/Bzo8PP1e6bDD4E/1BnfPH+OdPg74J/r8PP/gy504r+F/f6VKQT2StB9ierlzibR2iH6jOHPiKC/Q2zVOiNeEntofODcAbEbM7YOmDZ6BhkzesaMHo7lCrI8QdaJIKslyGoLsiRj7x+pXR1BVleQJTm/eoKsviBLchxPj9SuQJA1EGSdCbKOdU5I5pyXPe1lT/tf9rShIGt0pCzJvVYyf50LsiTXkOT8ulBkPfV/64DxC75Vvj+IHGQvtRXn45Mn+Mb93uqhvl++fvr8zRDxyDv8CQxymxZAbCg3EYB1RZjL9LEuhzw3kQ7ax2HqHaIH2gOmP72MU7owqbyMazC+HHoZ992W3GUcN4FwXdVlXFns8KRSvqgL6RzCsaPzDPyhi8RjYgd1P4xM7HBMaKzwQgVWJhBrzApM+SLnLgD+VdLBiaa1x7dnSTpeiVHPmXSyEwSc4Nz0IX9h68MaMpvfL5BMmsivpnksLmrH/X/Zd/wvBZRuDTt3s+R6Fye7ZJpst5NNMiT8TBooTtL6k1k830STzWw9jZP4Zq/+v6a0+5W7KgAA",
  "debug_symbols": "pdbNbuIwFIbhe8mahY/t4x9upaqqlKZVpCigFEYaIe59bL7PtF0Ejeimryk9T5TUCZy7t+H19PEyzu/7z277dO5el3Gaxo+Xab/rj+N+Lr89d6b+cKHbyqZzEUlIvsYbRBCLOMR3W1eiSEAikpB8jRpEEIs4BIpCUSgKRaEolAAlQAlFCSUO8YgiAYlIQvI10SCCQIlQIpQIJUKJUCKUCCVBSVASlAQlQUlQEpQEJUFJUDKUDCVDyVAylAwlQ8lQMpQMRYxhhbWsYz2rbGAjm1h6Qk/oCT2hJ/SEntATekJP6Fl6lp6lZ+lZepaepWfpWXqWnqPn6Dl6jp6j5+g5eo6eo+foeXqenqfn6Xl6np6n5+l5ep6e0lN6Sk/pKT2lp/SUntJTeoFeoMetL9z7ws0v3P3C7S/c/8IbQHgHSL0FYq2wlnWsZ5UtXqqNbGIzWm+Ga4W1rGOLJ1IX2hahLWJbpLbIXNSbAwtpi/r4sXXh2sK3hbZFaIsq28tl07Un3stxGYb6wPv2CCwPxkO/DPOx286nadp0f/rpdP2jz0M/X3vsl/Ku2XTD/FZawPdxGurqsvmaNuujyXM2xduw/vd0vE2ntWm7Pl32DMfL7njg6CG0o+e1aX/nzHM7erbuNm/tj3m9c+63k48xPzLvY5tPZm3+ztmXJ2i7eiY8cPWy3sZX//X5l5dPzC+v311g9QI+l1f9blx+fJ+4VGkZ+9dp4Mv307z79u7x76G9076PHJb9bng7LUOVvr6U1M+gJ8l5Y41/rp8l5aU1Wl7G50s9/D8=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "global G_C: [bool] = &[true, false, true];\nfn main(a: bool) {\n    println(func_1(a, G_C));\n    println(G_C);\n}\nfn func_1(a: bool, mut b: [bool]) -> [bool] {\n    b[1] = a;\n    b\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
